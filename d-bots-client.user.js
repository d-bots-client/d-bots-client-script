// ==UserScript==
// @name         d-bots-client
// @namespace    http://github.com/d-bots-client/
// @version      0.01
// @description  to be writen
// @author       David
// @license      
// @match        http://agar.io/*
// @require      https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.4/socket.io.min.js
// @grant        none
// @run-at       document-start
// ==/UserScript==

//http://agar.io/img/background.png
var engine = '';

var removed = false;

var d = function(a) {
	if (a.src.indexOf('main_out.js') >= 0) {
		window.ok = true;
		a.parentNode.removeChild(a);
		removed = true;
		console.log('AGARBOT - removed their script');
		var b = document.createElement('script');
		b.innerHTML = window.atob(engine);
		document.head.appendChild(b)
		console.log('AGARBOTDEBUG - added ours');
	}
};
var observer = new window.WebKitMutationObserver(function(b) {
	b.forEach(function(a) {
		for (var i = 0; i < a.addedNodes.length; ++i) {
			try {
				d(a.addedNodes[i]);
			} catch (e) {
			}
		}
	});
});
observer.observe(window.document, {
	subtree : true,
	childList : true,
	attribute : false
});
var x = false;
window.onload = function() {
	$("span[data-itr=option_show_mass]").prev()[0].checked = true;
	// setShowMass(true);
	var a = document.getElementById('gamemode').getElementsByTagName('option');
	if (a.length > 0) {
		for (var i = 0; i < a.length; i++) {
			if (a[i].getAttribute('data-itr') != 'party') {
				a[i].innerHTML += ' (Bots not working)';
			}
		}
	}
	if (!document.contains(document.getElementById('minions'))) {
		var b = document.createElement('div');
		b.id = 'minions';
		b.style.cssText = "position: absolute;top: 10px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  background-color: rgba(0, 0, 0, 0.65);width: 220px; height: 160px; ";
		if (window.infos == undefined)
			window.infos = 'D-Bots.com : connecting... (try to refresh your page)';
		//b.innerHTML = window.infos;
        var a = document.createElement('div');
        var c = document.createElement('div');
        var d = document.createElement('div');
        var e = document.createElement('div');
        var f = document.createElement('div');
        var g = document.createElement('div');
        var h = document.createElement('div');
        var i = document.createElement('div');
        var j = document.createElement('div');
        
        
        var w = window.innerWidth - 220;
       
        
        a.style.cssText = "position: absolute;top: 100px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  ";
        c.style.cssText = "position: absolute;top: 75px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  ";
        d.style.cssText = "position: absolute;top: 75px;right: " + w + "px;padding: 0 8px;background-color: blue; font-family: 'Ubuntu'; color: white; ";
        e.style.cssText = "position: absolute;top: 100px;right: " + w + "px;padding: 0 8px;font-family: 'Ubuntu';background-color: yellow;  ";
        f.style.cssText = "position: absolute;top: 125px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  ";
        g.style.cssText = "position: absolute;top: 150px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  ";
        h.style.cssText = "position: absolute;top: 125px;right: " + w + "px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  background-color: red";
        i.style.cssText = "position: absolute;top: 150px;right: " + w + "px;padding: 0 8px;font-family: 'Ubuntu'; color: white; background-color:red ";
        j.style.cssText = "position: absolute;top: 30px;left: 65px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  text-decoration: underline; font-size: 120% ";
       
        
        a.id = 'bots';
        f.id = 'mouse';
        g.id = 'move';
        c.id = 'time';
        d.id = 'time_left';
        e.id = 'bot_count';
        h.id = 'mouse_off';
        i.id = 'move_off';
        j.id = 'd-bots-header';
        
        a.innerHTML = 'Bots:';
        c.innerHTML = 'Time left:';
        d.innerHTML = 'Not Connected';
        e.innerHTML = '0';
        f.innerHTML = 'Mouse Control:';
        g.innerHTML = 'Stop Move:';
        h.innerHTML = 'OFF';
        i.innerHTML = 'OFF';
        j.innerHTML = 'D-Bots.com';
        
        document.body.appendChild(b);
        document.body.appendChild(a);
        document.body.appendChild(d);
        document.body.appendChild(e);
        document.body.appendChild(c);
        document.body.appendChild(f);
        document.body.appendChild(g);
        document.body.appendChild(i);
        document.body.appendChild(h);
        document.body.appendChild(j);
        
		/*
		 * setTimeout(function(){ b.innerHTML = ''; },15000);
		 */
	}
    
    var key = localStorage.getItem('key');
    
   
    
	$("span[data-itr=instructions_w]")
			.append(
					'<br /><span style="font-size=xx-large;color:red;font-weight:bold">BOT INFO:</span><br />No plan active ? Check that you have correctly updated your IP ?<br />Press <b>T</b> to togle mouse movement<br />Press <b>R</b> to eject mass from your bot<br />Press <b>E</b> to split your bot (<b>Shift+E</b> fastSplit bots)<br />Press <b>D</b> to stop moving<br />Press <b>Shift+space</b> to fast split<br />Features : Infinite zoom<br />')
			.append(
					'<span style="color:red">FFA WITH BOTS IS NOT WORKING</span><br />You need to enter the game for the bots to connect,if the bot isn\'t working try to refresh the page<br /><br /><a href="http://d-bots.com">D-Bots.com</a> Disclaimer : <br />Remember that we have no link of any sort with agar.io and the bots can suddenly stop working if agar.io update its game. We will try our best to have our bot solution working and we won\'t refund you if its not.');
	$('#openfl-overlay').remove()
};

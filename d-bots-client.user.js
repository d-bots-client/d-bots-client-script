// ==UserScript==
// @name         d-bots-client
// @namespace    http://github.com/d-bots-client/
// @version      0.01
// @description  to be writen
// @author       David
// @license      
// @match        http://agar.io/*
// @require      https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.4/socket.io.min.js
// @grant        none
// @run-at       document-start
// ==/UserScript==

//http://agar.io/img/background.png
var engine = 'CihmdW5jdGlvbiAoYywgZSkgewogICAgdmFyIHdzID0gbnVsbDsKICAgIHZhciBsYXN0X3dzID0gbnVsbDsKCgogICAgdmFyIGtleV9maWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrZXlfZmllbGQnKTsKICAgIHZhciBrZXkgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgna2V5Jyk7CiAgICB2YXIgY2xpZW50X3V1aWQgPSAxMDA7CiAgICB2YXIgcGFzc3dvcmQgPSAnZGVmYXVsdCc7CiAgICBpZiAoa2V5ICE9PSBudWxsKSB7CiAgICAgICAgY2xpZW50X3V1aWQgPSBrZXkuc3BsaXQoJzonKVswXS5zdWJzdHJpbmcoMywgNCk7CiAgICAgICAgcGFzc3dvcmQgPSBnZXRQYXNzd29yZCgpOwogICAgfQogICAgY29uc29sZS5sb2coJ1Bhc3N3b3JkOiAnICsgcGFzc3dvcmQgKyAnLCBjbGllbnRfdXVpZCAnICsgY2xpZW50X3V1aWQpOwoKICAgIGZ1bmN0aW9uIGdldFBhc3N3b3JkKCkgewogICAgICAgIHZhciBwXyA9IGtleS5zcGxpdCgnOicpOwogICAgICAgIHZhciBwID0gcF9bMF0uc3Vic3RyaW5nKDAsIDEpICsgcF9bMV0uc3Vic3RyaW5nKDEsIDIpICsgcF9bMl0uc3Vic3RyaW5nKDIsIDMpICsgcF9bM10uc3Vic3RyaW5nKDMsIDQpOwogICAgICAgIHJldHVybiBwOwogICAgfQogICAgZnVuY3Rpb24gc2hvd0tleSgpIHsKICAgICAgICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrZXknKTsKICAgICAgICBzLmlubmVySFRNTCA9IGtleTsKICAgIH0KICAgIGZ1bmN0aW9uIHNldEtleSgpIHsKICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgna2V5Jywga2V5X2ZpZWxkLnZhbHVlKTsKICAgICAgICBrZXkgPSBrZXlfZmllbGQudmFsdWU7CiAgICAgICAga2V5X2ZpZWxkLmlubmVySFRNTCA9ICcnOwogICAgfQogICAgZnVuY3Rpb24gdWEoYSwgYikgewogICAgICAgIGlmIChiKSB7CiAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGU7CiAgICAgICAgICAgIGQuc2V0VGltZShkLmdldFRpbWUoKSArIDg2NEU1ICogYik7CiAgICAgICAgICAgIGQgPSAiOyBleHBpcmVzPSIgKyBkLnRvR01UU3RyaW5nKCkKICAgICAgICB9IGVsc2UgZCA9ICIiOwogICAgICAgIGRvY3VtZW50LmNvb2tpZSA9ICJhZ2FyaW9fcmVkaXJlY3Q9IiArIGEgKyBkICsgIjsgcGF0aD0vIgogICAgfQoKICAgIGZ1bmN0aW9uIHRjKCkgewogICAgICAgIGZvciAodmFyIGEgPSBkb2N1bWVudC5jb29raWUuc3BsaXQoIjsiKSwgYiA9IDA7IGIgPCBhLmxlbmd0aDsgYisrKSB7CiAgICAgICAgICAgIGZvciAodmFyIGQgPSBhW2JdOwogICAgICAgICAgICAgICAgIiAiID09IGQuY2hhckF0KDApIDspIGQgPSBkLnN1YnN0cmluZygxLCBkLmxlbmd0aCk7CiAgICAgICAgICAgIGlmICgwID09IGQuaW5kZXhPZigiYWdhcmlvX3JlZGlyZWN0PSIpKSByZXR1cm4gZC5zdWJzdHJpbmcoMTYsIGQubGVuZ3RoKQogICAgICAgIH0KICAgICAgICByZXR1cm4gbnVsbAogICAgfQoKICAgIGZ1bmN0aW9uIEliKCkgewogICAgICAgIGMub25rZXlkb3duID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgLy9BR0FSQk9UT1ZIIENFIENPREUgQSBSQVBBVFJJRVIgREFOUyBOT1RSRUtFWURPV04KICAgICAgICAgICAgaWYgKGEua2V5Q29kZSA9PSA2OSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VtaXQgc3BsaXQgISB3aXRoIGlwOiAnKTsKICAgICAgICAgICAgICAgIHNvY2tldC5lbWl0KCdzcGxpdCcsIHsKICAgICAgICAgICAgICAgICAgICAiY2xpZW50X3V1aWQiOiBjbGllbnRfdXVpZAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGEua2V5Q29kZSA9PSA4MikgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VtaXQgZmVlZCAhd2l0aCBpcDogJyk7CiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdCgnZmVlZCcsIHsKICAgICAgICAgICAgICAgICAgICAiY2xpZW50X3V1aWQiOiBjbGllbnRfdXVpZAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgMzIgIT0gYS5rZXlDb2RlIHx8IHZhIHx8ICgibmljayIgIT0gYS50YXJnZXQuaWQgJiYgYS5wcmV2ZW50RGVmYXVsdCgpLCBlYigpLCB2YSA9ICEwKTsKICAgICAgICAgICAgODEgPT0gYS5rZXlDb2RlICYmIChYKDE4KSwgd2EgPSAhMCk7CiAgICAgICAgICAgIDg3ICE9IGEua2V5Q29kZSB8fCB4YSB8fCAoSmIoKSwgeGEgPSAhMCk7CiAgICAgICAgICAgIDI3ID09IGEua2V5Q29kZSAmJiAoYS5wcmV2ZW50RGVmYXVsdCgpLCB5YSgzMDApLCBlKCIjb2ZlcndhbGxDb250YWluZXIiKS5pcygiOnZpc2libGUiKSAmJiBjLmNsb3NlT2ZmZXJ3YWxsKCksIGUoIiN2aWRlb0NvbnRhaW5lciIpLmlzKCI6dmlzaWJsZSIpICYmIGMuY2xvc2VWaWRlb0NvbnRhaW5lcigpKQogICAgICAgIH07CiAgICAgICAgYy5vbmtleXVwID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgMzIgPT0gYS5rZXlDb2RlICYmICh2YSA9ICExKTsKICAgICAgICAgICAgODcgPT0gYS5rZXlDb2RlICYmICh4YSA9ICExKTsKICAgICAgICAgICAgODEgPT0gYS5rZXlDb2RlICYmIHdhICYmIChYKDE5KSwgd2EgPSAhMSkKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gS2IoYSkgewogICAgICAgIGEucHJldmVudERlZmF1bHQoKTsKICAgICAgICAvLyBBR0FSQk9UT1ZICiAgICAgICAgUCAqPSBNYXRoLnBvdyguOSwgYS53aGVlbERlbHRhIC8gLTEyMCB8fCBhLmRldGFpbCB8fCAwKTsKICAgICAgICBpZiAoMSA8IFApCiAgICAgICAgICAgIFAgPSAxOwogICAgICAgIC8qCiAgICAgICAgUCAqPSBNYXRoLnBvdyguOSwgYS53aGVlbERlbHRhIC8gLTEyMCB8fCBhLmRldGFpbCB8fCAwKTsKICAgICAgICAxID4gUCAmJiAoUCA9IDEpOwogICAgICAgIFAgPiA0IC8gbCAmJiAoUCA9IDQgLyBsKSovCiAgICB9CgogICAgZnVuY3Rpb24gdWMoKSB7CiAgICAgICAgaWYgKC40ID4gbCkgaWEgPSBudWxsOwogICAgICAgIGVsc2UgewogICAgICAgICAgICBmb3IgKHZhciBhID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBiID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBkID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLCBjID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLCBnID0gMDsgZyA8IEEubGVuZ3RoOyBnKyspIHsKICAgICAgICAgICAgICAgIHZhciBlID0gQVtnXTsKICAgICAgICAgICAgICAgICFlLlIoKSB8fCBlLlYgfHwgMjAgPj0gZS5zaXplICogbCB8fCAoYSA9IE1hdGgubWluKGUueCAtIGUuc2l6ZSwgYSksIGIgPSBNYXRoLm1pbihlLnkgLSBlLnNpemUsIGIpLCBkID0gTWF0aC5tYXgoZS54ICsgZS5zaXplLCBkKSwgYyA9IE1hdGgubWF4KGUueSArIGUuc2l6ZSwgYykpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWEgPSB2Yy5pbml0KHsKICAgICAgICAgICAgICAgIHphOiBhIC0gMTAsCiAgICAgICAgICAgICAgICBBYTogYiAtIDEwLAogICAgICAgICAgICAgICAgeGE6IGQgKyAxMCwKICAgICAgICAgICAgICAgIHlhOiBjICsgMTAsCiAgICAgICAgICAgICAgICBIYTogMiwKICAgICAgICAgICAgICAgIElhOiA0CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmb3IgKGcgPSAwOyBnIDwgQS5sZW5ndGg7IGcrKykKICAgICAgICAgICAgICAgIGlmIChlID0gQVtnXSwgZS5SKCkgJiYgISgyMCA+PSBlLnNpemUgKiBsKSkKICAgICAgICAgICAgICAgICAgICBmb3IgKGEgPSAwOyBhIDwgZS5hLmxlbmd0aDsgKythKSBiID0gZS5hW2FdLngsIGQgPSBlLmFbYV0ueSwgYiA8IHkgLSByIC8gMiAvIGwgfHwgZCA8IHogLSB0IC8gMiAvIGwgfHwgYiA+IHkgKyByIC8gMiAvIGwgfHwgZCA+IHogKyB0IC8gMiAvIGwgfHwgaWEudGEoZS5hW2FdKQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBmYigpIHsKICAgICAgICB6YSA9IChZIC0gciAvIDIpIC8gbCArIHk7CiAgICAgICAgQWEgPSAoWiAtIHQgLyAyKSAvIGwgKyB6CiAgICB9CgogICAgZnVuY3Rpb24gTGIoKSB7CiAgICAgICAgbnVsbCA9PSBCYSAmJiAoQmEgPSB7fSwgZSgiI3JlZ2lvbiIpLmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBhID0gZSh0aGlzKSwKICAgICAgICAgICAgICAgIGIgPSBhLnZhbCgpOwogICAgICAgICAgICBiICYmIChCYVtiXSA9IGEudGV4dCgpKQogICAgICAgIH0pKTsKICAgICAgICBlLmdldChDYSArICJpbmZvIiwgZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgdmFyIGIgPSB7fSwKICAgICAgICAgICAgICAgIGQ7CiAgICAgICAgICAgIGZvciAoZCBpbiBhLnJlZ2lvbnMpIHsKICAgICAgICAgICAgICAgIHZhciBjID0gZC5zcGxpdCgiOiIpWzBdOwogICAgICAgICAgICAgICAgYltjXSA9IGJbY10gfHwgMDsKICAgICAgICAgICAgICAgIGJbY10gKz0gYS5yZWdpb25zW2RdLm51bVBsYXllcnMKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGQgaW4gYikgZSgnI3JlZ2lvbiBvcHRpb25bdmFsdWU9IicgKyBkICsgJyJdJykudGV4dChCYVtkXSArICIgKCIgKyBiW2RdICsgIiBwbGF5ZXJzKSIpCiAgICAgICAgfSwgImpzb24iKQogICAgfQoKICAgIGZ1bmN0aW9uIE1iKCkgewogICAgICAgIGUoIiNhZHNCb3R0b20iKS5oaWRlKCk7CiAgICAgICAgZSgiI292ZXJsYXlzIikuaGlkZSgpOwogICAgICAgIGUoIiNzdGF0cyIpLmhpZGUoKTsKICAgICAgICBlKCIjbWFpblBhbmVsIikuaGlkZSgpOwogICAgICAgIGFhID0gamEgPSAhMTsKICAgICAgICBOYigpOwogICAgICAgIGMuZGVzdHJveUFkKGMuYWRTbG90cy5hYSk7CiAgICAgICAgYy5kZXN0cm95QWQoYy5hZFNsb3RzLmFjKQogICAgfQoKICAgIGZ1bmN0aW9uIERhKGEpIHsKICAgICAgICBhICYmIChhID09IEcgPyBlKCIuYnRuLW5lZWRzLXNlcnZlciIpLnByb3AoImRpc2FibGVkIiwgITEpIDogKGUoIiNyZWdpb24iKS52YWwoKSAhPSBhICYmIGUoIiNyZWdpb24iKS52YWwoYSksIEcgPSBjLmxvY2FsU3RvcmFnZS5sb2NhdGlvbiA9IGEsIGUoIi5yZWdpb24tbWVzc2FnZSIpLmhpZGUoKSwgZSgiLnJlZ2lvbi1tZXNzYWdlLiIgKyBhKS5zaG93KCksIGUoIi5idG4tbmVlZHMtc2VydmVyIikucHJvcCgiZGlzYWJsZWQiLCAhMSksIGdiICYmIFEoKSkpCiAgICB9CgogICAgZnVuY3Rpb24geWEoYSkgewogICAgICAgIGphIHx8IGFhIHx8IChFYSA/IGUoIi5idG4tc3BlY3RhdGUiKS5wcm9wKCJkaXNhYmxlZCIsICEwKSA6IGUoIi5idG4tc3BlY3RhdGUiKS5wcm9wKCJkaXNhYmxlZCIsICExKSwgTiA9IG51bGwsIGhiIHx8IChlKCIjYWRzQm90dG9tIikuc2hvdygpLCBlKCIjZzMwMHgyNTAiKS5oaWRlKCksIGUoIiNhMzAweDI1MCIpLnNob3coKSwgZSgiI2c3Mjh4OTAiKS5oaWRlKCksIGUoIiNhNzI4eDkwIikuc2hvdygpKSwgYy5yZWZyZXNoQWQoaGIgPyBjLmFkU2xvdHMuYWMgOiBjLmFkU2xvdHMuYWEpLCBoYiA9ICExLCAxRTMgPiBhICYmIChCID0gMSksIGphID0gITAsIGUoIiNtYWluUGFuZWwiKS5zaG93KCksIDAgPCBhID8gZSgiI292ZXJsYXlzIikuZmFkZUluKGEpIDogZSgiI292ZXJsYXlzIikuc2hvdygpKQogICAgfQoKICAgIGZ1bmN0aW9uIGthKGEpIHsKICAgICAgICBlKCIjaGVsbG9Db250YWluZXIiKS5hdHRyKCJkYXRhLWdhbWVtb2RlIiwgYSk7CiAgICAgICAgbGEgPSBhOwogICAgICAgIGUoIiNnYW1lbW9kZSIpLnZhbChhKQogICAgfQoKICAgIGZ1bmN0aW9uIE5iKCkgewogICAgICAgIGUoIiNyZWdpb24iKS52YWwoKSA/IGMubG9jYWxTdG9yYWdlLmxvY2F0aW9uID0gZSgiI3JlZ2lvbiIpLnZhbCgpIDogYy5sb2NhbFN0b3JhZ2UubG9jYXRpb24gJiYgZSgiI3JlZ2lvbiIpLnZhbChjLmxvY2FsU3RvcmFnZS5sb2NhdGlvbik7CiAgICAgICAgZSgiI3JlZ2lvbiIpLnZhbCgpID8gZSgiI2xvY2F0aW9uS25vd24iKS5hcHBlbmQoZSgiI3JlZ2lvbiIpKSA6IGUoIiNsb2NhdGlvblVua25vd24iKS5hcHBlbmQoZSgiI3JlZ2lvbiIpKQogICAgfQoKICAgIGZ1bmN0aW9uIGliKGEpIHsKICAgICAgICAiZW52X2xvY2FsIiBpbiBFbnZDb25maWcgPyAidHJ1ZSIgPT0gRW52Q29uZmlnLmxvYWRfbG9jYWxfY29uZmlndXJhdGlvbiA/IGMuTUMudXBkYXRlQ29uZmlndXJhdGlvbklEKCJiYXNlIikgOiBjLk1DLnVwZGF0ZUNvbmZpZ3VyYXRpb25JRChFbnZDb25maWcuY29uZmlnSUQpIDogYy5NQy51cGRhdGVDb25maWd1cmF0aW9uSUQoYSkKICAgIH0KCiAgICBmdW5jdGlvbiB3YygpIHsKICAgICAgICAiY29uZmlnSUQiIGluIEQgPyBpYihELmNvbmZpZ0lEKSA6IGUuZ2V0KENhICsgImdldExhdGVzdElEIiwgZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgaWIoYSk7CiAgICAgICAgICAgIGMubG9jYWxTdG9yYWdlLmxhc3RfY29uZmlnX2lkID0gYQogICAgICAgIH0pLmZhaWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgYTsKICAgICAgICAgICAgaWYgKGEgPSAibGFzdF9jb25maWdfaWQiIGluIGMubG9jYWxTdG9yYWdlKSBhID0gYy5sb2NhbFN0b3JhZ2UubGFzdF9jb25maWdfaWQsIGEgPSAhKG51bGwgPT0gYSB8fCB2b2lkIDAgPT0gYSB8fCAiIiA9PT0gYSk7CiAgICAgICAgICAgIGEgJiYgKGEgPSBjLmxvY2FsU3RvcmFnZS5sYXN0X2NvbmZpZ19pZCwgY29uc29sZS5sb2coIkZhbGxiYWNrIHRvIHN0b3JlZCBjb25maWdJRDogIiArIGEpLCBpYihhKSkKICAgICAgICB9KQogICAgfQoKICAgIGZ1bmN0aW9uIHhjKCkgewogICAgICAgIGUuZ2V0KGpiICsgIi8vZ2MuYWdhci5pbyIsIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgIHZhciBiID0gYS5zcGxpdCgiICIpOwogICAgICAgICAgICBhID0gYlswXTsKICAgICAgICAgICAgYiA9IGJbMV0gfHwgIiI7IC0xID09IFsiVUEiXS5pbmRleE9mKGEpICYmIE9iLnB1c2goInVzc3IiKTsKICAgICAgICAgICAgbWEuaGFzT3duUHJvcGVydHkoYSkgJiYgKCJzdHJpbmciID09IHR5cGVvZiBtYVthXSA/IEcgfHwgRGEobWFbYV0pIDogbWFbYV0uaGFzT3duUHJvcGVydHkoYikgJiYgKEcgfHwgRGEobWFbYV1bYl0pKSkKICAgICAgICB9LCAidGV4dCIpCiAgICB9CgogICAgZnVuY3Rpb24gUihhKSB7CiAgICAgICAgcmV0dXJuIGMuaTE4blthXSB8fCBjLmkxOG5fZGljdC5lblthXSB8fCBhCiAgICB9CgogICAgZnVuY3Rpb24gUGIoKSB7CiAgICAgICAgdmFyIGEgPSArK2tiOwogICAgICAgIGNvbnNvbGUubG9nKCJGaW5kICIgKyBHICsgbGEpOwogICAgICAgIFFiKCk7CiAgICAgICAgZS5hamF4KENhICsgImZpbmRTZXJ2ZXIiLCB7CiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiRmFpbGVkIHRvIGdldCBzZXJ2ZXIuIFdpbGwgcmV0cnkgaW4gMzAgc2Vjb25kcyIpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChQYiwgM0U0KQogICAgICAgICAgICB9LAogICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoYikgewogICAgICAgICAgICAgICAgaWYgKGEgPT0ga2IpIHsKICAgICAgICAgICAgICAgICAgICBiLmFsZXJ0ICYmIGFsZXJ0KGIuYWxlcnQpOwogICAgICAgICAgICAgICAgICAgIHZhciBkID0gYi5pcDsKICAgICAgICAgICAgICAgICAgICAiZ2FtZV9zZXJ2ZXJfcG9ydCIgaW4gRW52Q29uZmlnICYmIChkID0gYy5sb2NhdGlvbi5ob3N0bmFtZSArICI6IiArCiAgICAgICAgICAgICAgICAgICAgICAgIEVudkNvbmZpZy5nYW1lX3NlcnZlcl9wb3J0KTsKICAgICAgICAgICAgICAgICAgICBsYigid3MiICsgKG1iID8gInMiIDogIiIpICsgIjovLyIgKyBkLCBiLnRva2VuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgY2FjaGU6ICExLAogICAgICAgICAgICBjcm9zc0RvbWFpbjogITAsCiAgICAgICAgICAgIGRhdGE6IChHICsgbGEgfHwgIj8iKSArICJcbjE1NDY2OTYwMyIKICAgICAgICB9KQogICAgfQoKICAgIGZ1bmN0aW9uIFEoKSB7CiAgICAgICAgZ2IgJiYgRyAmJiAoZSgiI2Nvbm5lY3RpbmciKS5zaG93KCksIFBiKCkpCiAgICB9CgogICAgZnVuY3Rpb24gUWIoKSB7CiAgICAgICAgaWYgKHcpIHsKICAgICAgICAgICAgdy5vbm9wZW4gPSBudWxsOwogICAgICAgICAgICB3Lm9ubWVzc2FnZSA9IG51bGw7CiAgICAgICAgICAgIHcub25jbG9zZSA9IG51bGw7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICB3LmNsb3NlKCkKICAgICAgICAgICAgfSBjYXRjaCAoYSkgeyB9CiAgICAgICAgICAgIHcgPSBudWxsCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGxiKGEsIGIpIHsKICAgICAgICBRYigpOwogICAgICAgIEQuaXAgJiYgKGEgPSAid3MiICsgKG1iID8gInMiIDogIiIpICsgIjovLyIgKyBELmlwKTsKICAgICAgICBpZiAobnVsbCAhPSBTKSB7CiAgICAgICAgICAgIHZhciBkID0gUzsKICAgICAgICAgICAgUyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGQoYikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAobWIgJiYgIUVudkNvbmZpZy5lbnZfZGV2ZWxvcG1lbnQgJiYgIUVudkNvbmZpZy5lbnZfbG9jYWwpIHsKICAgICAgICAgICAgdmFyIGMgPSBhLnNwbGl0KCI6Iik7CiAgICAgICAgICAgIGEgPSAid3NzOi8vaXAtIiArIGNbMV0ucmVwbGFjZSgvXC4vZywgIi0iKS5yZXBsYWNlKC9cLy9nLCAiIikgKyAiLnRlY2guYWdhci5pbzoiICsgK2NbMl0KICAgICAgICB9CiAgICAgICAgRSA9IFtdOwogICAgICAgIHEgPSBbXTsKICAgICAgICBLID0ge307CiAgICAgICAgQSA9IFtdOwogICAgICAgIGJhID0gW107CiAgICAgICAgQyA9IFtdOwogICAgICAgIEggPSBJID0gbnVsbDsKICAgICAgICBUID0gMDsKICAgICAgICBuYSA9ICExOwogICAgICAgIGNvbnNvbGUubG9nKCJDb25uZWN0aW5nIHRvICIgKyBhKTsKICAgICAgICBtLmNhY2hlLnNlbnRHYW1lU2VydmVyTG9naW4gPSAhMTsKICAgICAgICB3ID0gbmV3IFdlYlNvY2tldChhKTsKICAgICAgICB3LmJpbmFyeVR5cGUgPSAiYXJyYXlidWZmZXIiOwogICAgICAgIC8vIEFHQVJCT1RPVkgKICAgICAgICBpcCA9IGE7CiAgICAgICAgaWYgKGIubGVuZ3RoIDwgNikgewogICAgICAgICAgICB3cyA9IGE7CiAgICAgICAgfQogICAgICAgIHJvb20gPSBiOwogICAgICAgIGNoYW5nZUdhbWVNb2RlKCk7CiAgICAgICAgdy5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBhOwogICAgICAgICAgICBGYSA9IHggPSBEYXRlLm5vdygpOwogICAgICAgICAgICBvYSA9IDEyMDsKICAgICAgICAgICAgR2EgPSAwOwogICAgICAgICAgICBjb25zb2xlLmxvZygic29ja2V0IG9wZW4iKTsKICAgICAgICAgICAgYSA9IFUoNSk7CiAgICAgICAgICAgIGEuc2V0VWludDgoMCwgMjU0KTsKICAgICAgICAgICAgYS5zZXRVaW50MzIoMSwgNSwgITApOwogICAgICAgICAgICBWKGEpOwogICAgICAgICAgICBhID0gVSg1KTsKICAgICAgICAgICAgYS5zZXRVaW50OCgwLCAyNTUpOwogICAgICAgICAgICBhLnNldFVpbnQzMigxLCAxNTQ2Njk2MDMsICEwKTsKICAgICAgICAgICAgVihhKTsKICAgICAgICAgICAgYSA9IFUoMSArIGIubGVuZ3RoKTsKICAgICAgICAgICAgYS5zZXRVaW50OCgwLCA4MCk7CiAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgYi5sZW5ndGg7ICsrZCkgYS5zZXRVaW50OChkICsgMSwgYi5jaGFyQ29kZUF0KGQpKTsKICAgICAgICAgICAgVihhKTsKICAgICAgICAgICAgbS5jb3JlLnByb3h5Lm9uU29ja2V0T3BlbigpCiAgICAgICAgfTsKICAgICAgICB3Lm9ubWVzc2FnZSA9IHljOwogICAgICAgIHcub25jbG9zZSA9IHpjOwogICAgICAgIHcub25lcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coSGEuTCgpICsgIiBzb2NrZXQgZXJyb3IiLCBhcmd1bWVudHMpCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIFUoYSkgewogICAgICAgIHJldHVybiBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKGEpKQogICAgfQoKICAgIGZ1bmN0aW9uIFYoYSkgewogICAgICAgIHcuc2VuZChhLmJ1ZmZlcikKICAgIH0KCiAgICBmdW5jdGlvbiB6YygpIHsKICAgICAgICBuYSAmJiAoSWEgPSA1MDApOwogICAgICAgIG0uY29yZS5wcm94eS5vblNvY2tldENsb3NlZCgpOwogICAgICAgIGNvbnNvbGUubG9nKEhhLkwoKSArICIgc29ja2V0IGNsb3NlIik7CiAgICAgICAgc2V0VGltZW91dChRLCBJYSk7CiAgICAgICAgSWEgKj0gMgogICAgfQoKICAgIGZ1bmN0aW9uIHljKGEpIHsKICAgICAgICBBYyhuZXcgRGF0YVZpZXcoYS5kYXRhKSkKICAgIH0KCiAgICBmdW5jdGlvbiBBYyhhKSB7CiAgICAgICAgZnVuY3Rpb24gYigpIHsKICAgICAgICAgICAgZm9yICh2YXIgYiA9ICIiOyA7KSB7CiAgICAgICAgICAgICAgICB2YXIgYyA9IGEuZ2V0VWludDE2KGQsICEwKTsKICAgICAgICAgICAgICAgIGQgKz0gMjsKICAgICAgICAgICAgICAgIGlmICgwID09IGMpIGJyZWFrOwogICAgICAgICAgICAgICAgYiArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGIKICAgICAgICB9CiAgICAgICAgdmFyIGQgPSAwOwogICAgICAgIGlmICgyNDAgPT0gYS5nZXRVaW50OChkKSkgSmEoKTsKICAgICAgICBlbHNlIHN3aXRjaCAoYS5nZXRVaW50OChkKyspKSB7CiAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICBCYyhhLCBkKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgcGEgPSBhLmdldEZsb2F0MzIoZCwgITApOwogICAgICAgICAgICAgICAgZCArPSA0OwogICAgICAgICAgICAgICAgcWEgPSBhLmdldEZsb2F0MzIoZCwgITApOwogICAgICAgICAgICAgICAgZCArPSA0OwogICAgICAgICAgICAgICAgcmEgPSBhLmdldEZsb2F0MzIoZCwgITApOwogICAgICAgICAgICAgICAgZCArPSA0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgICBFID0gW107CiAgICAgICAgICAgICAgICBxID0gW107CiAgICAgICAgICAgICAgICBLID0ge307CiAgICAgICAgICAgICAgICBBID0gW107CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAyMDoKICAgICAgICAgICAgICAgIHEgPSBbXTsKICAgICAgICAgICAgICAgIEUgPSBbXTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgICAgbmIgPSBhLmdldEludDE2KGQsICEwKTsKICAgICAgICAgICAgICAgIGQgKz0gMjsKICAgICAgICAgICAgICAgIG9iID0gYS5nZXRJbnQxNihkLCAhMCk7CiAgICAgICAgICAgICAgICBkICs9IDI7CiAgICAgICAgICAgICAgICBwYiB8fCAocGIgPSAhMCwgS2EgPSBuYiwgTGEgPSBvYik7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAzMjoKICAgICAgICAgICAgICAgIEUucHVzaChhLmdldFVpbnQzMihkLCAhMCkpOwogICAgICAgICAgICAgICAgZCArPSA0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgNDk6CiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPSBJKSBicmVhazsKICAgICAgICAgICAgICAgIHZhciB1ID0gYS5nZXRVaW50MzIoZCwgITApLAogICAgICAgICAgICAgICAgICAgIGQgPSBkICsgNDsKICAgICAgICAgICAgICAgIEMgPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgdTsgKytnKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBhLmdldFVpbnQzMihkLCAhMCksCiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBkICsgNDsKICAgICAgICAgICAgICAgICAgICBDLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICBpZDogZSwKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYigpCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh4dCkgewogICAgICAgICAgICAgICAgICAgIC8vIEFHQVJCT1RPVkgKICAgICAgICAgICAgICAgICAgICB2YXIgYWJvID0ge307CiAgICAgICAgICAgICAgICAgICAgYWJvLmFjdGlvbiA9IDQ7CiAgICAgICAgICAgICAgICAgICAgYWJvLmxlYWRlckJvYXJkID0gQzsKICAgICAgICAgICAgICAgICAgICBidC5zZW5kKEpTT04uc3RyaW5naWZ5KGFibykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgUmIoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDUwOgogICAgICAgICAgICAgICAgSSA9IFtdOwogICAgICAgICAgICAgICAgdSA9IGEuZ2V0VWludDMyKGQsICEwKTsKICAgICAgICAgICAgICAgIGQgKz0gNDsKICAgICAgICAgICAgICAgIGZvciAoZyA9IDA7IGcgPCB1OyArK2cpIEkucHVzaChhLmdldEZsb2F0MzIoZCwgITApKSwgZCArPSA0OwogICAgICAgICAgICAgICAgUmIoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDY0OgogICAgICAgICAgICAgICAgTWEgPSBhLmdldEZsb2F0NjQoZCwgITApOwogICAgICAgICAgICAgICAgZCArPSA4OwogICAgICAgICAgICAgICAgTmEgPSBhLmdldEZsb2F0NjQoZCwgITApOwogICAgICAgICAgICAgICAgZCArPSA4OwogICAgICAgICAgICAgICAgT2EgPSBhLmdldEZsb2F0NjQoZCwgITApOwogICAgICAgICAgICAgICAgZCArPSA4OwogICAgICAgICAgICAgICAgUGEgPSBhLmdldEZsb2F0NjQoZCwgITApOwogICAgICAgICAgICAgICAgbWFwQ29vcmRzKE1hLCBOYSwgT2EsIFBhKTsKICAgICAgICAgICAgICAgIGQgKz0gODsKICAgICAgICAgICAgICAgIHBhID0gKE9hICsgTWEpIC8gMjsKICAgICAgICAgICAgICAgIHFhID0gKFBhICsgTmEpIC8gMjsKICAgICAgICAgICAgICAgIHJhID0gMTsKICAgICAgICAgICAgICAgIDAgPT0gcS5sZW5ndGggJiYgKHkgPSBwYSwgeiA9IHFhLCBsID0gcmEpOwogICAgICAgICAgICAgICAgYS5ieXRlTGVuZ3RoID4gZCAmJiAodSA9IGEuZ2V0VWludDMyKGQsICEwKSwgZCArPSA0LCBxYiA9ICEhKHUgJiAxKSwgcmIgPSBiKCksIGMuTUMudXBkYXRlU2VydmVyVmVyc2lvbihyYiksIGNvbnNvbGUubG9nKCJTZXJ2ZXIgdmVyc2lvbiAiICsgcmIpKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDEwMjoKICAgICAgICAgICAgICAgIHUgPSBhLmJ1ZmZlci5zbGljZShkKTsKICAgICAgICAgICAgICAgIG0uY29yZS5wcm94eS5mb3J3YXJkUHJvdG9NZXNzYWdlKHUpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMTA0OgogICAgICAgICAgICAgICAgYy5sb2dvdXQoKQogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBCYyhhLCBiKSB7CiAgICAgICAgZnVuY3Rpb24gZCgpIHsKICAgICAgICAgICAgZm9yICh2YXIgZCA9ICIiOyA7KSB7CiAgICAgICAgICAgICAgICB2YXIgYyA9IGEuZ2V0VWludDE2KGIsICEwKTsKICAgICAgICAgICAgICAgIGIgKz0gMjsKICAgICAgICAgICAgICAgIGlmICgwID09CiAgICAgICAgICAgICAgICAgICAgYykgYnJlYWs7CiAgICAgICAgICAgICAgICBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYykKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZAogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdSgpIHsKICAgICAgICAgICAgZm9yICh2YXIgZCA9ICIiOyA7KSB7CiAgICAgICAgICAgICAgICB2YXIgYyA9IGEuZ2V0VWludDgoYisrKTsKICAgICAgICAgICAgICAgIGlmICgwID09IGMpIGJyZWFrOwogICAgICAgICAgICAgICAgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGQKICAgICAgICB9CiAgICAgICAgeCA9IERhdGUubm93KCk7CiAgICAgICAgdmFyIGcgPSB4IC0gRmE7CiAgICAgICAgRmEgPSB4OwogICAgICAgIG9hID0gQ2MgKiBvYSArIERjICogZzsKICAgICAgICBHYSA9IEVjICogR2EgKyBGYyAqIE1hdGguYWJzKGcgLSBvYSk7CiAgICAgICAgbS5jb3JlLmRlYnVnICYmIChtLmRlYnVnLnVwZGF0ZUNoYXJ0KCJuZXR3b3JrVXBkYXRlIiwgeCwgZyksIG0uZGVidWcudXBkYXRlQ2hhcnQoInJ0dE1lYW4iLCB4LCBvYSksIG0uZGVidWcudXBkYXRlQ2hhcnQoInJ0dFNEZXYiLCB4LCBHYSkpOwogICAgICAgIG5hIHx8IChuYSA9ICEwLCBlKCIjY29ubmVjdGluZyIpLmhpZGUoKSwgU2IoKSwgUyAmJiAoUygpLCBTID0gbnVsbCkpOwogICAgICAgIHNiID0gITE7CiAgICAgICAgZyA9IGEuZ2V0VWludDE2KGIsICEwKTsKICAgICAgICBiICs9IDI7CiAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBnOyArK3ApIHsKICAgICAgICAgICAgdmFyIEwgPSBLW2EuZ2V0VWludDMyKGIsICEwKV0sCiAgICAgICAgICAgICAgICBrID0gS1thLmdldFVpbnQzMihiICsgNCwgITApXTsKICAgICAgICAgICAgYiArPSA4OwogICAgICAgICAgICBMICYmIGsgJiYgKGsuY2EoKSwgay5zID0gay54LCBrLnUgPSBrLnksIGsubyA9IGsuc2l6ZSwgay5uYShMLngsIEwueSksIGsuZyA9IGsuc2l6ZSwgay5VID0geCwgR2MoTCwgaykpCiAgICAgICAgfQogICAgICAgIGZvciAocCA9IDA7IDspIHsKICAgICAgICAgICAgZyA9IGEuZ2V0VWludDMyKGIsICEwKTsKICAgICAgICAgICAgYiArPSA0OwogICAgICAgICAgICBpZiAoMCA9PSBnKSBicmVhazsKICAgICAgICAgICAgKytwOwogICAgICAgICAgICB2YXIgdGIsIEwgPSBhLmdldEludDMyKGIsICEwKTsKICAgICAgICAgICAgYiArPSA0OwogICAgICAgICAgICBrID0gYS5nZXRJbnQzMihiLCAhMCk7CiAgICAgICAgICAgIGIgKz0gNDsKICAgICAgICAgICAgdGIgPSBhLmdldEludDE2KGIsICEwKTsKICAgICAgICAgICAgYiArPSAyOwogICAgICAgICAgICB2YXIgbiA9IGEuZ2V0VWludDgoYisrKSwKICAgICAgICAgICAgICAgIGYgPSBhLmdldFVpbnQ4KGIrKyksCiAgICAgICAgICAgICAgICBoID0gYS5nZXRVaW50OChiKyspLAogICAgICAgICAgICAgICAgZiA9IEhjKG4gPDwgMTYgfCBmIDw8IDggfCBoKSwKICAgICAgICAgICAgICAgIGggPSBhLmdldFVpbnQ4KGIrKyksCiAgICAgICAgICAgICAgICBsID0gISEoaCAmIDEpLAogICAgICAgICAgICAgICAgciA9ICEhKGggJiAxNiksCiAgICAgICAgICAgICAgICB0ID0gbnVsbDsKICAgICAgICAgICAgaCAmIDIgJiYgKGIgKz0gNCArIGEuZ2V0VWludDMyKGIsICEwKSk7CiAgICAgICAgICAgIGggJiA0ICYmICh0ID0gdSgpKTsKICAgICAgICAgICAgdmFyIHYgPSBkKCksCiAgICAgICAgICAgICAgICBuID0gbnVsbDsKICAgICAgICAgICAgSy5oYXNPd25Qcm9wZXJ0eShnKSA/IChuID0gS1tnXSwgbi5UKCksIG4ucyA9IG4ueCwgbi51ID0gbi55LCBuLm8gPSBuLnNpemUsIG4uY29sb3IgPSBmKSA6IChuID0gbmV3IGNhKGcsIEwsIGssIHRiLCBmLCB2KSwgQS5wdXNoKG4pLCBLW2ddID0gbik7CiAgICAgICAgICAgIG4uYyA9IGw7CiAgICAgICAgICAgIG4uaCA9IHI7CiAgICAgICAgICAgIG4ubmEoTCwgayk7CiAgICAgICAgICAgIG4uZyA9IHRiOwogICAgICAgICAgICBuLlUgPSB4OwogICAgICAgICAgICBuLmVhID0gaDsKICAgICAgICAgICAgdCAmJiAobi5DID0gdCk7CiAgICAgICAgICAgIHYgJiYgbi5BKHYpOyAtMSAhPSBFLmluZGV4T2YoZykgJiYgLTEgPT0gcS5pbmRleE9mKG4pICYmIChxLnB1c2gobiksIG4uSSA9ICEwLCAxID09IHEubGVuZ3RoICYmIChuLnVhID0gITAsIHkgPSBuLngsIHogPSBuLnksIFRiKCksIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJvdmVybGF5cyIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSIsIEYgPSBbXSwgdWIgPSAwLCB2YiA9IHFbMF0uY29sb3IsIEVhID0gITAsIFJhID0gRGF0ZS5ub3coKSwgVyA9IHdiID0geGIgPSAwKSkKICAgICAgICB9CiAgICAgICAgTCA9IGEuZ2V0VWludDMyKGIsICEwKTsKICAgICAgICBiICs9IDQ7CiAgICAgICAgZm9yIChwID0gMDsgcCA8IEw7IHArKykgZyA9IGEuZ2V0VWludDMyKGIsICEwKSwgYiArPSA0LCBuID0gS1tnXSwgbnVsbCAhPSBuICYmIG4uY2EoKTsKICAgICAgICBzYiAmJiAwID09IHEubGVuZ3RoICYmICgwID09IGMuTUMuaXNVc2VyTG9nZ2VkSW4oKSA/IEphKCkgOiBVYiA9IHNldFRpbWVvdXQoSmEsIDJFMykpCiAgICB9CgogICAgZnVuY3Rpb24gU2EoKSB7CiAgICAgICAgaWYgKGRhKCkpIHsKICAgICAgICAgICAgdmFyIGEgPSBZIC0gciAvIDIsCiAgICAgICAgICAgICAgICBiID0gWiAtIHQgLyAyOwoKICAgICAgICAgICAgLy8gQUdBUkJPVE9WSAogICAgICAgICAgICBpZiAoNjQgPiBhICogYSArIGIgKiBiIHx8IC4wMSA+IE1hdGguYWJzKFZiIC0gemEpICYmIC4wMSA+IE1hdGguYWJzKFdiIC0gQWEpIHx8IChWYiA9IHphLCBXYiA9IEFhLCBhID0gVSgxMyksIGEuc2V0VWludDgoMCwgMTYpLCBoZXkoYSwgemEsIEFhKSwgeHQpKSB7CgogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIEFHQVJCT1RPVkgKCiAgICAgICAgICAgIC8qIDY0ID4gYSAqIGEgKyBiICogYiB8fCAuMDEgPiBNYXRoLmFicyhWYiAtCiAgICAgICAgICAgICAgICAgemEpICYmIC4wMSA+IE1hdGguYWJzKFdiIC0gQWEpIHx8IChWYiA9IHphLCBXYiA9IEFhLCBhID0gVSgxMyksIGEuc2V0VWludDgoMCwgMTYpLCBhLnNldEludDMyKDEsIHphLCAhMCksIGEuc2V0SW50MzIoNSwgQWEsICEwKSwgYS5zZXRVaW50MzIoOSwgMCwgITApLCBWKGEpKQogICAgICAgICAqLwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBTYigpIHsKICAgICAgICBpZiAoZGEoKSAmJiBuYSAmJiBudWxsICE9IE4pIHsKICAgICAgICAgICAgdmFyIGEgPSBVKDEgKyAyICogTi5sZW5ndGgpOwogICAgICAgICAgICAvLyBBR0FSQk9UT1ZICiAgICAgICAgICAgIHN0b3BNb3ZlID0gZmFsc2U7CiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b0ZlZWRJbnRlcnZhbCk7CiAgICAgICAgICAgIGF1dG9GZWVkSW50ZXJ2YWwgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIHJlZnJlc2goKTsKICAgICAgICAgICAgLy8gQUdBUkJPVE9WSAogICAgICAgICAgICBhLnNldFVpbnQ4KDAsIDApOwogICAgICAgICAgICBmb3IgKHZhciBiID0gMDsgYiA8IE4ubGVuZ3RoOyArK2IpIGEuc2V0VWludDE2KDEgKyAyICogYiwgTi5jaGFyQ29kZUF0KGIpLCAhMCk7CiAgICAgICAgICAgIFYoYSk7CiAgICAgICAgICAgIE4gPSBudWxsCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGViKCkgewogICAgICAgIFNhKCk7CiAgICAgICAgWCgxNykKICAgIH0KCiAgICBmdW5jdGlvbiBKYigpIHsKICAgICAgICBTYSgpOwogICAgICAgIFgoMjEpCiAgICB9CgogICAgZnVuY3Rpb24gZGEoKSB7CiAgICAgICAgcmV0dXJuIG51bGwgIT0gdyAmJiB3LnJlYWR5U3RhdGUgPT0gdy5PUEVOCiAgICB9CgogICAgZnVuY3Rpb24gWChhKSB7CiAgICAgICAgaWYgKGRhKCkpIHsKICAgICAgICAgICAgdmFyIGIgPSBVKDEpOwogICAgICAgICAgICBiLnNldFVpbnQ4KDAsIGEpOwogICAgICAgICAgICBWKGIpCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIFhiKCkgewogICAgICAgIHIgPSAxICogYy5pbm5lcldpZHRoOwogICAgICAgIHQgPSAxICogYy5pbm5lckhlaWdodDsKICAgICAgICB5Yi53aWR0aCA9IE8ud2lkdGggPSByOwogICAgICAgIHliLmhlaWdodCA9IE8uaGVpZ2h0ID0gdDsKICAgICAgICB2YXIgYSA9IGUoIiNoZWxsb0NvbnRhaW5lciIpOwogICAgICAgIGEuY3NzKCJ0cmFuc2Zvcm0iLCAibm9uZSIpOwogICAgICAgIHZhciBiID0gYS5oZWlnaHQoKSwKICAgICAgICAgICAgZCA9IGMuaW5uZXJIZWlnaHQ7CiAgICAgICAgMCAhPSBiIC8gMiAlIDIgJiYgKGIrKywgYS5oZWlnaHQoYikpOwogICAgICAgIGIgPiBkIC8gMS4xID8gYS5jc3MoInRyYW5zZm9ybSIsICJ0cmFuc2xhdGUoLTUwJSwgLTUwJSkgc2NhbGUoIiArIGQgLyBiIC8gMS4xICsgIikiKSA6IGEuY3NzKCJ0cmFuc2Zvcm0iLCAidHJhbnNsYXRlKC01MCUsIC01MCUpIik7CiAgICAgICAgWWIoKQogICAgfQoKICAgIGZ1bmN0aW9uIFpiKCkgewogICAgICAgIHZhciBhOwogICAgICAgIGEgPSAxICogTWF0aC5tYXgodCAvIDEwODAsIHIgLyAxOTIwKTsKICAgICAgICByZXR1cm4gYSAqPSBQCiAgICB9CgogICAgZnVuY3Rpb24gSWMoKSB7CiAgICAgICAgaWYgKDAgIT0gcS5sZW5ndGgpIHsKICAgICAgICAgICAgZm9yICh2YXIgYSA9IDAsIGIgPSAwOyBiIDwgcS5sZW5ndGg7IGIrKykgYSArPSBxW2JdLnNpemU7CiAgICAgICAgICAgIGwgPSAoOSAqIGwgKyBNYXRoLnBvdyhNYXRoLm1pbig2NCAvIGEsIDEpLCAuNCkgKiBaYigpKSAvIDEwCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIFliKCkgewogICAgICAgIHZhciBhLCBiID0gRGF0ZS5ub3coKTsKICAgICAgICArK0pjOwogICAgICAgICRiICYmICgrK1RhLCAxODAgPCBUYSAmJiAoVGEgPSAwKSk7CiAgICAgICAgeCA9CiAgICAgICAgICAgIGI7CiAgICAgICAgaWYgKDAgPCBxLmxlbmd0aCkgewogICAgICAgICAgICBJYygpOwogICAgICAgICAgICBmb3IgKHZhciBkID0gYSA9IDAsIGMgPSAwOyBjIDwgcS5sZW5ndGg7IGMrKykgcVtjXS5UKCksIGEgKz0gcVtjXS54IC8gcS5sZW5ndGgsIGQgKz0gcVtjXS55IC8gcS5sZW5ndGg7CiAgICAgICAgICAgIHBhID0gYTsKICAgICAgICAgICAgcWEgPSBkOwogICAgICAgICAgICByYSA9IGw7CiAgICAgICAgICAgIHkgPSAoeSArIGEpIC8gMjsKICAgICAgICAgICAgeiA9ICh6ICsgZCkgLyAyCiAgICAgICAgfSBlbHNlIHkgPSAoMjkgKiB5ICsgcGEpIC8gMzAsIHogPSAoMjkgKiB6ICsgcWEpIC8gMzAsIGwgPSAoOSAqIGwgKyByYSAqIFpiKCkpIC8gMTA7CiAgICAgICAgdWMoKTsKICAgICAgICBmYigpOwogICAgICAgIHpiIHx8IGYuY2xlYXJSZWN0KDAsIDAsIHIsIHQpOwogICAgICAgIHpiID8gKGYuZmlsbFN0eWxlID0gZWEgPyAiIzExMTExMSIgOiAiI0YyRkJGRiIsIGYuZ2xvYmFsQWxwaGEgPSAuMDUsIGYuZmlsbFJlY3QoMCwgMCwgciwgdCksIGYuZ2xvYmFsQWxwaGEgPSAxKSA6IEtjKCk7CiAgICAgICAgQS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgIHJldHVybiBhLnNpemUgPT0gYi5zaXplID8gYS5pZCAtIGIuaWQgOiBhLnNpemUgLSBiLnNpemUKICAgICAgICB9KTsKICAgICAgICBmLnNhdmUoKTsKICAgICAgICBmLnRyYW5zbGF0ZShyIC8gMiwgdCAvIDIpOwogICAgICAgIGYuc2NhbGUobCwgbCk7CiAgICAgICAgZi50cmFuc2xhdGUoLXksIC16KTsKICAgICAgICBmb3IgKGMgPSAwOyBjIDwgYmEubGVuZ3RoOyBjKyspIGJhW2NdLncoZik7CiAgICAgICAgZm9yIChjID0gMDsgYyA8CiAgICAgICAgICAgIEEubGVuZ3RoOyBjKyspIEFbY10udyhmKTsKICAgICAgICBpZiAocGIpIHsKICAgICAgICAgICAgS2EgPSAoMyAqIEthICsgbmIpIC8gNDsKICAgICAgICAgICAgTGEgPSAoMyAqIExhICsgb2IpIC8gNDsKICAgICAgICAgICAgZi5zYXZlKCk7CiAgICAgICAgICAgIGYuc3Ryb2tlU3R5bGUgPSAiI0ZGQUFBQSI7CiAgICAgICAgICAgIGYubGluZVdpZHRoID0gMTA7CiAgICAgICAgICAgIGYubGluZUNhcCA9ICJyb3VuZCI7CiAgICAgICAgICAgIGYubGluZUpvaW4gPSAicm91bmQiOwogICAgICAgICAgICBmLmdsb2JhbEFscGhhID0gLjU7CiAgICAgICAgICAgIGYuYmVnaW5QYXRoKCk7CiAgICAgICAgICAgIGZvciAoYyA9IDA7IGMgPCBxLmxlbmd0aDsgYysrKSBmLm1vdmVUbyhxW2NdLngsIHFbY10ueSksIGYubGluZVRvKEthLCBMYSk7CiAgICAgICAgICAgIGYuc3Ryb2tlKCk7CiAgICAgICAgICAgIGYucmVzdG9yZSgpCiAgICAgICAgfQogICAgICAgIGYucmVzdG9yZSgpOwogICAgICAgIEggJiYgSC53aWR0aCAmJiBmLmRyYXdJbWFnZShILCByIC0gSC53aWR0aCAtIDEwLCAxMCk7CiAgICAgICAgVCA9IE1hdGgubWF4KFQsIGFjKCkpOwogICAgICAgIDAgIT0gVCAmJiAobnVsbCA9PSBVYSAmJiAoVWEgPSBuZXcgVmEoMjQsICIjRkZGRkZGIikpLCBVYS5CKFIoInNjb3JlIikgKyAiOiAiICsgfn4oVCAvIDEwMCkpLCBkID0gVWEuTygpLCBhID0gZC53aWR0aCwgZi5nbG9iYWxBbHBoYSA9IC4yLCBmLmZpbGxTdHlsZSA9ICIjMDAwMDAwIiwgZi5maWxsUmVjdCgxMCwgdCAtIDEwIC0gMjQgLSAxMCwgYSArIDEwLCAzNCksCiAgICAgICAgICAgIGYuZ2xvYmFsQWxwaGEgPSAxLCBmLmRyYXdJbWFnZShkLCAxNSwgdCAtIDEwIC0gMjQgLSA1KSk7CiAgICAgICAgTGMoKTsKICAgICAgICBiID0gRGF0ZS5ub3coKSAtIGI7CiAgICAgICAgYiA+IDFFMyAvIDYwID8gTSAtPSAuMDEgOiBiIDwgMUUzIC8gNjUgJiYgKE0gKz0gLjAxKTsKICAgICAgICAuNCA+IE0gJiYgKE0gPSAuNCk7CiAgICAgICAgMSA8IE0gJiYgKE0gPSAxKTsKICAgICAgICBiID0geCAtIGJjOwogICAgICAgICFkYSgpIHx8IGphIHx8IGFhID8gKEIgKz0gYiAvIDJFMywgMSA8IEIgJiYgKEIgPSAxKSkgOiAoQiAtPSBiIC8gMzAwLCAwID4gQiAmJiAoQiA9IDApKTsKICAgICAgICAwIDwgQiA/IChmLmZpbGxTdHlsZSA9ICIjMDAwMDAwIiwgY2MgPyAoZi5nbG9iYWxBbHBoYSA9IEIsIGYuZmlsbFJlY3QoMCwgMCwgciwgdCksIEouY29tcGxldGUgJiYgSi53aWR0aCAmJiAoSi53aWR0aCAvIEouaGVpZ2h0IDwgciAvIHQgPyAoYiA9IHIsIGEgPSBKLmhlaWdodCAqIHIgLyBKLndpZHRoKSA6IChiID0gSi53aWR0aCAqIHQgLyBKLmhlaWdodCwgYSA9IHQpLCBmLmRyYXdJbWFnZShKLCAociAtIGIpIC8gMiwgKHQgLSBhKSAvIDIsIGIsIGEpLCBmLmdsb2JhbEFscGhhID0gLjUgKiBCLCBmLmZpbGxSZWN0KDAsIDAsIHIsIHQpKSkgOiAoZi5nbG9iYWxBbHBoYSA9IC41ICogQiwgZi5maWxsUmVjdCgwLCAwLCByLCB0KSksIGYuZ2xvYmFsQWxwaGEgPSAxKSA6IGNjID0gITE7CiAgICAgICAgYmMgPSB4CiAgICB9CgogICAgZnVuY3Rpb24gS2MoKSB7CiAgICAgICAgZi5maWxsU3R5bGUgPQogICAgICAgICAgICBlYSA/ICIjMTExMTExIiA6ICIjRjJGQkZGIjsKICAgICAgICBmLmZpbGxSZWN0KDAsIDAsIHIsIHQpOwogICAgICAgIGYuc2F2ZSgpOwogICAgICAgIGYuc3Ryb2tlU3R5bGUgPSBlYSA/ICIjQUFBQUFBIiA6ICIjMDAwMDAwIjsKICAgICAgICBmLmdsb2JhbEFscGhhID0gLjIgKiBsOwogICAgICAgIGZvciAodmFyIGEgPSByIC8gbCwgYiA9IHQgLyBsLCBkID0gKC15ICsgYSAvIDIpICUgNTA7IGQgPCBhOyBkICs9IDUwKSBmLmJlZ2luUGF0aCgpLCBmLm1vdmVUbyhkICogbCAtIC41LCAwKSwgZi5saW5lVG8oZCAqIGwgLSAuNSwgYiAqIGwpLCBmLnN0cm9rZSgpOwogICAgICAgIGZvciAoZCA9ICgteiArIGIgLyAyKSAlIDUwOyBkIDwgYjsgZCArPSA1MCkgZi5iZWdpblBhdGgoKSwgZi5tb3ZlVG8oMCwgZCAqIGwgLSAuNSksIGYubGluZVRvKGEgKiBsLCBkICogbCAtIC41KSwgZi5zdHJva2UoKTsKICAgICAgICBmLnJlc3RvcmUoKQogICAgfQoKICAgIGZ1bmN0aW9uIExjKCkgewogICAgICAgIGlmIChkYyAmJiBBYi53aWR0aCkgewogICAgICAgICAgICB2YXIgYSA9IHIgLyA1OwogICAgICAgICAgICBmLmRyYXdJbWFnZShBYiwgNSwgNSwgYSwgYSkKICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gYWMoKSB7CiAgICAgICAgZm9yICh2YXIgYSA9IDAsIGIgPSAwOyBiIDwgcS5sZW5ndGg7IGIrKykgYSArPSBxW2JdLmcgKiBxW2JdLmc7CiAgICAgICAgcmV0dXJuIGEKICAgIH0KCiAgICBmdW5jdGlvbiBSYigpIHsKICAgICAgICBIID0gbnVsbDsKICAgICAgICBpZiAobnVsbCAhPSBJIHx8IDAgIT0gQy5sZW5ndGgpCiAgICAgICAgICAgIGlmIChudWxsICE9IEkgfHwgZmEpIHsKICAgICAgICAgICAgICAgIEggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgICAgICAgICAgICAgIHZhciBhID0gSC5nZXRDb250ZXh0KCIyZCIpLAogICAgICAgICAgICAgICAgICAgIGIgPSA2MCwKICAgICAgICAgICAgICAgICAgICBiID0gbnVsbCA9PSBJID8gYiArIDI0ICogQy5sZW5ndGggOiBiICsgMTgwLAogICAgICAgICAgICAgICAgICAgIGQgPSBNYXRoLm1pbigyMDAsIC4zICogcikgLyAyMDA7CiAgICAgICAgICAgICAgICBILndpZHRoID0gMjAwICogZDsKICAgICAgICAgICAgICAgIEguaGVpZ2h0ID0gYiAqIGQ7CiAgICAgICAgICAgICAgICBhLnNjYWxlKGQsIGQpOwogICAgICAgICAgICAgICAgYS5nbG9iYWxBbHBoYSA9IC40OwogICAgICAgICAgICAgICAgYS5maWxsU3R5bGUgPSAiIzAwMDAwMCI7CiAgICAgICAgICAgICAgICBhLmZpbGxSZWN0KDAsIDAsIDIwMCwgYik7CiAgICAgICAgICAgICAgICBhLmdsb2JhbEFscGhhID0gMTsKICAgICAgICAgICAgICAgIGEuZmlsbFN0eWxlID0gIiNGRkZGRkYiOwogICAgICAgICAgICAgICAgZCA9IG51bGw7CiAgICAgICAgICAgICAgICBkID0gUigibGVhZGVyYm9hcmQiKTsKICAgICAgICAgICAgICAgIGEuZm9udCA9ICIzMHB4IFVidW50dSI7CiAgICAgICAgICAgICAgICBhLmZpbGxUZXh0KGQsIDEwMCAtIGEubWVhc3VyZVRleHQoZCkud2lkdGggLyAyLCA0MCk7CiAgICAgICAgICAgICAgICB2YXIgYywgZTsKICAgICAgICAgICAgICAgIGlmIChudWxsID09IEkpCiAgICAgICAgICAgICAgICAgICAgZm9yIChhLmZvbnQgPSAiMjBweCBVYnVudHUiLCBiID0gMDsgYiA8IEMubGVuZ3RoOyArK2IpIGQgPSBDW2JdLm5hbWUgfHwgUigidW5uYW1lZF9jZWxsIiksIGZhIHx8IChkID0gUigidW5uYW1lZF9jZWxsIikpLCAxID09IENbYl0uaWQgfHwgLTEgIT0gRS5pbmRleE9mKENbYl0uaWQpID8KICAgICAgICAgICAgICAgICAgICAgICAgKHFbMF0ubmFtZSAmJiAoZCA9IHFbMF0ubmFtZSksIGEuZmlsbFN0eWxlID0gIiNGRkFBQUEiKSA6IGEuZmlsbFN0eWxlID0gIiNGRkZGRkYiLCBkID0gYiArIDEgKyAiLiAiICsgZCwgZSA9IGEubWVhc3VyZVRleHQoZCkud2lkdGgsIGMgPSA3MCArIDI0ICogYiwgMjAwIDwgZSA/IGEuZmlsbFRleHQoZCwgMTAsIGMpIDogYS5maWxsVGV4dChkLCAoMjAwIC0gZSkgLyAyLCBjKTsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBmb3IgKGIgPSBkID0gMDsgYiA8IEkubGVuZ3RoOyArK2IpIGMgPSBkICsgSVtiXSAqIE1hdGguUEkgKiAyLCBhLmZpbGxTdHlsZSA9IE1jW2IgKyAxXSwgYS5iZWdpblBhdGgoKSwgYS5tb3ZlVG8oMTAwLCAxNDApLCBhLmFyYygxMDAsIDE0MCwgODAsIGQsIGMsICExKSwgYS5maWxsKCksIGQgPSBjCiAgICAgICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBOYyhhKSB7CiAgICAgICAgaWYgKG51bGwgPT0gYSB8fCAwID09IGEubGVuZ3RoKSByZXR1cm4gbnVsbDsKICAgICAgICBpZiAoIiUiID09IGFbMF0pIHsKICAgICAgICAgICAgaWYgKCFjLk1DIHx8ICFjLk1DLmdldFNraW5JbmZvKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgYSA9IGMuTUMuZ2V0U2tpbkluZm8oInNraW5fIiArIGEuc2xpY2UoMSkpOwogICAgICAgICAgICBpZiAobnVsbCA9PSBhKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgZm9yIChhID0gKCthLmNvbG9yKS50b1N0cmluZygxNikgOyA2ID4KICAgICAgICAgICAgICAgIGEubGVuZ3RoOykgYSA9ICIwIiArIGE7CiAgICAgICAgICAgIHJldHVybiAiIyIgKyBhCiAgICAgICAgfQogICAgICAgIHJldHVybiBudWxsCiAgICB9CgogICAgZnVuY3Rpb24gZWMoYSkgewogICAgICAgIGlmIChudWxsID09IGEgfHwgMCA9PSBhLmxlbmd0aCkgcmV0dXJuIG51bGw7CiAgICAgICAgaWYgKCFzYS5oYXNPd25Qcm9wZXJ0eShhKSkgewogICAgICAgICAgICB2YXIgYiA9IG5ldyBJbWFnZTsKICAgICAgICAgICAgaWYgKCI6IiA9PSBhWzBdKSBiLnNyYyA9IGEuc2xpY2UoMSk7CiAgICAgICAgICAgIGVsc2UgaWYgKCIlIiA9PSBhWzBdKSB7CiAgICAgICAgICAgICAgICBpZiAoIWMuTUMgfHwgIWMuTUMuZ2V0U2tpbkluZm8pIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgdmFyIGQgPSBjLk1DLmdldFNraW5JbmZvKCJza2luXyIgKyBhLnNsaWNlKDEpKTsKICAgICAgICAgICAgICAgIGlmIChudWxsID09IGQpIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgYi5zcmMgPSBjLkFTU0VUU19ST09UICsgZC51cmwKICAgICAgICAgICAgfQogICAgICAgICAgICBzYVthXSA9IGIKICAgICAgICB9CiAgICAgICAgcmV0dXJuIDAgIT0gc2FbYV0ud2lkdGggJiYgc2FbYV0uY29tcGxldGUgPyBzYVthXSA6IG51bGwKICAgIH0KCiAgICBmdW5jdGlvbiBCYihhLCBiLCBkLCBjLCBlKSB7CiAgICAgICAgdGhpcy4kID0gYTsKICAgICAgICB0aGlzLnggPSBiOwogICAgICAgIHRoaXMueSA9IGQ7CiAgICAgICAgdGhpcy5mID0gYzsKICAgICAgICB0aGlzLmIgPSBlCiAgICB9CgogICAgZnVuY3Rpb24gY2EoYSwgYiwgZCwgYywgZSwgcCkgewogICAgICAgIHRoaXMuaWQgPSBhOwogICAgICAgIHRoaXMucyA9IHRoaXMueCA9IHRoaXMuTSA9IHRoaXMuSiA9IGI7CiAgICAgICAgdGhpcy51ID0gdGhpcy55ID0gdGhpcy5OID0gdGhpcy5LID0gZDsKICAgICAgICB0aGlzLm8gPSB0aGlzLnNpemUgPSBjOwogICAgICAgIHRoaXMuY29sb3IgPSBlOwogICAgICAgIHRoaXMuYSA9IFtdOwogICAgICAgIHRoaXMuYmEoKTsKICAgICAgICB0aGlzLkEocCkKICAgIH0KCiAgICBmdW5jdGlvbiBIYyhhKSB7CiAgICAgICAgZm9yIChhID0gYS50b1N0cmluZygxNikgOyA2ID4gYS5sZW5ndGg7KSBhID0gIjAiICsgYTsKICAgICAgICByZXR1cm4gIiMiICsgYQogICAgfQoKICAgIGZ1bmN0aW9uIFZhKGEsIGIsIGQsIGMpIHsKICAgICAgICBhICYmICh0aGlzLnYgPSBhKTsKICAgICAgICBiICYmICh0aGlzLlcgPSBiKTsKICAgICAgICB0aGlzLlkgPSAhIWQ7CiAgICAgICAgYyAmJiAodGhpcy5aID0gYykKICAgIH0KCiAgICBmdW5jdGlvbiBPYyhhKSB7CiAgICAgICAgZm9yICh2YXIgYiA9IGEubGVuZ3RoLCBkLCBjOyAwIDwgYjspIGMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBiKSwgYi0tLCBkID0gYVtiXSwgYVtiXSA9IGFbY10sIGFbY10gPSBkCiAgICB9CgogICAgZnVuY3Rpb24gUGMoKSB7CiAgICAgICAgaCA9IFdhCiAgICB9CgogICAgZnVuY3Rpb24gZmMoYSkgewogICAgICAgIGguY29udGV4dCA9ICJnb29nbGUiID09IGEgPyAiZ29vZ2xlIiA6ICJmYWNlYm9vayI7CiAgICAgICAgWGEoKQogICAgfQoKICAgIGZ1bmN0aW9uIFhhKCkgewogICAgICAgIGMubG9jYWxTdG9yYWdlLnN0b3JlT2JqZWN0SW5mbyA9IEpTT04uc3RyaW5naWZ5KGgpOwogICAgICAgIGggPSBKU09OLnBhcnNlKGMubG9jYWxTdG9yYWdlLnN0b3JlT2JqZWN0SW5mbyk7CiAgICAgICAgYy5zdG9yYWdlSW5mbyA9IGg7CiAgICAgICAgImdvb2dsZSIgPT0gaC5jb250ZXh0ID8gKGUoIiNnUGx1c1NoYXJlIikuc2hvdygpLCBlKCIjZmJTaGFyZSIpLmhpZGUoKSkgOiAoZSgiI2dQbHVzU2hhcmUiKS5oaWRlKCksIGUoIiNmYlNoYXJlIikuc2hvdygpKQogICAgfQoKICAgIGZ1bmN0aW9uIGdjKGEpIHsKICAgICAgICBlKCIjaGVsbG9Db250YWluZXIiKS5hdHRyKCJkYXRhLWhhcy1hY2NvdW50LWRhdGEiKTsKICAgICAgICAiIiAhPSBhLmRpc3BsYXlOYW1lICYmIChhLm5hbWUgPSBhLmRpc3BsYXlOYW1lKTsKICAgICAgICBpZiAobnVsbCA9PSBhLm5hbWUgfHwgdm9pZCAwID09IGEubmFtZSkgYS5uYW1lID0gIiI7CiAgICAgICAgdmFyIGIgPSBhLm5hbWUubGFzdEluZGV4T2YoIl8iKTsgLTEgIT0gYiAmJiAoYS5uYW1lID0gYS5uYW1lLnN1YnN0cmluZygwLCBiKSk7CiAgICAgICAgZSgiI2hlbGxvQ29udGFpbmVyIikuYXR0cigiZGF0YS1oYXMtYWNjb3VudC1kYXRhIiwgIjEiKTsKICAgICAgICBlKCIjaGVsbG9Db250YWluZXIiKS5hdHRyKCJkYXRhLWxvZ2dlZC1pbiIsICIxIik7CiAgICAgICAgZSgiLmFnYXJpby1wcm9maWxlLXBhbmVsIC5wcm9ncmVzcy1iYXItc3RhciIpLnRleHQoYS5sZXZlbCk7CiAgICAgICAgZSgiLmFnYXJpby1leHAtYmFyIC5wcm9ncmVzcy1iYXItdGV4dCIpLnRleHQoYS54cCArICIvIiArIGEueHBOZWVkZWQgKyAiIFhQIik7CiAgICAgICAgZSgiLmFnYXJpby1leHAtYmFyIC5wcm9ncmVzcy1iYXIiKS5jc3MoIndpZHRoIiwgKDg4ICogYS54cCAvIGEueHBOZWVkZWQpLnRvRml4ZWQoMikgKyAiJSIpOwogICAgICAgIGUoIi5hZ2FyaW8tcHJvZmlsZS1uYW1lIikudGV4dChhLm5hbWUpOwogICAgICAgICIiICE9IGEucGljdHVyZSAmJiBlKCIuYWdhcmlvLXByb2ZpbGUtcGljdHVyZSIpLmF0dHIoInNyYyIsIGEucGljdHVyZSk7CiAgICAgICAgQ2IoKTsKICAgICAgICBoLnVzZXJJbmZvLmxldmVsID0gYS5sZXZlbDsKICAgICAgICBoLnVzZXJJbmZvLnhwID0gYS54cDsKICAgICAgICBoLnVzZXJJbmZvLnhwTmVlZGVkID0gYS54cE5lZWRlZDsKICAgICAgICBoLnVzZXJJbmZvLmRpc3BsYXlOYW1lID0gYS5uYW1lOwogICAgICAgIGgudXNlckluZm8ubG9nZ2VkSW4gPSAiMSI7CiAgICAgICAgYy51cGRhdGVTdG9yYWdlKCkKICAgIH0KCiAgICBmdW5jdGlvbiBnYShhLCBiKSB7CiAgICAgICAgdmFyIGQgPSBhOwogICAgICAgIGlmIChoLnVzZXJJbmZvLmxvZ2dlZEluKSB7CiAgICAgICAgICAgIHZhciB1ID0gZSgiI2hlbGxvQ29udGFpbmVyIikuaXMoIjp2aXNpYmxlIikgJiYgIjEiID09IGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtaGFzLWFjY291bnQtZGF0YSIpOwogICAgICAgICAgICBpZiAobnVsbCA9PSBkIHx8IHZvaWQgMCA9PSBkKSBkID0gaC51c2VySW5mbzsKICAgICAgICAgICAgaWYgKHUpIHsKICAgICAgICAgICAgICAgIHZhciBnID0gK2UoIi5hZ2FyaW8tZXhwLWJhciAucHJvZ3Jlc3MtYmFyLXRleHQiKS5maXJzdCgpLnRleHQoKS5zcGxpdCgiLyIpWzBdLAogICAgICAgICAgICAgICAgICAgIHUgPSArZSgiLmFnYXJpby1leHAtYmFyIC5wcm9ncmVzcy1iYXItdGV4dCIpLmZpcnN0KCkudGV4dCgpLnNwbGl0KCIvIilbMV0uc3BsaXQoIiAiKVswXSwKICAgICAgICAgICAgICAgICAgICBwID0gZSgiLmFnYXJpby1wcm9maWxlLXBhbmVsIC5wcm9ncmVzcy1iYXItc3RhciIpLmZpcnN0KCkudGV4dCgpOwogICAgICAgICAgICAgICAgaWYgKHAgIT0gZC5sZXZlbCkgZ2EoewogICAgICAgICAgICAgICAgICAgIHhwOiB1LAogICAgICAgICAgICAgICAgICAgIHhwTmVlZGVkOiB1LAogICAgICAgICAgICAgICAgICAgIGxldmVsOiBwCiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgZSgiLmFnYXJpby1wcm9maWxlLXBhbmVsIC5wcm9ncmVzcy1iYXItc3RhciIpLnRleHQoZC5sZXZlbCk7CiAgICAgICAgICAgICAgICAgICAgZSgiLmFnYXJpby1leHAtYmFyIC5wcm9ncmVzcy1iYXIiKS5jc3MoIndpZHRoIiwgIjEwMCUiKTsKICAgICAgICAgICAgICAgICAgICBlKCIucHJvZ3Jlc3MtYmFyLXN0YXIiKS5hZGRDbGFzcygiYW5pbWF0ZWQgdGFkYSIpLm9uZSgid2Via2l0QW5pbWF0aW9uRW5kIG1vekFuaW1hdGlvbkVuZCBNU0FuaW1hdGlvbkVuZCBvYW5pbWF0aW9uZW5kIGFuaW1hdGlvbmVuZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiLnByb2dyZXNzLWJhci1zdGFyIikucmVtb3ZlQ2xhc3MoImFuaW1hdGVkIHRhZGEiKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBlKCIuYWdhcmlvLWV4cC1iYXIgLnByb2dyZXNzLWJhci10ZXh0IikudGV4dChkLnhwTmVlZGVkICsgIi8iICsgZC54cE5lZWRlZCArICIgWFAiKTsKICAgICAgICAgICAgICAgICAgICAgICAgZ2EoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgeHA6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4cE5lZWRlZDogZC54cE5lZWRlZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsOiBkLmxldmVsCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhKGQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSwgMUUzKQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IERhdGUubm93KCksCiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSAoRGF0ZS5ub3coKSAtIGYpIC8gMUUzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IDAgPiBhID8gMCA6IDEgPCBhID8gMSA6IGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gYSAqIGEgKiAoMyAtIDIgKiBhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUoIi5hZ2FyaW8tZXhwLWJhciAucHJvZ3Jlc3MtYmFyLXRleHQiKS50ZXh0KH5+KGcgKyAoZC54cCAtIGcpICogYSkgKyAiLyIgKyBkLnhwTmVlZGVkICsgIiBYUCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSgiLmFnYXJpby1leHAtYmFyIC5wcm9ncmVzcy1iYXIiKS5jc3MoIndpZHRoIiwgKDg4ICogKGcgKyAoZC54cCAtIGcpICogYSkgLyBkLnhwTmVlZGVkKS50b0ZpeGVkKDIpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYiAmJiBiKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxID4gYSAmJiBjLnJlcXVlc3RBbmltYXRpb25GcmFtZShrKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGspCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gQ2IoKSB7CiAgICAgICAgdmFyIGE7CiAgICAgICAgKCJ1bmRlZmluZWQiICE9PSB0eXBlb2YgYSAmJiBhIHx8ICJub25lIiA9PSBlKCIjc2V0dGluZ3MiKS5jc3MoImRpc3BsYXkiKSAmJiAibm9uZSIgPT0gZSgiI3NvY2lhbExvZ2luQ29udGFpbmVyIikuY3NzKCJkaXNwbGF5IikpICYmIGUoIiNpbnN0cnVjdGlvbnMiKS5zaG93KCkKICAgIH0KCiAgICBmdW5jdGlvbiBoYyhhKSB7CiAgICAgICAgaWYgKCJjb25uZWN0ZWQiID09IGEuc3RhdHVzKSB7CiAgICAgICAgICAgIHZhciBiID0gYS5hdXRoUmVzcG9uc2UuYWNjZXNzVG9rZW47CiAgICAgICAgICAgIG51bGwgPT0gYiB8fCAidW5kZWZpbmVkIiA9PSBiIHx8ICIiID09IGIgPyAoMyA+IGljICYmIChpYysrLCBjLmZhY2Vib29rUmVsb2dpbigpKSwgYy5sb2dvdXQoKSkgOiAoYy5NQy5kb0xvZ2luV2l0aEZCKGIpLCBtLmNhY2hlLmxvZ2luX2luZm8gPSBbYiwgImZhY2Vib29rIl0sIGMuRkIuYXBpKCIvbWUvcGljdHVyZT93aWR0aD0xODAmaGVpZ2h0PTE4MCIsIGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICBoLnVzZXJJbmZvLnBpY3R1cmUgPSBiLmRhdGEudXJsOwogICAgICAgICAgICAgICAgYy51cGRhdGVTdG9yYWdlKCk7CiAgICAgICAgICAgICAgICBlKCIuYWdhcmlvLXByb2ZpbGUtcGljdHVyZSIpLmF0dHIoInNyYyIsIGIuZGF0YS51cmwpOwogICAgICAgICAgICAgICAgaC51c2VySW5mby5zb2NpYWxJZCA9IGEuYXV0aFJlc3BvbnNlLnVzZXJJRDsKICAgICAgICAgICAgICAgIFlhKCkKICAgICAgICAgICAgfSksIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtbG9nZ2VkLWluIiwgIjEiKSwgaC5jb250ZXh0ID0gImZhY2Vib29rIiwgaC5sb2dpbkludGVudCA9ICIxIiwgYy51cGRhdGVTdG9yYWdlKCkpCiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGpjKGEpIHsKICAgICAgICBrYSgiOnBhcnR5Iik7CiAgICAgICAgZSgiI2hlbGxvQ29udGFpbmVyIikuYXR0cigiZGF0YS1wYXJ0eS1zdGF0ZSIsICI0Iik7CiAgICAgICAgYSA9IGRlY29kZVVSSUNvbXBvbmVudChhKS5yZXBsYWNlKC8uKiMvZ2ltLCAiIik7CiAgICAgICAgRGIoIiMiICsgYy5lbmNvZGVVUklDb21wb25lbnQoYSkpOwogICAgICAgIGUuYWpheChDYSArICJnZXRUb2tlbiIsIHsKICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtcGFydHktc3RhdGUiLCAiNiIpCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChiKSB7CiAgICAgICAgICAgICAgICBiID0gYi5zcGxpdCgiXG4iKTsKICAgICAgICAgICAgICAgIGUoIi5wYXJ0eVRva2VuIikudmFsKCJhZ2FyLmlvLyMiICsgYy5lbmNvZGVVUklDb21wb25lbnQoYSkpOwogICAgICAgICAgICAgICAgZSgiI2hlbGxvQ29udGFpbmVyIikuYXR0cigiZGF0YS1wYXJ0eS1zdGF0ZSIsICI1Iik7CiAgICAgICAgICAgICAgICBrYSgiOnBhcnR5Iik7CiAgICAgICAgICAgICAgICBsYigid3M6Ly8iICsgYlswXSwgYSkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGF0YVR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgIGNhY2hlOiAhMSwKICAgICAgICAgICAgY3Jvc3NEb21haW46ICEwLAogICAgICAgICAgICBkYXRhOiBhCiAgICAgICAgfSkKICAgIH0KCiAgICBmdW5jdGlvbiBEYihhKSB7CiAgICAgICAgYy5oaXN0b3J5ICYmIGMuaGlzdG9yeS5yZXBsYWNlU3RhdGUgJiYgYy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgYy5kb2N1bWVudC50aXRsZSwgYSkKICAgIH0KCiAgICBmdW5jdGlvbiBKYSgpIHsKICAgICAgICBjbGVhclRpbWVvdXQoVWIpOwogICAgICAgIG51bGwgPT0gYy5zdG9yYWdlSW5mbyAmJiBjLmNyZWF0ZURlZmF1bHRTdG9yYWdlKCk7CiAgICAgICAgRWIgPSBEYXRlLm5vdygpOwogICAgICAgIDAgPj0gUmEgJiYgKFJhID0gRWIpOwogICAgICAgIEVhID0gITE7CiAgICAgICAgUWMoKQogICAgfQoKICAgIGZ1bmN0aW9uIEdjKGEsIGIpIHsKICAgICAgICB2YXIgZCA9IC0xICE9IEUuaW5kZXhPZihhLmlkKSwKICAgICAgICAgICAgYyA9IC0xICE9IEUuaW5kZXhPZihiLmlkKSwKICAgICAgICAgICAgZSA9IDMwID4gYi5zaXplOwogICAgICAgIGQgJiYgZSAmJiArK3ViOwogICAgICAgIGUgfHwgIWQgfHwgYyB8fCBiLmVhICYgMzIgfHwgKyt3YgogICAgfQoKICAgIGZ1bmN0aW9uIGtjKGEpIHsKICAgICAgICBhID0gfn5hOwogICAgICAgIHZhciBiID0gKGEgJSA2MCkudG9TdHJpbmcoKTsKICAgICAgICBhID0gKH5+KGEgLyA2MCkpLnRvU3RyaW5nKCk7CiAgICAgICAgMiA+IGIubGVuZ3RoICYmIChiID0gIjAiICsgYik7CiAgICAgICAgcmV0dXJuIGEgKyAiOiIgKyBiCiAgICB9CgogICAgZnVuY3Rpb24gUmMoKSB7CiAgICAgICAgaWYgKG51bGwgPT0gQykgcmV0dXJuIDA7CiAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCBDLmxlbmd0aDsgKythKQogICAgICAgICAgICBpZiAoLTEgIT0gRS5pbmRleE9mKENbYV0uaWQpKSByZXR1cm4gYSArIDE7CiAgICAgICAgcmV0dXJuIDAKICAgIH0KCiAgICBmdW5jdGlvbiBTYygpIHsKICAgICAgICBlKCIuc3RhdHMtZm9vZC1lYXRlbiIpLnRleHQodWIpOwogICAgICAgIGUoIi5zdGF0cy10aW1lLWFsaXZlIikudGV4dChrYygoRWIgLSBSYSkgLyAxRTMpKTsKICAgICAgICBlKCIuc3RhdHMtbGVhZGVyYm9hcmQtdGltZSIpLnRleHQoa2MoeGIpKTsKICAgICAgICBlKCIuc3RhdHMtaGlnaGVzdC1tYXNzIikudGV4dCh+fihUIC8gMTAwKSk7CiAgICAgICAgZSgiLnN0YXRzLWNlbGxzLWVhdGVuIikudGV4dCh3Yik7CiAgICAgICAgZSgiLnN0YXRzLXRvcC1wb3NpdGlvbiIpLnRleHQoMCA9PSBXID8gIjooIiA6CiAgICAgICAgICAgIFcpOwogICAgICAgIHZhciBhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0YXRzR3JhcGgiKTsKICAgICAgICBpZiAoYSkgewogICAgICAgICAgICB2YXIgYiA9IGEuZ2V0Q29udGV4dCgiMmQiKSwKICAgICAgICAgICAgICAgIGQgPSBhLndpZHRoLAogICAgICAgICAgICAgICAgYSA9IGEuaGVpZ2h0OwogICAgICAgICAgICBiLmNsZWFyUmVjdCgwLCAwLCBkLCBhKTsKICAgICAgICAgICAgaWYgKDIgPCBGLmxlbmd0aCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDIwMCwgZyA9IDA7IGcgPCBGLmxlbmd0aDsgZysrKSBjID0gTWF0aC5tYXgoRltnXSwgYyk7CiAgICAgICAgICAgICAgICBiLmxpbmVXaWR0aCA9IDM7CiAgICAgICAgICAgICAgICBiLmxpbmVDYXAgPSAicm91bmQiOwogICAgICAgICAgICAgICAgYi5saW5lSm9pbiA9ICJyb3VuZCI7CiAgICAgICAgICAgICAgICBiLnN0cm9rZVN0eWxlID0gdmI7CiAgICAgICAgICAgICAgICBiLmZpbGxTdHlsZSA9IHZiOwogICAgICAgICAgICAgICAgYi5iZWdpblBhdGgoKTsKICAgICAgICAgICAgICAgIGIubW92ZVRvKDAsIGEgLSBGWzBdIC8gYyAqIChhIC0gMTApICsgMTApOwogICAgICAgICAgICAgICAgZm9yIChnID0gMTsgZyA8IEYubGVuZ3RoOyBnICs9IE1hdGgubWF4KH5+KEYubGVuZ3RoIC8gZCksIDEpKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcCA9IGcgLyAoRi5sZW5ndGggLSAxKSAqIGQsIGYgPSBbXSwgayA9IC0yMDsgMjAgPj0gazsgKytrKSAwID4gZyArIGsgfHwgZyArIGsgPj0gRi5sZW5ndGggfHwgZi5wdXNoKEZbZyArIGtdKTsKICAgICAgICAgICAgICAgICAgICBmID0gZi5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgKyBiCiAgICAgICAgICAgICAgICAgICAgfSkgLyBmLmxlbmd0aCAvIGM7CiAgICAgICAgICAgICAgICAgICAgYi5saW5lVG8ocCwKICAgICAgICAgICAgICAgICAgICAgICAgYSAtIGYgKiAoYSAtIDEwKSArIDEwKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYi5zdHJva2UoKTsKICAgICAgICAgICAgICAgIGIuZ2xvYmFsQWxwaGEgPSAuNTsKICAgICAgICAgICAgICAgIGIubGluZVRvKGQsIGEpOwogICAgICAgICAgICAgICAgYi5saW5lVG8oMCwgYSk7CiAgICAgICAgICAgICAgICBiLmZpbGwoKTsKICAgICAgICAgICAgICAgIGIuZ2xvYmFsQWxwaGEgPSAxCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gUWMoKSB7CiAgICAgICAgamEgfHwgYWEgfHwgKFphID8gKGMucmVmcmVzaEFkKGMuYWRTbG90cy5hYiksIFNjKCksIGFhID0gITAsIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBlKCIjb3ZlcmxheXMiKS5mYWRlSW4oNTAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBnYSgpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBlKCIjc3RhdHMiKS5zaG93KCk7CiAgICAgICAgICAgIHZhciBhID0gbGMoImdfcGx1c19zaGFyZV9zdGF0cyIpOwogICAgICAgICAgICBjLmZpbGxTb2NpYWxWYWx1ZXMoYSwgImdQbHVzU2hhcmUiKQogICAgICAgIH0sIDE1MDApKSA6IHlhKDUwMCkpCiAgICB9CgogICAgZnVuY3Rpb24gbGMoYSkgewogICAgICAgIHZhciBiID0gZSgiLnN0YXRzLXRpbWUtYWxpdmUiKS50ZXh0KCk7CiAgICAgICAgcmV0dXJuIGMucGFyc2VTdHJpbmcoYSwgIiVAIiwgW2Iuc3BsaXQoIjoiKVswXSwgYi5zcGxpdCgiOiIpWzFdLCBlKCIuc3RhdHMtaGlnaGVzdC1tYXNzIikudGV4dCgpXSkKICAgIH0KCiAgICBmdW5jdGlvbiBUYygpIHsKICAgICAgICBjLm9wZW4oImh0dHBzOi8vcGx1cy5nb29nbGUuY29tL3NoYXJlP3VybD13d3cuYWdhci5pbyZobD1lbi1VUyIsICJBZ2FyLmlvIiwgIndpZHRoPTQ4NCxoZWlnaHQ9NTgwLG1lbnViYXI9bm8sdG9vbGJhcj1ubyxyZXNpemFibGU9eWVzLHNjcm9sbGJhcnM9bm8sbGVmdD0iICsgKGMuc2NyZWVuWCArIGMuaW5uZXJXaWR0aCAvIDIgLSAyNDIpICsgIix0b3A9IiArIChjLmlubmVySGVpZ2h0IC0gNTgwKSAvIDIpCiAgICB9CiAgICB2YXIgbWMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgIGlmICgidW5kZWZpbmVkIiA9PSB0eXBlb2YgY29uc29sZSB8fCAidW5kZWZpbmVkIiA9PSB0eXBlb2YgRGF0YVZpZXcgfHwgInVuZGVmaW5lZCIgPT0gdHlwZW9mIFdlYlNvY2tldCB8fCBudWxsID09IG1jIHx8IG51bGwgPT0gbWMuZ2V0Q29udGV4dCB8fCBudWxsID09IGMubG9jYWxTdG9yYWdlKSBhbGVydCgiWW91IGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIGdhbWUsIHdlIHJlY29tbWVuZCB5b3UgdG8gdXNlIEZpcmVmb3ggdG8gcGxheSB0aGlzIik7CiAgICBlbHNlIHsKICAgICAgICB2YXIgRCA9IHt9OwogICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBhID0gYy5sb2NhdGlvbi5zZWFyY2g7CiAgICAgICAgICAgICI/IiA9PSBhLmNoYXJBdCgwKSAmJiAoYSA9CiAgICAgICAgICAgICAgICBhLnNsaWNlKDEpKTsKICAgICAgICAgICAgZm9yICh2YXIgYSA9IGEuc3BsaXQoIiYiKSwgYiA9IDA7IGIgPCBhLmxlbmd0aDsgYisrKSB7CiAgICAgICAgICAgICAgICB2YXIgZCA9IGFbYl0uc3BsaXQoIj0iKTsKICAgICAgICAgICAgICAgIERbZFswXV0gPSBkWzFdCiAgICAgICAgICAgIH0KICAgICAgICB9KSgpOwogICAgICAgIGMucXVlcnlTdHJpbmcgPSBEOwogICAgICAgIHZhciBuYyA9ICJmYiIgaW4gRCwKICAgICAgICAgICAgVWMgPSAibWluaWNsaXAiIGluIEQsCiAgICAgICAgICAgIHYgPSB7CiAgICAgICAgICAgICAgICBza2luc0VuYWJsZWQ6ICIwIiwKICAgICAgICAgICAgICAgIG5hbWVzRW5hYmxlZDogIjAiLAogICAgICAgICAgICAgICAgbm9Db2xvcnM6ICIwIiwKICAgICAgICAgICAgICAgIGJsYWNrVGhlbWU6ICIwIiwKICAgICAgICAgICAgICAgIHNob3dNYXNzOiAiMCIsCiAgICAgICAgICAgICAgICBzdGF0c0VuYWJsZWQ6ICIwIgogICAgICAgICAgICB9LAogICAgICAgICAgICBWYyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHVhKCIiLCAtMSkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb2MgPSAiaHR0cDoiICE9IGMubG9jYXRpb24ucHJvdG9jb2wsCiAgICAgICAgICAgIFdjID0gIjEiID09IHRjKCksCiAgICAgICAgICAgIHBjID0gITE7CiAgICAgICAgbmMgfHwgVWMgfHwgKG9jICYmICFXYyA/ICh1YSgiMSIsIDEpLCBjLmxvY2F0aW9uLmhyZWYgPSAiaHR0cDoiICsgYy5sb2NhdGlvbi5ocmVmLnN1YnN0cmluZyhjLmxvY2F0aW9uLnByb3RvY29sLmxlbmd0aCksIHBjID0gITApIDogdWEoIiIsIC0xKSk7CiAgICAgICAgb2MgfHwgdWEoIiIsIC0xKTsKICAgICAgICBwYyB8fCBzZXRUaW1lb3V0KFZjLCAzRTMpOwogICAgICAgIGlmICghYy5hZ2FyaW9Ob0luaXQpIHsKICAgICAgICAgICAgdmFyIGpiID0gYy5sb2NhdGlvbi5wcm90b2NvbCwKICAgICAgICAgICAgICAgIG1iID0gImh0dHBzOiIgPT0gamI7CiAgICAgICAgICAgIEQubWFzdGVyICYmIChFbnZDb25maWcubWFzdGVyX3VybCA9IEQubWFzdGVyKTsKICAgICAgICAgICAgdmFyIENhID0gamIgKyAiLy8iICsgRW52Q29uZmlnLm1hc3Rlcl91cmwgKyAiLyIsCiAgICAgICAgICAgICAgICAkYSA9IGMubmF2aWdhdG9yLnVzZXJBZ2VudDsKICAgICAgICAgICAgaWYgKC0xICE9ICRhLmluZGV4T2YoIkFuZHJvaWQiKSkgYy5nYSAmJiBjLmdhKCJzZW5kIiwgImV2ZW50IiwgIk1vYmlsZVJlZGlyZWN0IiwgIlBsYXlTdG9yZSIpLCBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGMubG9jYXRpb24uaHJlZiA9ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9Y29tLm1pbmljbGlwLmFnYXIuaW8iCiAgICAgICAgICAgIH0sIDFFMyk7CiAgICAgICAgICAgIGVsc2UgaWYgKC0xICE9ICRhLmluZGV4T2YoImlQaG9uZSIpIHx8IC0xICE9ICRhLmluZGV4T2YoImlQYWQiKSB8fCAtMSAhPSAkYS5pbmRleE9mKCJpUG9kIikpIGMuZ2EgJiYgYy5nYSgic2VuZCIsICJldmVudCIsICJNb2JpbGVSZWRpcmVjdCIsICJBcHBTdG9yZSIpLCBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGMubG9jYXRpb24uaHJlZiA9ICJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vYXBwL2FnYXIuaW8vaWQ5OTU5OTk3MDM/bXQ9OCZhdD0xbDN2YWpwIgogICAgICAgICAgICB9LCAxRTMpOwogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBtID0ge307CiAgICAgICAgICAgICAgICBjLmFnYXJBcHAgPSBtOwogICAgICAgICAgICAgICAgdmFyIHliLCBmLCBPLCByLCB0LCBpYSA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgdyA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgeSA9IDAsCiAgICAgICAgICAgICAgICAgICAgeiA9IDAsCiAgICAgICAgICAgICAgICAgICAgRSA9IFtdLAogICAgICAgICAgICAgICAgICAgIHEgPSBbXSwKICAgICAgICAgICAgICAgICAgICBLID0ge30sCiAgICAgICAgICAgICAgICAgICAgQSA9IFtdLAogICAgICAgICAgICAgICAgICAgIGJhID0gW10sCiAgICAgICAgICAgICAgICAgICAgQyA9IFtdLAogICAgICAgICAgICAgICAgICAgIFkgPSAwLAogICAgICAgICAgICAgICAgICAgIFogPSAwLAogICAgICAgICAgICAgICAgICAgIHphID0gLTEsCiAgICAgICAgICAgICAgICAgICAgQWEgPSAtMSwKICAgICAgICAgICAgICAgICAgICBKYyA9IDAsCiAgICAgICAgICAgICAgICAgICAgeCA9IDAsCiAgICAgICAgICAgICAgICAgICAgYmMgPSAwLAogICAgICAgICAgICAgICAgICAgIE4gPSBudWxsLAogICAgICAgICAgICAgICAgICAgIE1hID0gMCwKICAgICAgICAgICAgICAgICAgICBOYSA9IDAsCiAgICAgICAgICAgICAgICAgICAgT2EgPSAxRTQsCiAgICAgICAgICAgICAgICAgICAgUGEgPSAxRTQsCiAgICAgICAgICAgICAgICAgICAgbCA9IDEsCiAgICAgICAgICAgICAgICAgICAgRyA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgYWIgPSAhMCwKICAgICAgICAgICAgICAgICAgICBmYSA9ICEwLAogICAgICAgICAgICAgICAgICAgIHRhID0gITEsCiAgICAgICAgICAgICAgICAgICAgc2IgPSAhMSwKICAgICAgICAgICAgICAgICAgICBUID0gMCwKICAgICAgICAgICAgICAgICAgICBlYSA9ICExLAogICAgICAgICAgICAgICAgICAgIGJiID0gITEsCiAgICAgICAgICAgICAgICAgICAgcGEgPSB5ID0gfn4oKE1hICsgT2EpIC8gMiksCiAgICAgICAgICAgICAgICAgICAgcWEgPSB6ID0gfn4oKE5hICsgUGEpIC8gMiksCiAgICAgICAgICAgICAgICAgICAgcmEgPSAxLAogICAgICAgICAgICAgICAgICAgIGxhID0gIiIsCiAgICAgICAgICAgICAgICAgICAgSSA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgZ2IgPSAhMSwKICAgICAgICAgICAgICAgICAgICBwYiA9ICExLAogICAgICAgICAgICAgICAgICAgIG5iID0gMCwKICAgICAgICAgICAgICAgICAgICBvYiA9IDAsCiAgICAgICAgICAgICAgICAgICAgS2EgPSAwLAogICAgICAgICAgICAgICAgICAgIExhID0gMCwKICAgICAgICAgICAgICAgICAgICBNYyA9IFsiIzMzMzMzMyIsICIjRkYzMzMzIiwgIiMzM0ZGMzMiLCAiIzMzMzNGRiJdLAogICAgICAgICAgICAgICAgICAgIHpiID0gITEsCiAgICAgICAgICAgICAgICAgICAgbmEgPSAhMSwKICAgICAgICAgICAgICAgICAgICBGYSA9IDAsCiAgICAgICAgICAgICAgICAgICAgUCA9IDEsCiAgICAgICAgICAgICAgICAgICAgQiA9IDEsCiAgICAgICAgICAgICAgICAgICAgamEgPSAhMSwKICAgICAgICAgICAgICAgICAgICBrYiA9IDAsCiAgICAgICAgICAgICAgICAgICAgY2MgPSAhMCwKICAgICAgICAgICAgICAgICAgICByYiA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgcWIgPSAhMSwKICAgICAgICAgICAgICAgICAgICBKID0gbmV3IEltYWdlOwogICAgICAgICAgICAgICAgSi5zcmMgPSAiL2ltZy9iYWNrZ3JvdW5kLnBuZyI7CiAgICAgICAgICAgICAgICB2YXIgZGMgPSAib250b3VjaHN0YXJ0IiBpbiBjICYmIC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChjLm5hdmlnYXRvci51c2VyQWdlbnQpLAogICAgICAgICAgICAgICAgICAgIEFiID0gbmV3IEltYWdlOwogICAgICAgICAgICAgICAgQWIuc3JjID0gIi9pbWcvc3BsaXQucG5nIjsKICAgICAgICAgICAgICAgIHZhciB2YSA9ICExLAogICAgICAgICAgICAgICAgICAgIHdhID0gITEsCiAgICAgICAgICAgICAgICAgICAgeGEgPSAhMSwKICAgICAgICAgICAgICAgICAgICBjYiA9ICExLAogICAgICAgICAgICAgICAgICAgIEZiLCBHYjsKICAgICAgICAgICAgICAgICJnYW1lcGFkIiBpbiBEICYmIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjYiAmJiAoWSA9IGRiLmhhKFksIEZiKSwgWiA9IGRiLmhhKFosIEdiKSkKICAgICAgICAgICAgICAgIH0sIDI1KTsKICAgICAgICAgICAgICAgIGMuZ2FtZXBhZEF4aXNVcGRhdGUgPSBmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgICAgICAgIHZhciBkID0gLjEgPiBiICogYjsKICAgICAgICAgICAgICAgICAgICAwID09IGEgJiYgKGQgPyBGYiA9IHIgLyAyIDogKEZiID0gKGIgKyAxKSAvIDIgKiByLCBjYiA9ICEwKSk7CiAgICAgICAgICAgICAgICAgICAgMSA9PSBhICYmIChkID8gR2IgPSB0IC8gMiA6IChHYiA9IChiICsgMSkgLyAyICogdCwgY2IgPSAhMCkpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgYy5hZ2FyaW9Jbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGdiID0gITA7CiAgICAgICAgICAgICAgICAgICAgeGMoKTsKICAgICAgICAgICAgICAgICAgICB3YygpOwogICAgICAgICAgICAgICAgICAgIG0uY29yZS5pbml0KCk7CiAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSBjLmxvY2FsU3RvcmFnZS5zZXR0aW5ncyAmJiAodiA9IEpTT04ucGFyc2UoYy5sb2NhbFN0b3JhZ2Uuc2V0dGluZ3MpLAogICAgICAgICAgICAgICAgICAgICAgICBiYiA9IHYuc2hvd01hc3MsIGVhID0gdi5ibGFja1RoZW1lLCBmYSA9IHYubmFtZXNFbmFibGVkLCB0YSA9IHYubm9Db2xvcnMsIFphID0gdi5zdGF0c0VuYWJsZWQsIGFiID0gdi5za2luc0VuYWJsZWQpOwogICAgICAgICAgICAgICAgICAgIGUoIiNzaG93TWFzcyIpLnByb3AoImNoZWNrZWQiLCB2LnNob3dNYXNzKTsKICAgICAgICAgICAgICAgICAgICBlKCIjbm9Ta2lucyIpLnByb3AoImNoZWNrZWQiLCAhdi5za2luc0VuYWJsZWQpOwogICAgICAgICAgICAgICAgICAgIGUoIiNza2lwU3RhdHMiKS5wcm9wKCJjaGVja2VkIiwgIXYuc3RhdHNFbmFibGVkKTsKICAgICAgICAgICAgICAgICAgICBlKCIjbm9Db2xvcnMiKS5wcm9wKCJjaGVja2VkIiwgdi5ub0NvbG9ycyk7CiAgICAgICAgICAgICAgICAgICAgZSgiI25vTmFtZXMiKS5wcm9wKCJjaGVja2VkIiwgIXYubmFtZXNFbmFibGVkKTsKICAgICAgICAgICAgICAgICAgICBlKCIjZGFya1RoZW1lIikucHJvcCgiY2hlY2tlZCIsIHYuYmxhY2tUaGVtZSk7CiAgICAgICAgICAgICAgICAgICAgTGIoKTsKICAgICAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChMYiwgMThFNCk7CiAgICAgICAgICAgICAgICAgICAgTyA9IHliID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNhbnZhcyIpOwogICAgICAgICAgICAgICAgICAgIG51bGwgIT0gTyAmJiAoZiA9IE8uZ2V0Q29udGV4dCgiMmQiKSwgTy5vbm1vdXNlZG93biA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBhLmNsaWVudFggLSAoNSArIHIgLyA1IC8gMiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGEuY2xpZW50WSAtICg1ICsgciAvIDUgLyAyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLnNxcnQoYiAqIGIgKyBkICogZCkgPD0gciAvIDUgLyAyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBZID0gMSAqIGEuY2xpZW50WDsKICAgICAgICAgICAgICAgICAgICAgICAgWiA9IDEgKiBhLmNsaWVudFk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZiKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIFNhKCkKICAgICAgICAgICAgICAgICAgICB9LCBPLm9ubW91c2Vtb3ZlID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY2IgPSAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgWSA9IDEgKiBhLmNsaWVudFg7CiAgICAgICAgICAgICAgICAgICAgICAgIFogPSAxICogYS5jbGllbnRZOwogICAgICAgICAgICAgICAgICAgICAgICBmYigpCiAgICAgICAgICAgICAgICAgICAgfSwgTy5vbm1vdXNldXAgPSBmdW5jdGlvbiAoKSB7IH0sIC9maXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSA/IGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIkRPTU1vdXNlU2Nyb2xsIiwgS2IsICExKSA6IGRvY3VtZW50LmJvZHkub25tb3VzZXdoZWVsID0gS2IsIGMub25ibHVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBYKDE5KTsKICAgICAgICAgICAgICAgICAgICAgICAgeGEgPSB3YSA9IHZhID0gITEKICAgICAgICAgICAgICAgICAgICB9LCBjLm9ucmVzaXplID0gWGIsIGMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHFjKSwgc2V0SW50ZXJ2YWwoU2EsIDQwKSwgRyAmJiBlKCIjcmVnaW9uIikudmFsKEcpLCBOYigpLCBEYShlKCIjcmVnaW9uIikudmFsKCkpLCAwID09IGtiICYmIEcgJiYgUSgpLCB5YSgwKSwgWGIoKSwgYy5sb2NhdGlvbi5oYXNoICYmIDYgPD0gYy5sb2NhdGlvbi5oYXNoLmxlbmd0aCAmJiBqYyhjLmxvY2F0aW9uLmhhc2gpKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHZhciBCYSA9IG51bGw7CiAgICAgICAgICAgICAgICBjLnNldE5pY2sgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgIGMuZ2EgJiYgYy5nYSgic2VuZCIsICJldmVudCIsICJOaWNrIiwgYS50b0xvd2VyQ2FzZSgpKTsKICAgICAgICAgICAgICAgICAgICBNYigpOwogICAgICAgICAgICAgICAgICAgIE4gPSBhOwogICAgICAgICAgICAgICAgICAgIFNiKCk7CiAgICAgICAgICAgICAgICAgICAgVCA9IDA7CiAgICAgICAgICAgICAgICAgICAgdi5za2luc0VuYWJsZWQgPSBhYjsKICAgICAgICAgICAgICAgICAgICB2Lm5hbWVzRW5hYmxlZCA9IGZhOwogICAgICAgICAgICAgICAgICAgIHYubm9Db2xvcnMgPSB0YTsKICAgICAgICAgICAgICAgICAgICB2LmJsYWNrVGhlbWUgPSBlYTsKICAgICAgICAgICAgICAgICAgICB2LnNob3dNYXNzID0gYmI7CiAgICAgICAgICAgICAgICAgICAgdi5zdGF0c0VuYWJsZWQgPSBaYTsKICAgICAgICAgICAgICAgICAgICBjLmxvY2FsU3RvcmFnZS5zZXR0aW5ncyA9IEpTT04uc3RyaW5naWZ5KHYpOwogICAgICAgICAgICAgICAgICAgIEliKCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjLnNldFNraW5zID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICBhYiA9IGEKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjLnNldE5hbWVzID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICBmYSA9IGEKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjLnNldERhcmtUaGVtZSA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgZWEgPSBhCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgYy5zZXRDb2xvcnMgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgIHRhID0gYQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGMuc2V0U2hvd01hc3MgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgIGJiID0gYQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGMuc3BlY3RhdGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgTiA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgSWIoKTsKICAgICAgICAgICAgICAgICAgICBYKDEpOwogICAgICAgICAgICAgICAgICAgIE1iKCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjLnNldFJlZ2lvbiA9IERhOwogICAgICAgICAgICAgICAgdmFyIGhiID0gITA7CiAgICAgICAgICAgICAgICBjLnNldEdhbWVNb2RlID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICBhICE9IGxhICYmICgiOnBhcnR5IiA9PSBsYSAmJiBlKCIjaGVsbG9Db250YWluZXIiKS5hdHRyKCJkYXRhLXBhcnR5LXN0YXRlIiwgIjAiKSwga2EoYSksICI6cGFydHkiICE9IGEgJiYgUSgpKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGMuc2V0QWNpZCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgemIgPSBhCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIFhjID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IHt9LAogICAgICAgICAgICAgICAgICAgICAgICBkID0gITEsCiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwRHJhdzogITAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWN0aW9uTW9kaWZpZXI6IDEuMQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGEuaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbS5hY2NvdW50LmluaXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgbS5nb29nbGUudmEoKTsKICAgICAgICAgICAgICAgICAgICAgICAgbS5mYS5pbml0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIChkID0gImRlYnVnIiBpbiBjLnF1ZXJ5U3RyaW5nKSAmJiBtLmRlYnVnLnNob3dEZWJ1ZygpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBhLmJpbmQgPSBmdW5jdGlvbiAoYSwgZCkgewogICAgICAgICAgICAgICAgICAgICAgICBlKGIpLmJpbmQoYSwgZCkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGEudW5iaW5kID0gZnVuY3Rpb24gKGEsIGQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZShiKS51bmJpbmQoYSwgZCkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGEudHJpZ2dlciA9IGZ1bmN0aW9uIChhLCBkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoYikudHJpZ2dlcihhLCBkKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgYS5fX2RlZmluZUdldHRlcl9fKCJkZWJ1ZyIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBhLl9fZGVmaW5lU2V0dGVyX18oImRlYnVnIiwgZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQgPSBhCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgYS5fX2RlZmluZUdldHRlcl9fKCJwcm94eSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuTUMKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBhLl9fZGVmaW5lR2V0dGVyX18oImNvbmZpZyIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHUKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgfSh7fSk7CiAgICAgICAgICAgICAgICBtLmNvcmUgPSBYYzsKICAgICAgICAgICAgICAgIG0uY2FjaGUgPSB7fTsKICAgICAgICAgICAgICAgIHZhciBZYyA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYihhLCBiLCBkLCBjKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBhICsgIkNhbnZhcyI7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnID0gZSgiPGNhbnZhcz4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogYQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmQoZyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBuZXcgU21vb3RoaWVDaGFydChkKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8IGIubGVuZ3RoOyBnKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gYltnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gXy5leHRlbmQoaCwgY1tnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLmFkZFRpbWVTZXJpZXModSwgZikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBkLnN0cmVhbVRvKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEpLCAwKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZChhLCBkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGtbYV0gPSBjKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGIoYSwgW2tbYV1dLCBkLCBbewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6ICJyZ2JhKDAsIDI1NSwgMCwgMSkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiAicmdiYSgwLCAyNTUsIDAsIDAuMikiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAyCiAgICAgICAgICAgICAgICAgICAgICAgIH1dKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYygpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUaW1lU2VyaWVzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEthOiAhMQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgZyA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICBwLCBmID0gITEsCiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgaCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiAicmdiYSgwLCAyNTUsIDAsIDEpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogInJnYmEoMCwgMjU1LCAwLCAwLjIpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMgogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGEuc2hvd0RlYnVnID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBnIHx8IChwID0gZSgiI2RlYnVnLW92ZXJsYXkiKSwgZCgibmV0d29ya1VwZGF0ZSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJuZXR3b3JrIHVwZGF0ZXMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluVmFsdWU6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhWYWx1ZTogMTIwCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBkKCJmcHMiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiZnBzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblZhbHVlOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4VmFsdWU6IDEyMAogICAgICAgICAgICAgICAgICAgICAgICB9KSwgay5ydHRTRGV2ID0gYygpLCBrLnJ0dE1lYW4gPSBjKCksIGIoInJ0dE1lYW4iLCBbay5ydHRTRGV2LCBrLnJ0dE1lYW5dLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAicnR0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblZhbHVlOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4VmFsdWU6IDEyMAogICAgICAgICAgICAgICAgICAgICAgICB9LCBbewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6ICJyZ2JhKDI1NSwgMCwgMCwgMSkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiAicmdiYSgwLCAyNTUsIDAsIDAuMikiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAyCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiAicmdiYSgwLCAyNTUsIDAsIDEpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogInJnYmEoMCwgMjU1LCAwLCAwKSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDIKICAgICAgICAgICAgICAgICAgICAgICAgfV0pLCBnID0gITApOwogICAgICAgICAgICAgICAgICAgICAgICBtLmNvcmUuZGVidWcgPSAhMDsKICAgICAgICAgICAgICAgICAgICAgICAgcC5zaG93KCkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGEuaGlkZURlYnVnID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBwLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgbS5jb3JlLmRlYnVnID0gITEKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGEudXBkYXRlQ2hhcnQgPSBmdW5jdGlvbiAoYSwgYiwgZCkgewogICAgICAgICAgICAgICAgICAgICAgICBnICYmIGEgaW4gayAmJiBrW2FdLmFwcGVuZChiLCBkKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgYS5fX2RlZmluZUdldHRlcl9fKCJzaG93UHJlZGljdGlvbiIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBhLl9fZGVmaW5lU2V0dGVyX18oInNob3dQcmVkaWN0aW9uIiwgZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYgPSBhCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEKICAgICAgICAgICAgICAgIH0oe30pOwogICAgICAgICAgICAgICAgbS5kZWJ1ZyA9IFljOwogICAgICAgICAgICAgICAgdmFyIG1hID0gewogICAgICAgICAgICAgICAgICAgIEFGOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIEFYOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBBTDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgRFo6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEFTOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBBRDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgQU86ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEFJOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgQUc6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBBUjogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgQU06ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgQVc6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBBVTogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgQVQ6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEFaOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIEJTOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgQkg6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgQkQ6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgQkI6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBCWTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgQkU6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEJaOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgQko6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEJNOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgQlQ6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgQk86ICJCUi1CcmF6aWwiLAogICAgICAgICAgICAgICAgICAgIEJROiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgQkE6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEJXOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBCUjogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgSU86ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgVkc6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBCTjogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBCRzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgQkY6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEJJOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBLSDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBDTTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgQ0E6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBDVjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgS1k6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBDRjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgVEQ6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIENMOiAiQlItQnJhemlsIiwKICAgICAgICAgICAgICAgICAgICBDTjogIkNOLUNoaW5hIiwKICAgICAgICAgICAgICAgICAgICBDWDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBDQzogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBDTzogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgS006ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIENEOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBDRzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgQ0s6ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgIENSOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgQ0k6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEhSOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBDVTogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIENXOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgQ1k6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgQ1o6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIERLOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBESjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgRE06ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBETzogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIEVDOiAiQlItQnJhemlsIiwKICAgICAgICAgICAgICAgICAgICBFRzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgU1Y6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBHUTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgRVI6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEVFOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBFVDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgRk86ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEZLOiAiQlItQnJhemlsIiwKICAgICAgICAgICAgICAgICAgICBGSjogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgRkk6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEZSOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBHRjogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgUEY6ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgIEdBOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBHTTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgR0U6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgREU6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEdIOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBHSTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgR1I6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEdMOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgR0Q6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBHUDogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIEdVOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBHVDogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIEdHOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBHTjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgR1c6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEdZOiAiQlItQnJhemlsIiwKICAgICAgICAgICAgICAgICAgICBIVDogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIFZBOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBITjogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIEhLOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIEhVOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBJUzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgSU46ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgSUQ6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgSVI6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgSVE6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgSUU6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIElNOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBJTDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBJVDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgSk06ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBKUDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBKRTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgSk86ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgS1o6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgS0U6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEtJOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBLUDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBLUjogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBLVzogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBLRzogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBMQTogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBMVjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgTEI6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgTFM6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIExSOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBMWTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgTEk6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIExUOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBMVTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgTU86ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgTUs6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIE1HOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBNVzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgTVk6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgTVY6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgTUw6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIE1UOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBNSDogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgTVE6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBNUjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgTVU6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFlUOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBNWDogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIEZNOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBNRDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgTUM6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIE1OOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIE1FOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBNUzogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIE1BOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBNWjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgTU06ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgTkE6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIE5SOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBOUDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBOTDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgTkM6ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgIE5aOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBOSTogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIE5FOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBORzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgTlU6ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgIE5GOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBNUDogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgTk86ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIE9NOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIFBLOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIFBXOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBQUzogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBQQTogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIFBHOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBQWTogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgUEU6ICJCUi1CcmF6aWwiLAogICAgICAgICAgICAgICAgICAgIFBIOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIFBOOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBQTDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgUFQ6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFBSOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgUUE6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgUkU6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFJPOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBSVTogIlJVLVJ1c3NpYSIsCiAgICAgICAgICAgICAgICAgICAgUlc6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEJMOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgU0g6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEtOOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgTEM6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBNRjogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIFBNOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgVkM6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBXUzogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgU006ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFNUOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBTQTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgU046ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFJTOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBTQzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgU0w6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFNHOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIFNYOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgU0s6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFNJOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBTQjogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgU086ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFpBOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBTUzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgRVM6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIExLOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIFNEOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBTUjogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgU0o6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFNaOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBTRTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgQ0g6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFNZOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBUVzogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBUSjogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBUWjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgVEg6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgVEw6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgVEc6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFRLOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBUTzogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgVFQ6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICBUTjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgVFI6ICJUSy1UdXJrZXkiLAogICAgICAgICAgICAgICAgICAgIFRNOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIFRDOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgVFY6ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgIFVHOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBVQTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgQUU6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIEdCOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICBVUzogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIFVNOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBWSTogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgIFVZOiAiQlItQnJhemlsIiwKICAgICAgICAgICAgICAgICAgICBVWjogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICBWVTogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgVkU6ICJCUi1CcmF6aWwiLAogICAgICAgICAgICAgICAgICAgIFZOOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgIFdGOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICBFSDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgWUU6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgWk06ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgIFpXOiAiRVUtTG9uZG9uIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBvYSA9IDAsCiAgICAgICAgICAgICAgICAgICAgR2EgPSAwLAogICAgICAgICAgICAgICAgICAgIFMgPSBudWxsLAogICAgICAgICAgICAgICAgICAgIFViOwogICAgICAgICAgICAgICAgYy5jb25uZWN0ID0gbGI7CiAgICAgICAgICAgICAgICB2YXIgSWEgPSA1MDAsCiAgICAgICAgICAgICAgICAgICAgQ2MgPSAuODc1LAogICAgICAgICAgICAgICAgICAgIEVjID0gLjc1LAogICAgICAgICAgICAgICAgICAgIEZjID0gLjI1LAogICAgICAgICAgICAgICAgICAgIERjID0gLjEyNSwKICAgICAgICAgICAgICAgICAgICBWYiA9IC0xLAogICAgICAgICAgICAgICAgICAgIFdiID0gLTE7CiAgICAgICAgICAgICAgICBjLnNlbmRNaXRvc2lzID0gZWI7CiAgICAgICAgICAgICAgICBjLnNlbmRFamVjdCA9IEpiOwogICAgICAgICAgICAgICAgbS5uZXR3b3JraW5nID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICBhLmxvZ2luUmVhbG0gPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEdHOiAiZ29vZ2xlIiwKICAgICAgICAgICAgICAgICAgICAgICAgRkI6ICJmYWNlYm9vayIKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGEuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGEoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBhLmJ5dGVWaWV3OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBVKDEgKyBhLmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zZXRVaW50OCgwLCAxMDIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgZC5sZW5ndGg7ICsrYykgYS5zZXRVaW50OCgxICsgYywgZFtjXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR4dCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgZC5sZW5ndGg7ICsrYykgdHh0ICs9ICdbJyArIGMgKyAnLScgKyBkW2NdICsgJ10nICsgU3RyaW5nLmZyb21DaGFyQ29kZShkW2NdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdQQUNLRVQgMTAyJyxkLmxlbmd0aCxkLmxlbmd0aC0zMCxkLHR4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZW5kVG9rZW4oZCk7Ly9BR0FSQk9UT1ZICiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVihhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgfSh7fSk7CiAgICAgICAgICAgICAgICB2YXIgSCA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgTSA9IDEsCiAgICAgICAgICAgICAgICAgICAgVWEgPSBudWxsLAogICAgICAgICAgICAgICAgICAgIHJjID0gMCwKICAgICAgICAgICAgICAgICAgICBxYyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBEYXRlLm5vdygpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IDFFMyAvIDYwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocWMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBEYXRlLm5vdygpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBkIC0gYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlID4gYikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBkIC0gZSAlIGI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBEYXRlLm5vdygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFkYSgpIHx8IDI0MCA+IGcgLSBGYSB8fCAhbS5jb3JlLmNvbmZpZy5za2lwRHJhdyA/IFliKCkgOiBjb25zb2xlLndhcm4oIlNraXBwaW5nIGRyYXciKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBaYygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJjID0gMUUzIC8gZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmRlYnVnLnVwZGF0ZUNoYXJ0KCJmcHMiLCBkLCByYykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0oKSwKICAgICAgICAgICAgICAgICAgICBoYSA9IHt9LAogICAgICAgICAgICAgICAgICAgIE9iID0gInBvbGFuZDt1c2E7Y2hpbmE7cnVzc2lhO2NhbmFkYTthdXN0cmFsaWE7c3BhaW47YnJhemlsO2dlcm1hbnk7dWtyYWluZTtmcmFuY2U7c3dlZGVuO2NoYXBsaW47bm9ydGgga29yZWE7c291dGgga29yZWE7amFwYW47dW5pdGVkIGtpbmdkb207ZWFydGg7Z3JlZWNlO2xhdHZpYTtsaXRodWFuaWE7ZXN0b25pYTtmaW5sYW5kO25vcndheTtjaWE7bWFsZGl2YXM7YXVzdHJpYTtuaWdlcmlhO3JlZGRpdDt5YXJhbmFpa2E7Y29uZmVkZXJhdGU7OWdhZztpbmRpYW5hOzRjaGFuO2l0YWx5O2J1bGdhcmlhO3R1bWJscjsyY2guaGs7aG9uZyBrb25nO3BvcnR1Z2FsO2phbWFpY2E7Z2VybWFuIGVtcGlyZTttZXhpY287c2FuaWs7c3dpdHplcmxhbmQ7Y3JvYXRpYTtjaGlsZTtpbmRvbmVzaWE7YmFuZ2xhZGVzaDt0aGFpbGFuZDtpcmFuO2lyYXE7cGVydTttb29uO2JvdHN3YW5hO2Jvc25pYTtuZXRoZXJsYW5kcztldXJvcGVhbiB1bmlvbjt0YWl3YW47cGFraXN0YW47aHVuZ2FyeTtzYXRhbmlzdDtxaW5nIGR5bmFzdHk7bWF0cmlhcmNoeTtwYXRyaWFyY2h5O2ZlbWluaXNtO2lyZWxhbmQ7dGV4YXM7ZmFjZXB1bmNoO3Byb2RvdGE7Y2FtYm9kaWE7c3RlYW07cGljY29sbztlYTtpbmRpYTtrYztkZW5tYXJrO3F1ZWJlYztheXkgbG1hbztzZWFsYW5kO2JhaXQ7dHNhcmlzdCBydXNzaWE7b3JpZ2luO3ZpbmVzYXVjZTtzdGFsaW47YmVsZ2l1bTtsdXhlbWJvdXJnO3N0dXNzeTtwcnVzc2lhOzhjaDthcmdlbnRpbmE7c2NvdGxhbmQ7c2lyO3JvbWFuaWE7d29qYWs7ZG9nZTtuYXNhO2J5emFudGl1bTtpbXBlcmlhbCBqYXBhbjtmcmVuY2gga2luZ2RvbTtzb21hbGlhO3R1cmtleTttYXJzO3Bva2VyZmFjZTs4O2lycztyZWNlaXRhIGZlZGVyYWw7ZmFjZWJvb2s7cHV0aW47bWVya2VsO3RzaXByYXM7b2JhbWE7a2ltIGpvbmctdW47ZGlsbWE7aG9sbGFuZGU7YmVybHVzY29uaTtjYW1lcm9uO2NsaW50b247aGlsbGFyeTt2ZW5lenVlbGE7YmxhdHRlcjtjaGF2ZXo7Y3ViYTtmaWRlbDttZXJrZWw7cGFsaW47cXVlZW47Ym9yaXM7YnVzaDt0cnVtcCIuc3BsaXQoIjsiKSwKICAgICAgICAgICAgICAgICAgICAkYyA9ICI4O25hc2E7cHV0aW47bWVya2VsO3RzaXByYXM7b2JhbWE7a2ltIGpvbmctdW47ZGlsbWE7aG9sbGFuZGU7YmVybHVzY29uaTtjYW1lcm9uO2NsaW50b247aGlsbGFyeTtibGF0dGVyO2NoYXZlejtmaWRlbDttZXJrZWw7cGFsaW47cXVlZW47Ym9yaXM7YnVzaDt0cnVtcCIuc3BsaXQoIjsiKSwKICAgICAgICAgICAgICAgICAgICBzYSA9IHt9OwogICAgICAgICAgICAgICAgQmIucHJvdG90eXBlID0gewogICAgICAgICAgICAgICAgICAgICQ6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgeDogMCwKICAgICAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgICAgIGY6IDAsCiAgICAgICAgICAgICAgICAgICAgYjogMAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHZhciBUYSA9IC0xLAogICAgICAgICAgICAgICAgICAgICRiID0gITE7CiAgICAgICAgICAgICAgICBjYS5wcm90b3R5cGUgPSB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IDAsCiAgICAgICAgICAgICAgICAgICAgYTogbnVsbCwKICAgICAgICAgICAgICAgICAgICBuYW1lOiBudWxsLAogICAgICAgICAgICAgICAgICAgIGk6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgUzogbnVsbCwKICAgICAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgICAgIHk6IDAsCiAgICAgICAgICAgICAgICAgICAgc2l6ZTogMCwKICAgICAgICAgICAgICAgICAgICBzOiAwLAogICAgICAgICAgICAgICAgICAgIHU6IDAsCiAgICAgICAgICAgICAgICAgICAgbzogMCwKICAgICAgICAgICAgICAgICAgICBqYTogMCwKICAgICAgICAgICAgICAgICAgICBrYTogMCwKICAgICAgICAgICAgICAgICAgICBnOiAwLAogICAgICAgICAgICAgICAgICAgIE06IDAsCiAgICAgICAgICAgICAgICAgICAgTjogMCwKICAgICAgICAgICAgICAgICAgICBKOiAwLAogICAgICAgICAgICAgICAgICAgIEs6IDAsCiAgICAgICAgICAgICAgICAgICAgZWE6IDAsCiAgICAgICAgICAgICAgICAgICAgVTogMCwKICAgICAgICAgICAgICAgICAgICByYTogMCwKICAgICAgICAgICAgICAgICAgICBHOiAhMSwKICAgICAgICAgICAgICAgICAgICBjOiAhMSwKICAgICAgICAgICAgICAgICAgICBoOiAhMSwKICAgICAgICAgICAgICAgICAgICBWOiAhMCwKICAgICAgICAgICAgICAgICAgICBkYTogMCwKICAgICAgICAgICAgICAgICAgICBDOiBudWxsLAogICAgICAgICAgICAgICAgICAgIGlhOiAwLAogICAgICAgICAgICAgICAgICAgIHVhOiAhMSwKICAgICAgICAgICAgICAgICAgICBJOiAhMSwKICAgICAgICAgICAgICAgICAgICBjYTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChhID0gMDsgYSA8IEEubGVuZ3RoOyBhKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQVthXSA9PSB0aGlzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQS5zcGxpY2UoYSwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIEtbdGhpcy5pZF07CiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBxLmluZGV4T2YodGhpcyk7IC0xICE9IGEgJiYgKHNiID0gITAsIHEuc3BsaWNlKGEsIDEpKTsKICAgICAgICAgICAgICAgICAgICAgICAgYSA9IEUuaW5kZXhPZih0aGlzLmlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy9BR0FSQk9UT1ZICiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtMSAhPSBhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFLnNwbGljZShhLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU15QmFsbCh0aGlzLmlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAvL0FHQVJCT1RPVkgKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5HID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgIDAgPCB0aGlzLmRhICYmIGJhLnB1c2godGhpcykKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG06IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KH5+KC4zICogdGhpcy5zaXplKSwgMjQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBBOiBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lID0gYSkgbnVsbCA9PSB0aGlzLmkgPyB0aGlzLmkgPSBuZXcgVmEodGhpcy5tKCksICIjRkZGRkZGIiwgITAsICIjMDAwMDAwIikgOiB0aGlzLmkuUCh0aGlzLm0oKSksIHRoaXMuaS5CKHRoaXMubmFtZSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGJhOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSB0aGlzLkgoKSA7IHRoaXMuYS5sZW5ndGggPiBhOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSB+fihNYXRoLnJhbmRvbSgpICogdGhpcy5hLmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmEuc3BsaWNlKGIsIDEpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yICgwID09IHRoaXMuYS5sZW5ndGggJiYgMCA8IGEgJiYgdGhpcy5hLnB1c2gobmV3IEJiKHRoaXMsIHRoaXMueCwgdGhpcy55LCB0aGlzLnNpemUsIE1hdGgucmFuZG9tKCkgLSAuNSkpIDsgdGhpcy5hLmxlbmd0aCA8IGE7KSBiID0gfn4oTWF0aC5yYW5kb20oKSAqIHRoaXMuYS5sZW5ndGgpLCBiID0gdGhpcy5hW2JdLCB0aGlzLmEucHVzaChuZXcgQmIodGhpcywgYi54LCBiLnksIGIuZiwgYi5iKSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIEg6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSAxMDsKICAgICAgICAgICAgICAgICAgICAgICAgMjAgPiB0aGlzLnNpemUgJiYgKGEgPSAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jICYmIChhID0gMzApOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IHRoaXMuc2l6ZTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jIHx8IChiICo9IGwpOwogICAgICAgICAgICAgICAgICAgICAgICBiICo9IE07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB+fk1hdGgubWF4KGIsIGEpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBCYTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJhKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSB0aGlzLmEsIGIgPSBhLmxlbmd0aCwgZCA9IHRoaXMsIGMgPSB0aGlzLmMgPyAwIDogKHRoaXMuaWQgLyAxRTMgKyB4IC8gMUU0KSAlICgyICogTWF0aC5QSSksIGUgPSAwLCBwID0gMDsgcCA8IGI7ICsrcCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBhWyhwIC0gMSArIGIpICUgYl0uYiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID0gYVsocCArIDEpICUgYl0uYiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gYVtwXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGguYiArPSAoTWF0aC5yYW5kb20oKSAtIC41KSAqICh0aGlzLmggPyAzIDogMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmIgKj0gLjc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMCA8IGguYiAmJiAoaC5iID0gMTApOyAtMTAgPiBoLmIgJiYgKGguYiA9IC0xMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmIgPSAoZiArIGsgKyA4ICogaC5iKSAvIDEwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBoLmYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGFbKHAgLSAxICsgYikgJSBiXS5mLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBhWyhwICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSkgJSBiXS5mOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDE1IDwgdGhpcy5zaXplICYmIG51bGwgIT0gaWEgJiYgMjAgPCB0aGlzLnNpemUgKiBsICYmIDAgPCB0aGlzLmlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFFhID0gITEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBoLngsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBoLnk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWEuRWEobSAtIDUsIHEgLSA1LCAxMCwgMTAsIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuJCAhPSBkICYmIDI1ID4gKG0gLSBhLngpICogKG0gLSBhLngpICsgKHEgLSBhLnkpICogKHEgLSBhLnkpICYmIChRYSA9ICEwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFRYSAmJiAoaC54IDwgTWEgfHwgaC55IDwgTmEgfHwgaC54ID4gT2EgfHwgaC55ID4gUGEpICYmIChRYSA9ICEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBRYSAmJiAoMCA8IGguYiAmJiAoaC5iID0gMCksIC0taC5iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiArPSBoLmI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwID4gbiAmJiAobiA9IDApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuaCA/ICgxOSAqIG4gKyB0aGlzLnNpemUpIC8gMjAgOiAoMTIgKiBuICsgdGhpcy5zaXplKSAvIDEzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5mID0gKGYgKyBrICsgOCAqIG4pIC8gMTA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gMiAqIE1hdGguUEkgLyBiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IGguZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYyAmJiAwID09IHAgJSAyICYmIChrICs9IDUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaC54ID0gdGhpcy54ICsgTWF0aC5jb3MoZiAqIHAgKyBjKSAqIGs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLnkgPSB0aGlzLnkgKyBNYXRoLnNpbihmICogcCArIGMpICogazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBNYXRoLm1heChlLCBrKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWEgPSBlCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBuYTogZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5NID0gYTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5OID0gYjsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5KID0gYTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5LID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGI7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuamEgPSBhOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmthID0gYgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgVDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA+PSB0aGlzLmlkKSByZXR1cm4gMTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBkYi5wYSgoeCAtIHRoaXMuVSkgLyAxMjAsIDAsIDEpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5HICYmIDEgPD0gYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBiYS5pbmRleE9mKHRoaXMpOyAtMSAhPSBiICYmIGJhLnNwbGljZShiLCAxKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IGEgKiAodGhpcy5qYSAtIHRoaXMucykgKyB0aGlzLnM7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IGEgKiAodGhpcy5rYSAtIHRoaXMudSkgKyB0aGlzLnU7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2l6ZSA9IGEgKiAodGhpcy5nIC0gdGhpcy5vKSArIHRoaXMubzsKICAgICAgICAgICAgICAgICAgICAgICAgLjAxID4gTWF0aC5hYnModGhpcy5zaXplIC0gdGhpcy5nKSAmJiAodGhpcy5zaXplID0gdGhpcy5nKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFI6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgPj0gdGhpcy5pZCA/ICEwIDogdGhpcy54ICsgdGhpcy5zaXplICsgNDAgPCB5IC0gciAvIDIgLyBsIHx8IHRoaXMueSArIHRoaXMuc2l6ZSArIDQwIDwgeiAtIHQgLyAyIC8gbCB8fCB0aGlzLnggLSB0aGlzLnNpemUgLSA0MCA+IHkgKyByIC8gMiAvIGwgfHwgdGhpcy55IC0gdGhpcy5zaXplIC0gNDAgPiB6ICsgdCAvIDIgLyBsID8gITEgOiAhMAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcWE6IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGEuYmVnaW5QYXRoKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuSCgpOwogICAgICAgICAgICAgICAgICAgICAgICBhLm1vdmVUbyh0aGlzLmFbMF0ueCwgdGhpcy5hWzBdLnkpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMTsgZCA8PSBiOyArK2QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gZCAlIGI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmxpbmVUbyh0aGlzLmFbY10ueCwgdGhpcy5hW2NdLnkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYS5jbG9zZVBhdGgoKTsKICAgICAgICAgICAgICAgICAgICAgICAgYS5zdHJva2UoKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgdzogZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuUigpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3RoaXMuZGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IDAgPCB0aGlzLmlkICYmICF0aGlzLmMgJiYgIXRoaXMuaCAmJiAuNCA+IGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1ID4gdGhpcy5IKCkgJiYgMCA8IHRoaXMuaWQgJiYgKGIgPSAhMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5WICYmICFiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgdGhpcy5hLmxlbmd0aDsgZCsrKSB0aGlzLmFbZF0uZiA9IHRoaXMuc2l6ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuViA9IGI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnNhdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmEgPSB4OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IHRoaXMuVCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5HICYmIChhLmdsb2JhbEFscGhhICo9IDEgLSBkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEubGluZVdpZHRoID0gMTA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmxpbmVDYXAgPSAicm91bmQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5saW5lSm9pbiA9IHRoaXMuYyA/ICJtaXRlciIgOiAicm91bmQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLm5hbWUudG9Mb3dlckNhc2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gITEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHRoaXMuY29sb3IsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oIHx8ICFhYiB8fCBxYiB8fCAoLTEgIT0gT2IuaW5kZXhPZihlKSA/IChoYS5oYXNPd25Qcm9wZXJ0eShlKSB8fCAoaGFbZV0gPSBuZXcgSW1hZ2UsIGhhW2VdLnNyYyA9IGMuQVNTRVRTX1JPT1QgKyAic2tpbnMvIiArIGUgKyAiLnBuZyIpLCBnID0gMCAhPSBoYVtlXS53aWR0aCAmJiBoYVtlXS5jb21wbGV0ZSA/IGhhW2VdIDogbnVsbCkgOiBnID0gbnVsbCwgbnVsbCAhPSBnID8gLTEgIT0gJGMuaW5kZXhPZihlKSAmJiAoZCA9ICEwKSA6ICh0aGlzLkkgJiYgIiVzdGFyYmFsbCIgPT0gdGhpcy5DICYmICJzaGVucm9uIiA9PSBlICYmIDcgPD0gcS5sZW5ndGggJiYgKCRiID0gZCA9ICEwLCBwID0gZWMoIiVzdGFyYmFsbDEiKSksIGcgPSBlYyh0aGlzLkMpLCBudWxsICE9IGcgJiYgKGggPSAhMCwgZiA9IE5jKHRoaXMuQykgfHwgZikpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29yZS5kZWJ1ZyAmJiBtLmRlYnVnLnNob3dQcmVkaWN0aW9uICYmIHRoaXMuSSAmJiAoYS5zdHJva2VTdHlsZSA9ICIjMDAwMEZGIiwgYS5iZWdpblBhdGgoKSwgYS5hcmModGhpcy5NLCB0aGlzLk4sIHRoaXMuc2l6ZSArIDUsIDAsIDIgKiBNYXRoLlBJLCAhMSksIGEuY2xvc2VQYXRoKCksIGEuc3Ryb2tlKCksIGEuc3Ryb2tlU3R5bGUgPSAiIzAwRkYwMCIsIGEuYmVnaW5QYXRoKCksIGEuYXJjKHRoaXMuSiwgdGhpcy5LLCB0aGlzLnNpemUgKyA1LCAwLCAyICogTWF0aC5QSSwgITEpLCBhLmNsb3NlUGF0aCgpLCBhLnN0cm9rZSgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhICYmICFxYiA/IChhLmZpbGxTdHlsZSA9ICIjRkZGRkZGIiwgYS5zdHJva2VTdHlsZSA9ICIjQUFBQUFBIikgOiAoYS5maWxsU3R5bGUgPSBmLCBhLnN0cm9rZVN0eWxlID0gZik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID8gKGEuYmVnaW5QYXRoKCksIGEuYXJjKHRoaXMueCwgdGhpcy55LCB0aGlzLnNpemUgKyA1LCAwLCAyICogTWF0aC5QSSwgITEpLCBhLmNsb3NlUGF0aCgpKSA6ICh0aGlzLkJhKCksIHRoaXMucWEoYSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaCB8fCBhLmZpbGwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT0gZyAmJiAodGhpcy5sYShhLCBnKSwgbnVsbCAhPSBwICYmIHRoaXMubGEoYSwgcCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFscGhhOiBNYXRoLnNpbiguMDE3NCAqIFRhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRhIHx8IDE1IDwgdGhpcy5zaXplKSAmJiAhYiAmJiAoYS5zdHJva2VTdHlsZSA9ICIjMDAwMDAwIiwgYS5nbG9iYWxBbHBoYSAqPSAuMSwgYS5zdHJva2UoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmdsb2JhbEFscGhhID0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSAtMSAhPSBxLmluZGV4T2YodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gfn50aGlzLnk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwICE9IHRoaXMuaWQgJiYgKGZhIHx8IGUpICYmIHRoaXMubmFtZSAmJiB0aGlzLmkgJiYgIWQgJiYgKGcgPSB0aGlzLmksIGcuQih0aGlzLm5hbWUpLCBnLlAodGhpcy5tKCkpLCBkID0gMCA+PSB0aGlzLmlkID8gMSA6IE1hdGguY2VpbCgxMCAqIGwpIC8gMTAsIGcubWEoZCksIGcgPSBnLk8oKSwgcCA9IE1hdGguY2VpbChnLndpZHRoIC8gZCksIGYgPSBNYXRoLmNlaWwoZy5oZWlnaHQgLyBkKSwgYS5kcmF3SW1hZ2UoZywgfn50aGlzLnggLSB+fihwIC8gMiksIGIgLSB+fihmIC8gMiksIHAsIGYpLCBiICs9IGcuaGVpZ2h0IC8gMiAvIGQgKyA0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgPCB0aGlzLmlkICYmIGJiICYmIChlIHx8IDAgPT0gcS5sZW5ndGggJiYgKCF0aGlzLmMgfHwgdGhpcy5oKSAmJiAyMCA8IHRoaXMuc2l6ZSkgJiYgKG51bGwgPT0gdGhpcy5TICYmICh0aGlzLlMgPSBuZXcgVmEodGhpcy5tKCkgLyAyLCAiI0ZGRkZGRiIsICEwLCAiIzAwMDAwMCIpKSwgZSA9IHRoaXMuUywgZS5QKHRoaXMubSgpIC8gMiksIGUuQih+fih0aGlzLnNpemUgKiB0aGlzLnNpemUgLyAxMDApKSwgZCA9IE1hdGguY2VpbCgxMCAqIGwpIC8gMTAsIGUubWEoZCksIGcgPSBlLk8oKSwgcCA9IE1hdGguY2VpbChnLndpZHRoIC8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkKSwgZiA9IE1hdGguY2VpbChnLmhlaWdodCAvIGQpLCBhLmRyYXdJbWFnZShnLCB+fnRoaXMueCAtIH5+KHAgLyAyKSwgYiAtIH5+KGYgLyAyKSwgcCwgZikpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5yZXN0b3JlKCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgbGE6IGZ1bmN0aW9uIChhLCBiLCBkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGEuc2F2ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBhLmNsaXAoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBNYXRoLm1heCh0aGlzLnNpemUsIHRoaXMuaWEpOwogICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9IGQgJiYgbnVsbCAhPSBkLmFscGhhICYmIChhLmdsb2JhbEFscGhhID0gZC5hbHBoYSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGEuZHJhd0ltYWdlKGIsIHRoaXMueCAtIGMgLSA1LCB0aGlzLnkgLSBjIC0gNSwgMiAqIGMgKyAxMCwgMiAqIGMgKyAxMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGEucmVzdG9yZSgpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHZhciBkYiA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYihhLCBiLCBjKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IGIgOiBhID4gYyA/IGMgOiBhCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGEuaGEgPSBmdW5jdGlvbiAoYSwgYykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZTsKICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGIoLjUsIDAsIDEpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSArIGUgKiAoYyAtIGEpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBhLnBhID0gYjsKICAgICAgICAgICAgICAgICAgICBhLmZpeGVkID0gZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBNYXRoLnBvdygxMCwgYik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB+fihhICogYykgLyBjCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgfSh7fSk7CiAgICAgICAgICAgICAgICBjLk1hdGhzID0gZGI7CiAgICAgICAgICAgICAgICB2YXIgSGEgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgIGEuTCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUsIGMgPSBbYS5nZXRNb250aCgpICsgMSwgYS5nZXREYXRlKCksIGEuZ2V0RnVsbFllYXIoKV0sIGEgPSBbYS5nZXRIb3VycygpLCBhLmdldE1pbnV0ZXMoKSwgYS5nZXRTZWNvbmRzKCldLCBlID0gMTsgMyA+IGU7IGUrKykgMTAgPiBhW2VdICYmIChhW2VdID0gIjAiICsgYVtlXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiWyIgKyBjLmpvaW4oIi8iKSArICIgIiArIGEuam9pbigiOiIpICsgIl0iCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgfSh7fSk7CiAgICAgICAgICAgICAgICBjLlV0aWxzID0gSGE7CiAgICAgICAgICAgICAgICBWYS5wcm90b3R5cGUgPSB7CiAgICAgICAgICAgICAgICAgICAgRjogIiIsCiAgICAgICAgICAgICAgICAgICAgVzogIiMwMDAwMDAiLAogICAgICAgICAgICAgICAgICAgIFk6ICExLAogICAgICAgICAgICAgICAgICAgIFo6ICIjMDAwMDAwIiwKICAgICAgICAgICAgICAgICAgICB2OiAxNiwKICAgICAgICAgICAgICAgICAgICBqOiBudWxsLAogICAgICAgICAgICAgICAgICAgIFg6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgbDogITEsCiAgICAgICAgICAgICAgICAgICAgRDogMSwKICAgICAgICAgICAgICAgICAgICBQOiBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnYgIT0gYSAmJiAodGhpcy52ID0gYSwgdGhpcy5sID0gITApCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBtYTogZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5EICE9IGEgJiYgKHRoaXMuRCA9IGEsIHRoaXMubCA9ICEwKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgQjogZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYSAhPSB0aGlzLkYgJiYgKHRoaXMuRiA9IGEsIHRoaXMubCA9ICEwKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgTzogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBudWxsID09IHRoaXMuaiAmJiAodGhpcy5qID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIiksIHRoaXMuWCA9IHRoaXMuai5nZXRDb250ZXh0KCIyZCIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMuaiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gdGhpcy5YLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSB0aGlzLkYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMuRCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gdGhpcy52LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBnICsgInB4IFVidW50dSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmZvbnQgPSBmOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSB+figuMiAqIGcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS53aWR0aCA9IChiLm1lYXN1cmVUZXh0KGMpLndpZHRoICsgNikgKiBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5oZWlnaHQgPSAoZyArIGgpICogZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIuZm9udCA9IGY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnNjYWxlKGUsIGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5nbG9iYWxBbHBoYSA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmxpbmVXaWR0aCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnN0cm9rZVN0eWxlID0gdGhpcy5aOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5maWxsU3R5bGUgPSB0aGlzLlc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlkgJiYgYi5zdHJva2VUZXh0KGMsIDMsIGcgLSBoIC8gMik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmZpbGxUZXh0KGMsIDMsIGcgLSBoIC8gMikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5qCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIERhdGUubm93IHx8IChEYXRlLm5vdyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG5ldyBEYXRlKS5nZXRUaW1lKCkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gWyJtcyIsICJtb3oiLCAid2Via2l0IiwgIm8iXSwgYiA9IDA7IGIgPCBhLmxlbmd0aCAmJiAhYy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsrYikgYy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBjW2FbYl0gKyAiUmVxdWVzdEFuaW1hdGlvbkZyYW1lIl0sIGMuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjW2FbYl0gKyAiQ2FuY2VsQW5pbWF0aW9uRnJhbWUiXSB8fCBjW2FbYl0gKyAiQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIl07CiAgICAgICAgICAgICAgICAgICAgYy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgKGMucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoYSwgMUUzIC8gNjApCiAgICAgICAgICAgICAgICAgICAgfSwgYy5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChhKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICAgICAgdmFyIHZjID0gewogICAgICAgICAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGIoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA8IGUgJiYgKGEgPSBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPiBmICYmIChhID0gZik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gfn4oKGEgLSBlKSAvIDMyKQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPCBnICYmIChhID0gZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID4gaCAmJiAoYSA9IGgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIH5+KChhIC0gZykgLyAzMikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGEuemEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gYS5BYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBhLnhhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGEueWEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID0gfn4oKGYgLSBlKSAvIDMyKSArIDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gfn4oKGggLSBnKSAvIDMyKSArIDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gQXJyYXkoayAqIG0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGE6IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiKGEueCkgKyBjKGEueSkgKiBrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT0gbltlXSA/IG5bZV0gPSBhIDogQXJyYXkuaXNBcnJheShuW2VdKSA/IG5bZV0ucHVzaChhKSA6IG5bZV0gPSBbbltlXSwgYV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFYTogZnVuY3Rpb24gKGEsIGUsIGcsIGYsIGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IGIoYSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBjKGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBiKGEgKyBnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gYyhlICsgZik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDAgPiBwIHx8IHAgPj0gayB8fCAwID4gdSB8fCB1ID49IG0pIGRlYnVnZ2VyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyB1IDw9IGU7ICsrdSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChmID0gcDsgZiA8PSBhOyArK2YpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZyA9IG5bZiArIHUgKiBrXSwgbnVsbCAhPSBnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGcpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBsID0gMDsgbCA8IGcubGVuZ3RoOyBsKyspIGgoZ1tsXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBoKGcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFRiID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IG5ldyBjYSgwLCAwLCAwLCAzMiwgIiNFRDFDMjQiLCAiIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGIud2lkdGggPSAzMjsKICAgICAgICAgICAgICAgICAgICAgICAgYi5oZWlnaHQgPSAzMjsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBiLmdldENvbnRleHQoIjJkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwIDwgcS5sZW5ndGggJiYgKGEuY29sb3IgPSBxWzBdLmNvbG9yLCBhLkEocVswXS5uYW1lKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmNsZWFyUmVjdCgwLCAwLCAzMiwgMzIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5zYXZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnRyYW5zbGF0ZSgxNiwgMTYpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5zY2FsZSguNCwgLjQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS53KGMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5yZXN0b3JlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJmYXZpY29uIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZyA9IGUuY2xvbmVOb2RlKCEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcuc2V0QXR0cmlidXRlKCJocmVmIiwgYi50b0RhdGFVUkwoImltYWdlL3BuZyIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZywgZSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0oKTsKICAgICAgICAgICAgICAgIGUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIFRiKCkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdmFyIFdhID0gewogICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFByb3ZpZGVyOiAiZmFjZWJvb2siLAogICAgICAgICAgICAgICAgICAgIGxvZ2luSW50ZW50OiAiMCIsCiAgICAgICAgICAgICAgICAgICAgdXNlckluZm86IHsKICAgICAgICAgICAgICAgICAgICAgICAgc29jaWFsVG9rZW46IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuRXhwaXJlczogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgeHA6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICB4cE5lZWRlZDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICBwaWN0dXJlOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZWRJbjogIjAiLAogICAgICAgICAgICAgICAgICAgICAgICBzb2NpYWxJZDogIiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGggPSBjLmRlZmF1bHRTdCA9IFdhOwogICAgICAgICAgICAgICAgYy5zdG9yYWdlSW5mbyA9IGg7CiAgICAgICAgICAgICAgICBjLmNyZWF0ZURlZmF1bHRTdG9yYWdlID0gUGM7CiAgICAgICAgICAgICAgICBjLnVwZGF0ZVN0b3JhZ2UgPSBYYTsKICAgICAgICAgICAgICAgIGUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIG51bGwgIT0gYy5sb2NhbFN0b3JhZ2Uuc3RvcmVPYmplY3RJbmZvICYmIChoID0gSlNPTi5wYXJzZShjLmxvY2FsU3RvcmFnZS5zdG9yZU9iamVjdEluZm8pKTsKICAgICAgICAgICAgICAgICAgICAiMSIgPT0gaC5sb2dpbkludGVudCAmJiBmYyhoLmNvbnRleHQpOwogICAgICAgICAgICAgICAgICAgICIiID09IGgudXNlckluZm8ubmFtZSAmJiAiIiA9PSBoLnVzZXJJbmZvLmRpc3BsYXlOYW1lIHx8IGdjKGgudXNlckluZm8pCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGMuY2hlY2tMb2dpblN0YXR1cyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAiMSIgPT0gaC5sb2dpbkludGVudCAmJiAoWWEoKSwgZmMoaC5jb250ZXh0KSkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgWWEgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgYy5NQy5zZXRQcm9maWxlUGljdHVyZShoLnVzZXJJbmZvLnBpY3R1cmUpOwogICAgICAgICAgICAgICAgICAgIGMuTUMuc2V0U29jaWFsSWQoaC51c2VySW5mby5zb2NpYWxJZCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjLmxvZ291dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBoID0gV2E7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGMubG9jYWxTdG9yYWdlLnN0b3JlT2JqZWN0SW5mbzsKICAgICAgICAgICAgICAgICAgICBjLmxvY2FsU3RvcmFnZS5zdG9yZU9iamVjdEluZm8gPSBKU09OLnN0cmluZ2lmeShXYSk7CiAgICAgICAgICAgICAgICAgICAgWGEoKTsKICAgICAgICAgICAgICAgICAgICBzYygpOwogICAgICAgICAgICAgICAgICAgIG0uY2FjaGUuc2VudEdhbWVTZXJ2ZXJMb2dpbiA9ICExOwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtLmNhY2hlLmxvZ2luX2luZm87CiAgICAgICAgICAgICAgICAgICAgZSgiI2hlbGxvQ29udGFpbmVyIikuYXR0cigiZGF0YS1sb2dnZWQtaW4iLCAiMCIpOwogICAgICAgICAgICAgICAgICAgIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtaGFzLWFjY291bnQtZGF0YSIsICIwIik7CiAgICAgICAgICAgICAgICAgICAgZSgiLnRpbWVyIikudGV4dCgiIik7CiAgICAgICAgICAgICAgICAgICAgZSgiI2dQbHVzU2hhcmUiKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgZSgiI2ZiU2hhcmUiKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgZSgiI3VzZXItaWQtdGFnIikudGV4dCgiIik7CiAgICAgICAgICAgICAgICAgICAgUSgpOwogICAgICAgICAgICAgICAgICAgIGMuTUMuZG9Mb2dvdXQoKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGMudG9nZ2xlU29jaWFsTG9naW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgZSgiI3NvY2lhbExvZ2luQ29udGFpbmVyIikudG9nZ2xlKCk7CiAgICAgICAgICAgICAgICAgICAgZSgiI3NldHRpbmdzIikuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIGUoIiNpbnN0cnVjdGlvbnMiKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgQ2IoKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGMudG9nZ2xlU2V0dGluZ3MgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgZSgiI3NldHRpbmdzIikudG9nZ2xlKCk7CiAgICAgICAgICAgICAgICAgICAgZSgiI3NvY2lhbExvZ2luQ29udGFpbmVyIikuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIGUoIiNpbnN0cnVjdGlvbnMiKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgQ2IoKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIG0uYWNjb3VudCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYigpIHsgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coSGEuTCgpICsgIiBnb3QgdXNlciBsb2dpbiIpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBmIHx8IGYuaWQgIT0gYi5pZCkgZiA9IGIsIG51bGwgIT0gYy5zc2FfanNvbiAmJiAoYy5zc2FfanNvbi5hcHBsaWNhdGlvblVzZXJJZCA9ICIiICsgYi5pZCwgYy5zc2FfanNvbi5jdXN0b21fdXNlcl9pZCA9ICIiICsgYi5pZCksICJ1bmRlZmluZWQiICE9IHR5cGVvZiBTU0FfQ09SRSAmJiBTU0FfQ09SRS5zdGFydCgpLCBlKCIjb2ZmZXJ3YWxsSWZyYW1lIikuYXR0cigic3JjIiwgImh0dHA6Ly93d3cuc3VwZXJzb25pY2Fkcy5jb20vZGVsaXZlcnkvcGFuZWwucGhwP2FwcGxpY2F0aW9uS2V5PSIgKyBFbnZDb25maWcuc3VwZXJzb25pY19hcHBfa2V5ICsgIiZhcHBsaWNhdGlvblVzZXJJZD0iICsgYi5pZCArICImY3VzdG9tX3VzZXJfaWQ9IiArIGIuaWQgKyAiJmFwcGxpY2F0aW9uVXNlcklkU2lnbmF0dXJlPW9wdGlvbmFsIikKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIGEuaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbS5jb3JlLmJpbmQoInVzZXJfbG9naW4iLCBkKTsKICAgICAgICAgICAgICAgICAgICAgICAgbS5jb3JlLmJpbmQoInVzZXJfbG9nb3V0IiwgYikKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGEuc2V0VXNlckRhdGEgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICBnYyhhKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgYS5zZXRBY2NvdW50RGF0YSA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gZSgiI2hlbGxvQ29udGFpbmVyIikuYXR0cigiZGF0YS1oYXMtYWNjb3VudC1kYXRhIiwgIjEiKTsKICAgICAgICAgICAgICAgICAgICAgICAgaC51c2VySW5mby54cCA9IGEueHA7CiAgICAgICAgICAgICAgICAgICAgICAgIGgudXNlckluZm8ueHBOZWVkZWQgPSBhLnhwTmVlZGVkOwogICAgICAgICAgICAgICAgICAgICAgICBoLnVzZXJJbmZvLmxldmVsID0gYS5sZXZlbDsKICAgICAgICAgICAgICAgICAgICAgICAgWGEoKTsKICAgICAgICAgICAgICAgICAgICAgICAgYyAmJiBiID8gZ2EoYSkgOiAoZSgiLmFnYXJpby1wcm9maWxlLXBhbmVsIC5wcm9ncmVzcy1iYXItc3RhciIpLnRleHQoYS5sZXZlbCksIGUoIi5hZ2FyaW8tZXhwLWJhciAucHJvZ3Jlc3MtYmFyLXRleHQiKS50ZXh0KGEueHAgKyAiLyIgKyBhLnhwTmVlZGVkICsgIiBYUCIpLCBlKCIuYWdhcmlvLWV4cC1iYXIgLnByb2dyZXNzLWJhciIpLmNzcygid2lkdGgiLCAoODggKiBhLnhwIC8gYS54cE5lZWRlZCkudG9GaXhlZCgyKSArICIlIikpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBhLkdhID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2EoYSkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgICAgICB9KHt9KTsKICAgICAgICAgICAgICAgIHZhciBpYyA9IDA7CiAgICAgICAgICAgICAgICBjLmZiQXN5bmNJbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGEoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT0gYy5GQiA/IGFsZXJ0KCJZb3Ugc2VlbSB0byBoYXZlIHNvbWV0aGluZyBibG9ja2luZyBGYWNlYm9vayBvbiB5b3VyIGJyb3dzZXIsIHBsZWFzZSBjaGVjayBmb3IgYW55IGV4dGVuc2lvbnMiKSA6IChoLmxvZ2luSW50ZW50ID0gIjEiLCBjLnVwZGF0ZVN0b3JhZ2UoKSwgYy5GQi5sb2dpbihmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGMoYSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGU6ICJwdWJsaWNfcHJvZmlsZSwgZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjLkZCLmluaXQoewogICAgICAgICAgICAgICAgICAgICAgICBhcHBJZDogRW52Q29uZmlnLmZiX2FwcF9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgY29va2llOiAhMCwKICAgICAgICAgICAgICAgICAgICAgICAgeGZibWw6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uOiAidjIuMiIKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAoIjEiID09IGMuc3RvcmFnZUluZm8ubG9naW5JbnRlbnQgJiYgImZhY2Vib29rIiA9PSBjLnN0b3JhZ2VJbmZvLmNvbnRleHQgfHwgbmMpICYmIGMuRkIuZ2V0TG9naW5TdGF0dXMoZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgImNvbm5lY3RlZCIgPT09IGIuc3RhdHVzID8gaGMoYikgOiAibm90X2F1dGhvcml6ZWQiID09PSBiLnN0YXR1cyA/IChjLmxvZ291dCgpLCBhKCkpIDogYy5sb2dvdXQoKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGMuZmFjZWJvb2tSZWxvZ2luID0gYTsKICAgICAgICAgICAgICAgICAgICBjLmZhY2Vib29rTG9naW4gPSBhCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIEhiID0gITE7CiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBiKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgICAgICAgICAgICAgICAgICAgICBhLnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IjsKICAgICAgICAgICAgICAgICAgICAgICAgYS5hc3luYyA9ICEwOwogICAgICAgICAgICAgICAgICAgICAgICBhLnNyYyA9ICIvL2FwaXMuZ29vZ2xlLmNvbS9qcy9jbGllbnQ6cGxhdGZvcm0uanM/b25sb2FkPWdhcGlBc3luY0luaXQiOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgYi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLCBiKTsKICAgICAgICAgICAgICAgICAgICAgICAgZiA9ICEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciBkID0ge30sCiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSAhMTsKICAgICAgICAgICAgICAgICAgICBjLmdhcGlBc3luY0luaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoZCkudHJpZ2dlcigiaW5pdGlhbGl6ZWQiKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgYS5nb29nbGUgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiKCkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgc2E6IGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmdhcGkuY2xpZW50LmxvYWQoInBsdXMiLCAidjEiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coImZldGNoaW5nIG1lIHByb2ZpbGUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXBpLmNsaWVudC5wbHVzLnBlb3BsZS5nZXQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6ICJtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5leGVjdXRlKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIoYSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgYS5EYSA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGYgfHwgYigpOwogICAgICAgICAgICAgICAgICAgICAgICAidW5kZWZpbmVkIiAhPT0gdHlwZW9mIGdhcGkgPyBhKCkgOiBlKGQpLmJpbmQoImluaXRpYWxpemVkIiwgYSkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgICAgICB9KShtKTsKICAgICAgICAgICAgICAgIHZhciBhZCA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYihhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGMuTUMuZG9Mb2dpbldpdGhHUGx1cyhhKTsKICAgICAgICAgICAgICAgICAgICAgICAgbS5jYWNoZS5sb2dpbl9pbmZvID0gW2EsICJnb29nbGUiXQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGgudXNlckluZm8ucGljdHVyZSA9IGE7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIi5hZ2FyaW8tcHJvZmlsZS1waWN0dXJlIikuYXR0cigic3JjIiwgYSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBnID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2lkOiBFbnZDb25maWcuZ3BsdXNfY2xpZW50X2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llX3BvbGljeTogInNpbmdsZV9ob3N0X29yaWdpbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZTogInByb2ZpbGUgZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgYS5mYSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgb2E6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gaCAmJiAiMSIgPT0gaC5sb2dpbkludGVudCAmJiAiZ29vZ2xlIiA9PSBoLmNvbnRleHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLkRhKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmdhcGkueXRzdWJzY3JpYmUuZ28oImFnYXJZb3V0dWJlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5nYXBpLmxvYWQoImF1dGgyIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gYy5nYXBpLmF1dGgyLmluaXQoZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYuYXR0YWNoQ2xpY2tIYW5kbGVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJncGx1c0xvZ2luIiksIHt9LCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coImdvb2dsZVVzZXIgOiAiICsgYSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmYWlsZWQgdG8gbG9naW4gaW4gZ29vZ2xlIHBsdXM6ICIsIEpTT04uc3RyaW5naWZ5KGEsIHZvaWQgMCwgMikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLmN1cnJlbnRVc2VyLmxpc3RlbihfLmJpbmQoYS5DYSwgYSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiICYmIDEgPT0gZi5pc1NpZ25lZEluLmdldCgpICYmIGYuc2lnbkluKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgQ2E6IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZiAmJiBhICYmIGYuaXNTaWduZWRJbi5nZXQoKSAmJiAhSGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIYiA9ICEwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgubG9naW5JbnRlbnQgPSAiMSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBhLmdldEF1dGhSZXNwb25zZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gZS5hY2Nlc3NfdG9rZW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5vYSA9IGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coImxvZ2dlZEluIHdpdGggRyshIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBhLmdldEJhc2ljUHJvZmlsZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBsLmdldEltYWdlVXJsKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09IGEgPyBtLmdvb2dsZS5zYShlLCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnJlc3VsdC5pc1BsdXNVc2VyID8gKGEgJiYgZChhLmltYWdlLnVybCksIGIoZyksIGEgJiYgKGgudXNlckluZm8ucGljdHVyZSA9IGEuaW1hZ2UudXJsKSwgaC51c2VySW5mby5zb2NpYWxJZCA9IGwuZ2V0SWQoKSwgWWEoKSkgOiAoYWxlcnQoIlBsZWFzZSBhZGQgR29vZ2xlKyB0byB5b3VyIEdvb2dsZSBhY2NvdW50IGFuZCB0cnkgYWdhaW4uXG5PciB5b3UgY2FuIGxvZ2luIHdpdGggYW5vdGhlciBhY2NvdW50LiIpLCBjLmxvZ291dCgpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogKGQoYSksIGgudXNlckluZm8ucGljdHVyZSA9IGEsIGgudXNlckluZm8uc29jaWFsSWQgPSBsLmdldElkKCksIFlhKCksIGIoZykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGguY29udGV4dCA9ICJnb29nbGUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMudXBkYXRlU3RvcmFnZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHdhOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmICYmIChmLnNpZ25PdXQoKSwgSGIgPSAhMSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEKICAgICAgICAgICAgICAgIH0obSk7CiAgICAgICAgICAgICAgICBjLmdwbHVzTW9kdWxlID0gYWQ7CiAgICAgICAgICAgICAgICB2YXIgc2MgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgbS5mYS53YSgpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgYy5sb2dvdXRHb29nbGVQbHVzID0gc2M7CiAgICAgICAgICAgICAgICB2YXIgWmMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYShhLCBiLCBjLCBkLCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gYi5nZXRDb250ZXh0KCIyZCIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZyA9IGIud2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBiLmhlaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgYS5jb2xvciA9IGU7CiAgICAgICAgICAgICAgICAgICAgICAgIGEuQShjKTsKICAgICAgICAgICAgICAgICAgICAgICAgYS5zaXplID0gZDsKICAgICAgICAgICAgICAgICAgICAgICAgZi5zYXZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGYudHJhbnNsYXRlKGcgLyAyLCBiIC8gMik7CiAgICAgICAgICAgICAgICAgICAgICAgIGEudyhmKTsKICAgICAgICAgICAgICAgICAgICAgICAgZi5yZXN0b3JlKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYiA9IG5ldyBjYSgtMSwgMCwgMCwgMzIsICIjNWJjMGRlIiwgIiIpLCBjID0gbmV3IGNhKC0xLCAwLCAwLCAzMiwgIiM1YmMwZGUiLCAiIiksIGYgPSAiIzA3OTFmZiAjNWEwN2ZmICNmZjA3ZmUgI2ZmYTUwNyAjZmYwNzc0ICMwNzdmZmYgIzNhZmYwNyAjZmYwN2VkICMwN2E4ZmYgI2ZmMDc2ZSAjM2ZmZjA3ICNmZjA3MzQgIzA3ZmYyMCAjZmYwN2EyICNmZjgyMDcgIzA3ZmYwZSIuc3BsaXQoIiAiKSwgZyA9IFtdLCBoID0gMDsgaCA8IGYubGVuZ3RoOyArK2gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBoIC8gZi5sZW5ndGggKiAxMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSAzMCAqIE1hdGguc3FydChoIC8gZi5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgICAgICBnLnB1c2gobmV3IGNhKC0xLCBNYXRoLmNvcyhsKSAqIGssIE1hdGguc2luKGwpICogaywgMTAsIGZbaF0sICIiKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgT2MoZyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgICAgICAgICAgICAgICAgICBtLmdldENvbnRleHQoIjJkIik7CiAgICAgICAgICAgICAgICAgICAgbS53aWR0aCA9IG0uaGVpZ2h0ID0gNzA7CiAgICAgICAgICAgICAgICAgICAgYShjLCBtLCAiIiwgMjYsICIjZWJjMGRlIik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiLmNlbGwtc3Bpbm5lciIpLmZpbHRlcigiOnZpc2libGUiKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gZSh0aGlzKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gRGF0ZS5ub3coKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gdGhpcy53aWR0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gdGhpcy5oZWlnaHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IHRoaXMuZ2V0Q29udGV4dCgiMmQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGguY2xlYXJSZWN0KDAsIDAsIGYsIGcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5zYXZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLnRyYW5zbGF0ZShmIC8gMiwgZyAvIDIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDA7IDEwID4gazsgKytrKSBoLmRyYXdJbWFnZShtLCAoLjEgKiBkICsgODAgKiBrKSAlIChmICsgMTQwKSAtIGYgLyAyIC0gNzAgLSAzNSwgZyAvIDIgKiBNYXRoLnNpbigoLjAwMSAqIGQgKyBrKSAlIE1hdGguUEkgKiAyKSAtIDM1LCA3MCwgNzApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5yZXN0b3JlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYyA9IGMuYXR0cigiZGF0YS1pdHIiKSkgJiYgKGMgPSBSKGMpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEoYiwgdGhpcywgYyB8fCAiIiwgK2UodGhpcykuYXR0cigiZGF0YS1zaXplIiksICIjNWJjMGRlIikKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIiNzdGF0c1BlbGxldHMiKS5maWx0ZXIoIjp2aXNpYmxlIikuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKHRoaXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSB0aGlzLndpZHRoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSB0aGlzLmhlaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q29udGV4dCgiMmQiKS5jbGVhclJlY3QoMCwgMCwgYiwgYyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGIgPSAwOyBiIDwgZy5sZW5ndGg7IGIrKykgYShnW2JdLCB0aGlzLCAiIiwgZ1tiXS5zaXplLCBnW2JdLmNvbG9yKQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0oKTsKICAgICAgICAgICAgICAgIGMuY3JlYXRlUGFydHkgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAga2EoIjpwYXJ0eSIpOwogICAgICAgICAgICAgICAgICAgIFMgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICBEYigiLyMiICsgYy5lbmNvZGVVUklDb21wb25lbnQoYSkpOwogICAgICAgICAgICAgICAgICAgICAgICBlKCIucGFydHlUb2tlbiIpLnZhbCgiYWdhci5pby8jIiArIGMuZW5jb2RlVVJJQ29tcG9uZW50KGEpKTsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiI2hlbGxvQ29udGFpbmVyIikuYXR0cigiZGF0YS1wYXJ0eS1zdGF0ZSIsICIxIikKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIFEoKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGMuam9pblBhcnR5ID0gamM7CiAgICAgICAgICAgICAgICBjLmNhbmNlbFBhcnR5ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIERiKCIvIik7CiAgICAgICAgICAgICAgICAgICAgZSgiI2hlbGxvQ29udGFpbmVyIikuYXR0cigiZGF0YS1wYXJ0eS1zdGF0ZSIsICIwIik7CiAgICAgICAgICAgICAgICAgICAga2EoIiIpOwogICAgICAgICAgICAgICAgICAgIFEoKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHZhciBGID0gW10sCiAgICAgICAgICAgICAgICAgICAgdWIgPSAwLAogICAgICAgICAgICAgICAgICAgIHZiID0gIiMwMDAwMDAiLAogICAgICAgICAgICAgICAgICAgIGFhID0gITEsCiAgICAgICAgICAgICAgICAgICAgRWEgPSAhMSwKICAgICAgICAgICAgICAgICAgICBSYSA9IDAsCiAgICAgICAgICAgICAgICAgICAgRWIgPSAwLAogICAgICAgICAgICAgICAgICAgIHhiID0gMCwKICAgICAgICAgICAgICAgICAgICB3YiA9IDAsCiAgICAgICAgICAgICAgICAgICAgVyA9IDAsCiAgICAgICAgICAgICAgICAgICAgWmEgPSAhMDsKICAgICAgICAgICAgICAgIGMub25QbGF5ZXJEZWF0aCA9IEphOwogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIEVhICYmIEYucHVzaChhYygpIC8gMTAwKQogICAgICAgICAgICAgICAgfSwgMUUzIC8gNjApOwogICAgICAgICAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBhID0gUmMoKTsKICAgICAgICAgICAgICAgICAgICAwICE9IGEgJiYgKCsreGIsIDAgPT0gVyAmJiAoVyA9IGEpLCBXID0gTWF0aC5taW4oVywgYSkpCiAgICAgICAgICAgICAgICB9LCAxRTMpOwogICAgICAgICAgICAgICAgYy5jbG9zZVN0YXRzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGFhID0gITE7CiAgICAgICAgICAgICAgICAgICAgZSgiI3N0YXRzIikuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIGMuZGVzdHJveUFkKGMuYWRTbG90cy5hYik7CiAgICAgICAgICAgICAgICAgICAgeWEoMCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjLnNldFNraXBTdGF0cyA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgWmEgPSAhYQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGMuZ2V0U3RhdHNTdHJpbmcgPSBsYzsKICAgICAgICAgICAgICAgIGMuZ1BsdXNTaGFyZSA9IFRjOwogICAgICAgICAgICAgICAgYy50d2l0dGVyU2hhcmVTdGF0cyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGMuZ2V0U3RhdHNTdHJpbmcoInR0X3NoYXJlX3N0YXRzIik7CiAgICAgICAgICAgICAgICAgICAgYy5vcGVuKCJodHRwczovL3R3aXR0ZXIuY29tL2ludGVudC90d2VldD90ZXh0PSIgKwogICAgICAgICAgICAgICAgICAgICAgICBhLCAiQWdhci5pbyIsICJ3aWR0aD02NjAsaGVpZ2h0PTMxMCxtZW51YmFyPW5vLHRvb2xiYXI9bm8scmVzaXphYmxlPXllcyxzY3JvbGxiYXJzPW5vLGxlZnQ9IiArIChjLnNjcmVlblggKyBjLmlubmVyV2lkdGggLyAyIC0gMzMwKSArICIsdG9wPSIgKyAoYy5pbm5lckhlaWdodCAtIDMxMCkgLyAyKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGMuZmJTaGFyZVN0YXRzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBhID0gYy5nZXRTdGF0c1N0cmluZygiZmJfbWF0Y2hyZXN1bHRzX3N1YnRpdGxlIik7CiAgICAgICAgICAgICAgICAgICAgYy5GQi51aSh7CiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogImZlZWQiLAogICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiAiaWZyYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogUigiZmJfbWF0Y2hyZXN1bHRzX3RpdGxlIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcHRpb246IFIoImZiX21hdGNocmVzdWx0c19kZXNjcmlwdGlvbiIpLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogYSwKICAgICAgICAgICAgICAgICAgICAgICAgbGluazogImh0dHA6Ly9hZ2FyLmlvIiwKICAgICAgICAgICAgICAgICAgICAgICAgSmE6ICJodHRwOi8vc3RhdGljMi5taW5pY2xpcGNkbi5jb20vbW9iaWxlL2FnYXIvQWdhci5pb19tYXRjaHJlc3VsdHNfZmJfMTIwMHg2MzAucG5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgRmE6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJwbGF5IG5vdyEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogImh0dHA6Ly9hZ2FyLmlvIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBjLmZpbGxTb2NpYWxWYWx1ZXMgPSBmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgICAgICAgIDEgPT0gYy5pc0Nocm9tZSAmJiAiZ29vZ2xlIiA9PSBjLnN0b3JhZ2VJbmZvLmNvbnRleHQgJiYgYy5nYXBpLmludGVyYWN0aXZlcG9zdC5yZW5kZXIoYiwgewogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50dXJsOiBFbnZDb25maWcuZ2FtZV91cmwsCiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudGlkOiBFbnZDb25maWcuZ3BsdXNfY2xpZW50X2lkLAogICAgICAgICAgICAgICAgICAgICAgICBjb29raWVwb2xpY3k6ICJodHRwOi8vYWdhci5pbyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpbGx0ZXh0OiBhLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsdG9hY3Rpb25sYWJlbDogIkJFQVQiLAogICAgICAgICAgICAgICAgICAgICAgICBjYWxsdG9hY3Rpb251cmw6IEVudkNvbmZpZy5nYW1lX3VybAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgZShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIk1Bc3luY0luaXQiIGluIGMgJiYgYy5NQXN5bmNJbml0KCkKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIE9SSUdJTkFMIFNDUklQVAogICAgICAgIHZhciB3aW5kbyA9IGM7CiAgICAgICAgdmFyIHN0b3BNb3ZlID0gZmFsc2U7CiAgICAgICAgdmFyIGF1dG9GZWVkSW50ZXJ2YWwgPSB1bmRlZmluZWQ7CiAgICAgICAgdmFyIGF1dG9TcGxpdEludGVydmFsID0gdW5kZWZpbmVkOwogICAgICAgIHZhciBzZW5kQnVmZmVyID0gVjsKICAgICAgICB2YXIgc2VuZFZhbCA9IFg7CiAgICAgICAgLy9BR0FSQk9UT1ZIIG1vZGlmIEliIHBvdXIgbGEgbcOpdGhvZGUgcXVpIGZhaXQgbGVzIG9ua2V5dXAgb25rZXlkb3duCiAgICAgICAgSWIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHdpbmRvLm9ua2V5dXAgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgMzIgPT0gYS5rZXlDb2RlICYmICh2YSA9ICExKTsKICAgICAgICAgICAgICAgIDg3ID09IGEua2V5Q29kZSAmJiAoeGEgPSAhMSk7CiAgICAgICAgICAgICAgICA4MSA9PSBhLmtleUNvZGUgJiYgd2EgJiYgKFgoMTkpLCB3YSA9ICExKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHdpbmRvLm9ua2V5ZG93biA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygna2V5RG93bicsIGEpOwogICAgICAgICAgICAgICAgaWYgKGEua2V5Q29kZSA9PSA2OSkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlbWl0IHNwbGl0ICEnKTsKICAgICAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdCgnc3BsaXQnLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJjbGllbnRfdXVpZCI6IGNsaWVudF91dWlkCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYS5rZXlDb2RlID09IDgyKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VtaXQgZmVlZCAhJyk7CiAgICAgICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoJ2ZlZWQnLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICJjbGllbnRfdXVpZCI6IGNsaWVudF91dWlkCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAzMiAhPSBhLmtleUNvZGUgfHwgdmEgfHwgKCJuaWNrIiAhPSBhLnRhcmdldC5pZCAmJiBhLnByZXZlbnREZWZhdWx0KCksIGViKCksIHZhID0gITApOwogICAgICAgICAgICAgICAgODEgPT0gYS5rZXlDb2RlICYmIChYKDE4KSwgd2EgPSAhMCk7CiAgICAgICAgICAgICAgICA4NyAhPSBhLmtleUNvZGUgfHwgeGEgfHwgKEpiKCksIHhhID0gITApOwogICAgICAgICAgICAgICAgMjcgPT0gYS5rZXlDb2RlICYmIChhLnByZXZlbnREZWZhdWx0KCksIHlhKDMwMCksIGUoIiNvZmVyd2FsbENvbnRhaW5lciIpLmlzKCI6dmlzaWJsZSIpICYmIGMuY2xvc2VPZmZlcndhbGwoKSwgZSgiI3ZpZGVvQ29udGFpbmVyIikuaXMoIjp2aXNpYmxlIikgJiYgYy5jbG9zZVZpZGVvQ29udGFpbmVyKCkpCiAgICAgICAgICAgICAgICBpZiAoYS5rZXlDb2RlID09IDg4KSB7Ly8geAogICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd4JyxidCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGEuc2hpZnRLZXkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ0ICE9IHVuZGVmaW5lZCAmJiBidC5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5PUEVOKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnQuc2VuZChKU09OLnN0cmluZ2lmeSh7IGFjdGlvbjogMTkgfSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ0ICE9IHVuZGVmaW5lZCAmJiBidC5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5PUEVOKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnQuc2VuZChKU09OLnN0cmluZ2lmeSh7IGFjdGlvbjogMTUgfSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5rZXlDb2RlID09IDY3KSB7Ly8gYwogICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdjJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGJ0ICE9IHVuZGVmaW5lZCAmJiBidC5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5PUEVOKQogICAgICAgICAgICAgICAgICAgICAgICBidC5zZW5kKEpTT04uc3RyaW5naWZ5KHsgYWN0aW9uOiAxNiB9KSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGEua2V5Q29kZSA9PSA4Nikgey8vIHYKICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYycpOwogICAgICAgICAgICAgICAgICAgIGlmIChidCAhPSB1bmRlZmluZWQgJiYgYnQucmVhZHlTdGF0ZSA9PSBXZWJTb2NrZXQuT1BFTikKICAgICAgICAgICAgICAgICAgICAgICAgYnQuc2VuZChKU09OLnN0cmluZ2lmeSh7IGFjdGlvbjogMTcgfSkpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhLmtleUNvZGUgPT0gNjYpIHsvLyBiCiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2MnKTsKICAgICAgICAgICAgICAgICAgICBpZiAoYnQgIT0gdW5kZWZpbmVkICYmIGJ0LnJlYWR5U3RhdGUgPT0gV2ViU29ja2V0Lk9QRU4pCiAgICAgICAgICAgICAgICAgICAgICAgIGJ0LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyBhY3Rpb246IDE4IH0pKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5rZXlDb2RlID09IDgzICYmICJuaWNrIiAhPSBhLnRhcmdldC5pZCkgey8vIHMKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncycpOwogICAgICAgICAgICAgICAgICAgIGlmIChhdXRvRmVlZEludGVydmFsID09IHVuZGVmaW5lZCkKICAgICAgICAgICAgICAgICAgICAgICAgYXV0b0ZlZWRJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRWYWwoMjEpOwogICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApOwogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGF1dG9GZWVkSW50ZXJ2YWwpOwogICAgICAgICAgICAgICAgICAgICAgICBhdXRvRmVlZEludGVydmFsID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZWZyZXNoKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGEua2V5Q29kZSA9PSAzMiAmJiBhLnNoaWZ0S2V5ICYmICJuaWNrIiAhPSBhLnRhcmdldC5pZCkgey8vIHMKICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnc3BhY2UnKTsKICAgICAgICAgICAgICAgICAgICB2YXIgbnVtYmVyID0gMDsKICAgICAgICAgICAgICAgICAgICBpZiAoYXV0b1NwbGl0SW50ZXJ2YWwgPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgICAgICAgICAgICBhdXRvU3BsaXRJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRWYWwoMTcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyKys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09IDcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGF1dG9TcGxpdEludGVydmFsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvU3BsaXRJbnRlcnZhbCA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApOwogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGF1dG9TcGxpdEludGVydmFsKTsKICAgICAgICAgICAgICAgICAgICAgICAgYXV0b1NwbGl0SW50ZXJ2YWwgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJlZnJlc2goKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5rZXlDb2RlID09IDY4ICYmICJuaWNrIiAhPSBhLnRhcmdldC5pZCkgey8vIEQKICAgICAgICAgICAgICAgICAgICBzdG9wTW92ZSA9ICFzdG9wTW92ZTsKICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdTVE9QTU9WRScpOwogICAgICAgICAgICAgICAgICAgIC8qCiAgICAJCQkJICogY29uc29sZS5sb2coJ0x0JyxMdCk7IGNvbnNvbGUubG9nKCdFdCcsRXQpOyBjb25zb2xlLmxvZygnVHQnLFR0KTsKICAgIAkJCQkgKiBjb25zb2xlLmxvZygnd3QnLHd0KTsgY29uc29sZS5sb2coJ1B0JyxQdCk7IGNvbnNvbGUubG9nKCdDdCcsQ3QpOwogICAgCQkJCSAqLwogICAgICAgICAgICAgICAgICAgIHJlZnJlc2goKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5rZXlDb2RlID09IDY5ICYmICJuaWNrIiAhPSBhLnRhcmdldC5pZCkgey8vIEUKICAgICAgICAgICAgICAgICAgICBpZiAoeHQpCiAgICAgICAgICAgICAgICAgICAgICAgIGJ0LnNlbmQoSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiA1CiAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICByZWZyZXNoKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGEua2V5Q29kZSA9PSA3MCAmJiAibmljayIgIT0gYS50YXJnZXQuaWQpIHsvLyBGCiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocSk7Ly9BR0FSQk9UT1ZIIHBhcyBvdWJsaWVyIG1vZGlmIHEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICB9OwogICAgICAgIHZhciBtYXhfY291bnQgPSAwOwogICAgICAgIHZhciBjb3VudCA9IDA7CiAgICAgICAgdmFyIGJ0ID0gdW5kZWZpbmVkOwogICAgICAgIHZhciBpcCA9IHVuZGVmaW5lZDsKICAgICAgICB2YXIgcm9vbSA9IHVuZGVmaW5lZDsKICAgICAgICB2YXIgc29ja2V0ID0gaW8uY29ubmVjdCgnd3M6Ly8xNzguMjU0LjIyLjcyOjgwODEnKTsKICAgICAgICB2YXIgY29ubmVjdGVkID0gZmFsc2U7CiAgICAgICAgdmFyIGNoYW5nZUdhbWVNb2RlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgaWYgKHh0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB7fTsKICAgICAgICAgICAgICAgICAgICBlLmFjdGlvbiA9IDE7CiAgICAgICAgICAgICAgICAgICAgLy9BR0FSQk9UT1ZIIG5lIHBhcyBvdWJsaWVyIGNoYW5nZXIgw6dhCiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXRSZWdpb24gPSBHICsgbGE7CiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXRJcCA9IGlwOwogICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0Um9vbSA9IHJvb207CgogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZW5kaW5nJywgZSk7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZWZyZXNoKCk7CiAgICAgICAgICAgIH07CiAgICAgICAgeHQgPSBmYWxzZTsKICAgICAgICAKICAgICAgICB2YXIgc2V0VHh0ID0gZnVuY3Rpb24gKGluZm9zLCBhZykgewogICAgICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1pbmlvbnMiKSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygndGltZW91dCcsaW5mb3MpOwogICAgICAgICAgICAgICAgICAgIHNldFR4dChpbmZvcywgYWcpOwogICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1pbmlvbnMiKTsKICAgICAgICAgICAgICAgIGlmIChhZykgewogICAgICAgICAgICAgICAgICAgIGlmIChiLnN0eWxlLmNzc1RleHQuaW5jbHVkZXMoJ2ZvbnQtc2l6ZScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGIuaW5uZXJIVE1MID0gaW5mb3MudHh0OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgYi5zdHlsZS5jc3NUZXh0LnJlcGxhY2UoJ2NvbG9yIDogcmVkJywgJ2NvbG9yOiBncmVlbicpOwogICAgICAgICAgICAgICAgICAgICAgICBiLnN0eWxlLmNzc1RleHQgKz0gImZvbnQtc2l6ZSA6IDE1MCU7IjsKICAgICAgICAgICAgICAgICAgICAgICAgYi5pbm5lckhUTUwgPSBpbmZvcy50eHQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBiLmlubmVySFRNTCA9IGluZm9zLnR4dDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHNvY2tldC5vbignY29ubmVjdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgY29ubmVjdGVkID0gdHJ1ZTsKICAgICAgICAgICAgc2V0VHh0KHsgInR4dCI6ICJELUJvdHMuY29tOiBDb25uZWN0ZWQgKE5vIEJvdHMgYWN0aXZlID8/KSIgfSwgZmFsc2UpOwogICAgICAgIH0pOwogICAgICAgIHNvY2tldC5lbWl0KCdsb2dpbicsIHsKICAgICAgICAgICAgInR5cGUiOiAiY291bnQiLAogICAgICAgICAgICAiY2xpZW50X3V1aWQiOiBjbGllbnRfdXVpZCwKICAgICAgICAgICAgInBhc3N3b3JkIjogcGFzc3dvcmQKICAgICAgICB9KTsKICAgICAgICBzb2NrZXQub24oJ2JvdHMtZm91bmQnLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICBtYXhfY291bnQgPSBkYXRhLmNvdW50OwogICAgICAgICAgICBzZXRCb3RzX3EoKTsKCiAgICAgICAgfSk7CiAgICAgICAgc29ja2V0Lm9uKCdzcGF3bi1jb3VudCcsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgIGNvdW50ID0gZGF0YS5jb3VudDsKICAgICAgICAgICAgc2V0Qm90c19xKCk7CiAgICAgICAgfSk7CiAgICAgICAgdmFyIG9wZW5Tb2NrZXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICghY29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICBzb2NrZXQgPSBpby5jb25uZWN0KCd3czovLzE3OC4yNTQuMjIuNzI6ODA4MScpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIG9wZW5Tb2NrZXQoKTsKICAgICAgICB2YXIgc2V0SW5mb3MgPSBmdW5jdGlvbiAodHh0LCBjbG9zZU1lc3MpIHsKICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInR4dCIpOwogICAgICAgICAgICBpZiAoZWwgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgIGVsLmlkID0gJ3R4dCc7CiAgICAgICAgICAgICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gImRpc3BsYXk6bm9uZTsiOwogICAgICAgICAgICAgICAgZWwuaW5uZXJUZXh0ID0gSlNPTi5zdHJpbmdpZnkoeyB0eHQ6ICcnLCBjbG9zZU1lc3M6IHRydWUgfSk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShlbC5pbm5lclRleHQpOwogICAgICAgICAgICBpZiAodHh0ICE9IHVuZGVmaW5lZCkKICAgICAgICAgICAgICAgIG9iai50eHQgPSB0eHQ7CiAgICAgICAgICAgIGlmIChjbG9zZU1lc3MgIT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgICAgb2JqLmNsb3NlTWVzcyA9IGNsb3NlTWVzczsKICAgICAgICAgICAgZWwuaW5uZXJUZXh0ID0gSlNPTi5zdHJpbmdpZnkob2JqKTsKICAgICAgICB9OwogICAgICAgIHZhciBnZXRJbmZvcyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInR4dCIpOwogICAgICAgICAgICBpZiAoZWwgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgIGVsLmlkID0gJ3R4dCc7CiAgICAgICAgICAgICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gImRpc3BsYXk6bm9uZTsiOwogICAgICAgICAgICAgICAgZWwuaW5uZXJUZXh0ID0gSlNPTi5zdHJpbmdpZnkoeyB0eHQ6ICcnLCBjbG9zZU1lc3M6IHRydWUgfSk7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlbC5pbm5lclRleHQpOwogICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShlbC5pbm5lclRleHQpOwogICAgICAgIH07CiAgICAgICAgdmFyIHJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB0ID0gd2luZG93Lmxhc3RNZXNzYWdlOwogICAgICAgICAgICBpZiAodCA9PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIGlmIChyb29tICE9IHVuZGVmaW5lZCAmJiByb29tLmxlbmd0aCA+IDEwKSB7CiAgICAgICAgICAgICAgICAkKCcjbXNndHh0JykuaHRtbCgnQk9UUyBPTkxZIFdPUksgSU4gUEFSVFkgTU9ERScpOwogICAgICAgICAgICAgICAgc2hvd1JlbWFpbmluZygpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0Lm5vcGUpIHsKICAgICAgICAgICAgICAgICQoJyNtc2d0eHQnKS5odG1sKCc8YSBocmVmPSJodHRwOi8vYWdhcmJvdC5vdmgiIHRhcmdldD0iX2JsYW5jIj5ObyBwbGFuIGFjdGl2ZSAmZ3Q7IGFnYXJib3Qub3ZoIChkaWQgeW91IHJlZnJlc2ggSVAgPyk8L2E+Jyk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodC5hbHJlYWR5Q29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICAkKCcjbXNndHh0JykuaHRtbCgnQWxyZWFkeSBvbiBhbm90aGVyIGdhbWUgKHJlZnJlc2ggcGFnZSknKTsKICAgICAgICAgICAgfSBlbHNlIGlmICh0LnNwZWNpYWwgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnc2V0dGluZyBzcGVjaWFsJyk7CiAgICAgICAgICAgICAgICAkKCcjbXNndHh0JykuaHRtbCh0LnNwZWNpYWwpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2FkaW5nc2V0ID09IHVuZGVmaW5lZCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWdhcmJvdF9sZWZ0Ym94JykgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnI2FnYXJib3RfbGVmdGJveCcpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAkKCcjaG90a2V5cycpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAvLyQoIi5hZ2FyYm90b3ZoX3Byb2dyZXNzLWJhciIpLmxvYWRpbmcoKTsKICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9hZGluZ3NldCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkKCcjbXNndHh0JykuaHRtbCgnJyk7CiAgICAgICAgICAgICAgICB3aW5kb3cuZXhwaXJlID0gdC5leHBpcmU7CiAgICAgICAgICAgICAgICB2YXIgZXhwaXJlID0gbmV3IERhdGUodC5leHBpcmUpOwogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2V4cGlyZSAnLHQuZXhwaXJlKTsKICAgICAgICAgICAgICAgIHZhciBib3RzQXZhaWxhYmxlID0gdC5ib3RzQXZhaWxhYmxlOwogICAgICAgICAgICAgICAgaWYgKCFib3RzQXZhaWxhYmxlKQogICAgICAgICAgICAgICAgICAgICQoJyNtc2d0eHQnKS5odG1sKCdObyBib3RzIGF2YWlsYWJsZS4uLiByZXRyeWluZycpOwogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gcmVkIEZGMzMzMwogICAgICAgICAgICAgICAgICAgIC8vIGdyZWVuIDMzRkYzMwoKICAgICAgICAgICAgICAgICAgICBpZiAodC5qb2luZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHR4dCA9ICdCb3RzICc7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmN1cnJlbnRCb3RzID09IHQubWF4Qm90cykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4dCArPSAnPHNwYW4gc3R5bGU9ImNvbG9yOiMzM0ZGMzMiPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4dCArPSAnPHNwYW4+JzsKICAgICAgICAgICAgICAgICAgICAgICAgdHh0ICs9IHQuY3VycmVudEJvdHMgKyAiIC8gIiArIHQubWF4Qm90cyArICc8L3NwYW4+JzsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2JvdHMnKS5odG1sKHR4dCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNtc2d0eHQnKS5odG1sKCdXYWl0aW5nIGZvciB5b3UgdG8gY2xpY2sgcGxheScpOwoKICAgICAgICAgICAgICAgICAgICAkKCcjcGluZycpLmh0bWwod2luZG93LnBpbmcgfHwgJz8nKTsKCgogICAgICAgICAgICAgICAgICAgIGlmIChhdXRvRmVlZEludGVydmFsID09IHVuZGVmaW5lZCkKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2F1dG9mZWVkJykucmVtb3ZlQ2xhc3MoJ2FnYXJib3RvdmhfZ3JlZW4nKS5hZGRDbGFzcygnYWdhcmJvdG92aF9yZWQnKTsKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNhdXRvZmVlZCcpLmFkZENsYXNzKCdhZ2FyYm90b3ZoX2dyZWVuJykucmVtb3ZlQ2xhc3MoJ2FnYXJib3RvdmhfcmVkJyk7CgogICAgICAgICAgICAgICAgICAgIGlmIChzdG9wTW92ZSkKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3N0b3Btb3ZlJykuYWRkQ2xhc3MoJ2FnYXJib3RvdmhfZ3JlZW4nKS5yZW1vdmVDbGFzcygnYWdhcmJvdG92aF9yZWQnKTsKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNzdG9wbW92ZScpLnJlbW92ZUNsYXNzKCdhZ2FyYm90b3ZoX2dyZWVuJykuYWRkQ2xhc3MoJ2FnYXJib3RvdmhfcmVkJyk7CgogICAgICAgICAgICAgICAgICAgIGlmICh0LmFsZ28gPT0gMSkKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2FsZ28nKS5odG1sKCc8c3BhbiBzdHlsZT0iY29sb3I6IzJFOUJCRiI+RUFUIFBFTExFVFM8L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodC5hbGdvID09IDIpCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNhbGdvJykuaHRtbCgnPHNwYW4gc3R5bGU9ImNvbG9yOiNFODY2RTgiPlJVTjwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0LmFsZ28gPT0gMykKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2FsZ28nKS5odG1sKCc8c3BhbiBzdHlsZT0iY29sb3I6IzQzREUyRiI+Q09NRSBUTyBNRUg8L3NwYW4+Jyk7CgogICAgICAgICAgICAgICAgICAgIHZhciBwZXJjZW50ID0gKHQuZWF0cyAvIHQuc3Bhd25zICogMTAwKTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ocGVyY2VudCkpCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnQgPSAwOwoKICAgICAgICAgICAgICAgICAgICAkKCcjZWZmaWNpZW5jeScpLmh0bWwoJ0VmZmljaWVuY3kgOiA8c3BhbiB0aXRsZT0iZWF0ZW4vc3Bhd25lZD1lZmZpY2llbmN5JSI+JyArIHQuZWF0cyArICcvJyArIHQuc3Bhd25zICsgJyAgPSAnICsgcGVyY2VudC50b0ZpeGVkKDIpICsgJyU8L3NwYW4+Jyk7CgogICAgICAgICAgICAgICAgICAgIGlmICh0LnBhcnR5RnVsbCkKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI21zZ3R4dCcpLmh0bWwoJ1BhcnR5IHByb2JhYmx5IGZ1bGwnKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKCF0LmpvaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHh0ID0gJ0pvaW4gdGhlIGdhbWUgYW5kIHRoZSBib3RzIHdpbGwgY29ubmVjdCAoJzsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb29tID09IHVuZGVmaW5lZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4dCArPSAnPz8/JzsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHh0ICs9IChyb29tLmxlbmd0aCA8IDEwID8gJ1BBUlRZJyA6ICdGRkEgTk9UIFdPUktJTkcnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHR4dCArPSAnKSc7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNtc2d0eHQnKS5odG1sKHR4dCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHNob3dSZW1haW5pbmcoKTsKICAgICAgICB9OwogICAgICAgIHZhciBfc2Vjb25kID0gMTAwMDsKICAgICAgICB2YXIgX21pbnV0ZSA9IF9zZWNvbmQgKiA2MDsKICAgICAgICB2YXIgX2hvdXIgPSBfbWludXRlICogNjA7CiAgICAgICAgdmFyIF9kYXkgPSBfaG91ciAqIDI0OwogICAgICAgIGZ1bmN0aW9uIHNob3dSZW1haW5pbmcoKSB7CiAgICAgICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY291bnRkb3duJykgPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICBpZiAod2luZG93LmV4cGlyZSA9PSB1bmRlZmluZWQgfHwgd2luZG93LmV4cGlyZSA9PSAwKQogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gbmV3IERhdGUod2luZG93LmV4cGlyZSkgLSBub3c7CiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IDApIHsKICAgICAgICAgICAgICAgIC8vY2xlYXJJbnRlcnZhbCh0aW1lcik7CiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdTRU5EIFRISVMgVE8gTkVFTCcsbmV3IERhdGUoKSxub3csbmV3IERhdGUod2luZG93LmV4cGlyZSksZGlzdGFuY2UpOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvdW50ZG93bicpLmlubmVySFRNTCA9ICdFWFBJUkVEISc7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGRheXMgPSBNYXRoLmZsb29yKGRpc3RhbmNlIC8gX2RheSk7CiAgICAgICAgICAgIHZhciBob3VycyA9IE1hdGguZmxvb3IoKGRpc3RhbmNlICUgX2RheSkgLyBfaG91cik7CiAgICAgICAgICAgIHZhciBtaW51dGVzID0gTWF0aC5mbG9vcigoZGlzdGFuY2UgJSBfaG91cikgLyBfbWludXRlKTsKICAgICAgICAgICAgdmFyIHNlY29uZHMgPSBNYXRoLmZsb29yKChkaXN0YW5jZSAlIF9taW51dGUpIC8gX3NlY29uZCk7CgogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY291bnRkb3duJykuaW5uZXJIVE1MID0gZGF5cyArICdkYXlzICc7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudGRvd24nKS5pbm5lckhUTUwgKz0gaG91cnMgKyAnaHJzICc7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudGRvd24nKS5pbm5lckhUTUwgKz0gbWludXRlcyArICdtaW5zICc7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudGRvd24nKS5pbm5lckhUTUwgKz0gc2Vjb25kcyArICdzZWNzJzsKICAgICAgICB9CiAgICAgICAgdmFyIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgey8vIEFHQVJCT1RPVkgKICAgICAgICAgICAgc2hvd1JlbWFpbmluZygpOwogICAgICAgIH0sIDEwMDApOwogICAgICAgIGZ1bmN0aW9uIGdvdE5ld0JhbGwoaWQpIHsKICAgICAgICAgICAgdmFyIGJhbGwgPSBudWxsOwogICAgICAgICAgICBmb3IgKGluZGV4IGluIHEpIHsvL0FHQVJCT1RPVkggcGFzIG91YmxpZXIgbW9kaWYgcQogICAgICAgICAgICAgICAgdmFyIGIgPSBxW2luZGV4XTsKICAgICAgICAgICAgICAgIGlmIChiLmlkID09IGlkKSB7CiAgICAgICAgICAgICAgICAgICAgYmFsbCA9IGI7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICh4dCkKICAgICAgICAgICAgICAgIGJ0LnNlbmQoSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgIGFjdGlvbjogMTAsCiAgICAgICAgICAgICAgICAgICAgJ2lkJzogaWQsCiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjb25zb2xlLmxvZygnTkVXQkFMTCcsIGlkLCBiYWxsKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTXlCYWxsKGlkKSB7CiAgICAgICAgICAgIGlmICh4dCkKICAgICAgICAgICAgICAgIGJ0LnNlbmQoSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgIGFjdGlvbjogMTIsCiAgICAgICAgICAgICAgICAgICAgJ2lkJzogaWQsCiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSRU1PVkUgQkFMTCcsIGlkKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaGV4VG9SZ2IoaGV4KSB7CiAgICAgICAgICAgIC8vIEV4cGFuZCBzaG9ydGhhbmQgZm9ybSAoZS5nLiAiMDNGIikgdG8gZnVsbCBmb3JtIChlLmcuICIwMDMzRkYiKQogICAgICAgICAgICB2YXIgc2hvcnRoYW5kUmVnZXggPSAvXiM/KFthLWZcZF0pKFthLWZcZF0pKFthLWZcZF0pJC9pOwogICAgICAgICAgICBoZXggPSBoZXgucmVwbGFjZShzaG9ydGhhbmRSZWdleCwgZnVuY3Rpb24gKG0sIHIsIGcsIGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiByICsgciArIGcgKyBnICsgYiArIGI7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IC9eIz8oW2EtZlxkXXsyfSkoW2EtZlxkXXsyfSkoW2EtZlxkXXsyfSkkL2kuZXhlYyhoZXgpOwogICAgICAgICAgICByZXR1cm4gcmVzdWx0ID8gewogICAgICAgICAgICAgICAgcjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksCiAgICAgICAgICAgICAgICBnOiBwYXJzZUludChyZXN1bHRbMl0sIDE2KSwKICAgICAgICAgICAgICAgIGI6IHBhcnNlSW50KHJlc3VsdFszXSwgMTYpCiAgICAgICAgICAgIH0gOiBudWxsOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBtYXBDb29yZHMobWlueCwgbWlueSwgbWF4eCwgbWF4eSkgewogICAgICAgICAgICB2YXIgYWIgPSBuZXcgQXJyYXlCdWZmZXIoMTcpOwogICAgICAgICAgICB2YXIgZHYgPSBuZXcgRGF0YVZpZXcoYWIpOwogICAgICAgICAgICBkdi5zZXRJbnQ4KDAsIDMpOwogICAgICAgICAgICBkdi5zZXRGbG9hdDMyKDEsIG1pbngpOwogICAgICAgICAgICBkdi5zZXRGbG9hdDMyKDUsIG1pbnkpOwogICAgICAgICAgICBkdi5zZXRGbG9hdDMyKDksIG1heHgpOwogICAgICAgICAgICBkdi5zZXRGbG9hdDMyKDEzLCBtYXh5KTsKICAgICAgICAgICAgaWYgKHh0KQogICAgICAgICAgICAgICAgYnQuc2VuZChhYik7CiAgICAgICAgfQogICAgICAgIHZhciBvZmZzZXRYID0gMDsKICAgICAgICB2YXIgb2Zmc2V0WSA9IDA7CiAgICAgICAgZnVuY3Rpb24gbWFwQ29vcmRzKG1pbl94LCBtaW5feSwgbWF4X3gsIG1heF95KSB7CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ21hcCcsbWF4X3gtbWluX3gpOwogICAgICAgICAgICBpZiAobWF4X3ggLSBtaW5feCA+IDE0MDAwKSB7CiAgICAgICAgICAgICAgICBvZmZzZXRYID0gbWluX3g7CiAgICAgICAgICAgICAgICBvZmZzZXRZID0gbWluX3k7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gaGV5KGJ1ZiwgeCwgeSkgewogICAgICAgICAgICBpZiAoc3RvcE1vdmUpIHsKICAgICAgICAgICAgICAgIHZhciBtaWRYID0gMDsKICAgICAgICAgICAgICAgIHZhciBtaWRZID0gMDsKICAgICAgICAgICAgICAgIHZhciBtaW5YID0gMDsKICAgICAgICAgICAgICAgIHZhciBtaW5ZID0gMDsKICAgICAgICAgICAgICAgIHZhciBtYXhYID0gMDsKICAgICAgICAgICAgICAgIHZhciBtYXhZID0gMDsKICAgICAgICAgICAgICAgIGZvciAoaW5kZXggaW4gcSkgey8vQUdBUkJPVE9WSCBwYXMgb3VibGllciBtb2RpZiBxCiAgICAgICAgICAgICAgICAgICAgdmFyIGJhbGwgPSBxW2luZGV4XTsvL0FHQVJCT1RPVkggcGFzIG91YmxpZXIgbW9kaWYgcQogICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1heFggPSBiYWxsLng7CiAgICAgICAgICAgICAgICAgICAgICAgIG1pblggPSBiYWxsLng7CiAgICAgICAgICAgICAgICAgICAgICAgIG1heFkgPSBiYWxsLnk7CiAgICAgICAgICAgICAgICAgICAgICAgIG1pblkgPSBiYWxsLnk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIGJhbGwueCk7CiAgICAgICAgICAgICAgICAgICAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBiYWxsLngpOwogICAgICAgICAgICAgICAgICAgICAgICBtYXhZID0gTWF0aC5tYXgobWF4WSwgYmFsbC55KTsKICAgICAgICAgICAgICAgICAgICAgICAgbWluWSA9IE1hdGgubWluKG1pblksIGJhbGwueSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbWlkWCA9IChtaW5YICsgbWF4WCkgLyAyOwogICAgICAgICAgICAgICAgbWlkWSA9IChtaW5ZICsgbWF4WSkgLyAyOwogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JlcGxhY2UnLHgseSwgJ3BhciAnLG1pZFgsbWlkWSk7CgogICAgICAgICAgICAgICAgYnVmLnNldEludDMyKDEsIG1pZFgsICEwKTsKICAgICAgICAgICAgICAgIGJ1Zi5zZXRJbnQzMig1LCBtaWRZLCAhMCk7CiAgICAgICAgICAgICAgICBidWYuc2V0VWludDMyKDksIDAsICEwKTsKICAgICAgICAgICAgICAgIHNlbmRCdWZmZXIoYnVmKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGJ1Zi5zZXRJbnQzMigxLCB4LCAhMCk7CiAgICAgICAgICAgICAgICBidWYuc2V0SW50MzIoNSwgeSwgITApOwogICAgICAgICAgICAgICAgYnVmLnNldFVpbnQzMig5LCAwLCAhMCk7CiAgICAgICAgICAgICAgICBzZW5kQnVmZmVyKGJ1Zik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9BR0FSQk9UT1ZIIGNoYW5nZXIgYXVzc2kgw6dhIHNpIG1lcCBkZSBzY3JpcHQKICAgICAgICAgICAgLy94IC8gdmEgPSAoWCAtIHQgLyAyKSAvIGwgKyB5OwogICAgICAgICAgICAvL3kgLyB3YSA9IChZIC0gdSAvIDIpIC8gbCArIHoKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnQ0FMQ1VMIFggPSAnLFgsdCxsLHksJ3Rlc3QnLChYIC0gdCAvIDIpIC8gbCk7CiAgICAgICAgICAgIHZhciBhYiA9IG5ldyBBcnJheUJ1ZmZlcigxICsgNCArIDQgKyA0ICsgNCArIHEubGVuZ3RoICogNCAqIDQgKyAzKTsKICAgICAgICAgICAgdmFyIGR2ID0gbmV3IERhdGFWaWV3KGFiKTsKICAgICAgICAgICAgdmFyIG9mZnNldCA9IDA7CiAgICAgICAgICAgIGR2LnNldEludDgob2Zmc2V0LCAyKTsKICAgICAgICAgICAgb2Zmc2V0ICs9IDE7CiAgICAgICAgICAgIGR2LnNldEZsb2F0MzIob2Zmc2V0LCB4IC0gb2Zmc2V0WCk7CiAgICAgICAgICAgIG9mZnNldCArPSA0OwogICAgICAgICAgICBkdi5zZXRGbG9hdDMyKG9mZnNldCwgeSAtIG9mZnNldFkpOwogICAgICAgICAgICBvZmZzZXQgKz0gNDsKICAgICAgICAgICAgLyogTWEgPSBhLmdldEZsb2F0NjQoZCwgITApOwogICAgICAgICAgICAgICAgZCArPSA4OwogICAgICAgICAgICAgICAgTmEgPSBhLmdldEZsb2F0NjQoZCwgITApOwogICAgICAgICAgICAgICAgZCArPSA4OwogICAgICAgICAgICAgICAgT2EgPSBhLmdldEZsb2F0NjQoZCwgITApOwogICAgICAgICAgICAgICAgZCArPSA4OwogICAgICAgICAgICAgICAgUGEgPSBhLmdldEZsb2F0NjQoZCwgITApOwogICAgICAgICAgICAgICAgZCArPSA4OwogICAgICAgICAgICAgICAgcGEgPSAoT2EgKyBNYSkgLyAyOwogICAgICAgICAgICAgICAgcWEgPSAoUGEgKyBOYSkgLyAyOyovCiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ0NFTlRFUj8nLHBhLHFhKTsKICAgICAgICAgICAgZHYuc2V0RmxvYXQzMihvZmZzZXQsIHBhKTsKICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7CiAgICAgICAgICAgIGR2LnNldEZsb2F0MzIob2Zmc2V0LCBxYSk7CiAgICAgICAgICAgIG9mZnNldCArPSA0OwogICAgICAgICAgICBzb2NrZXQuZW1pdCgncG9zJywgewogICAgICAgICAgICAgICAgJ3knOiB5IC0gb2Zmc2V0WSwKICAgICAgICAgICAgICAgICd4JzogeCAtIG9mZnNldFgsCiAgICAgICAgICAgICAgICAnY2xpZW50X3V1aWQnOiBjbGllbnRfdXVpZAogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIGJhbGwgPSBxWzBdOwogICAgICAgICAgICBpZiAoYmFsbCAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICB2YXIgcmdiID0gaGV4VG9SZ2IoYmFsbC5jb2xvci5zdWJzdHIoMSkpOwogICAgICAgICAgICAgICAgdmFyIGRlY0NvbG9yID0gKHJnYi5yIDw8IDE2KSArIChyZ2IuZyA8PCA4KSArIHJnYi5iOwogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmdiJyxyZ2IsZGVjQ29sb3IsJ2JhbGxpZCcsYmFsbC5pZCk7CiAgICAgICAgICAgICAgICBkdi5zZXRVaW50OChvZmZzZXQsIHJnYi5yKTsKICAgICAgICAgICAgICAgIG9mZnNldCArPSAxOwogICAgICAgICAgICAgICAgZHYuc2V0VWludDgob2Zmc2V0LCByZ2IuZyk7CiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMTsKICAgICAgICAgICAgICAgIGR2LnNldFVpbnQ4KG9mZnNldCwgcmdiLmIpOwogICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDE7CiAgICAgICAgICAgICAgICBmb3IgKGluZGV4IGluIHEpIHsvL0FHQVJCT1RPVkggcGFzIG91YmxpZXIgbW9kaWYgcQogICAgICAgICAgICAgICAgICAgIGJhbGwgPSBxW2luZGV4XTsvL0FHQVJCT1RPVkggcGFzIG91YmxpZXIgbW9kaWYgcQogICAgICAgICAgICAgICAgICAgIGR2LnNldFVpbnQzMihvZmZzZXQsIGJhbGwuaWQpOwogICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSA0OwogICAgICAgICAgICAgICAgICAgIGR2LnNldEZsb2F0MzIob2Zmc2V0LCBiYWxsLngpOwogICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSA0OwogICAgICAgICAgICAgICAgICAgIGR2LnNldEZsb2F0MzIob2Zmc2V0LCBiYWxsLnkpOwogICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSA0OwogICAgICAgICAgICAgICAgICAgIGR2LnNldEludDMyKG9mZnNldCwgYmFsbC5zaXplKTsKICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDsKICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjb2xvcicsYmFsbC5jb2xvcik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHh0KQogICAgICAgICAgICAgICAgICAgIGJ0LnNlbmQoYWIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdtb3VzZSBpbiAnLHgseSwndGVzdCcseC13aW5kb3cubWFwLm1pblgseS13aW5kb3cubWFwLm1pblksJ21hcCcsd2luZG93Lm1hcCk7CgogICAgICAgIH07CiAgICAgICAgaW50ZXJ2YWxfaWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICh3cyA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGxhc3Rfd3MgIT09IHdzKSB7CiAgICAgICAgICAgICAgICBsYXN0X3dzID0gd3M7CiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdCgicGFydHkiLCB7CiAgICAgICAgICAgICAgICAgICAgImlwIjogd3MsCiAgICAgICAgICAgICAgICAgICAgImNsaWVudF91dWlkIjogY2xpZW50X3V1aWQsCiAgICAgICAgICAgICAgICAgICAgInBhc3N3b3JkIjogcGFzc3dvcmQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NFTkRFRCBQQVJUWSAhICcgKyBjbGllbnRfdXVpZCArICcsICcgKyBwYXNzd29yZCk7CiAgICAgICAgICAgIH0KICAgICAgICB9LCAxMDAwKTsKICAgICAgICB2YXIgYmFzZVNldE5pY2sgPSB3aW5kby5zZXROaWNrOwogICAgICAgIHdpbmRvLnNldE5pY2sgPSBmdW5jdGlvbiAobikgewogICAgICAgICAgICBiYXNlU2V0TmljayhuKTsKICAgICAgICAgICAgaWYgKHh0KSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IHt9OwogICAgICAgICAgICAgICAgZS5hY3Rpb24gPSAzOwogICAgICAgICAgICAgICAgZS5wbGF5ZXJOYW1lID0gbjsKICAgICAgICAgICAgICAgIGJ0LnNlbmQoSlNPTi5zdHJpbmdpZnkoZSkpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIC8vIEVORCBDVVNUT00KICAgIH0KfSkod2luZG93LCB3aW5kb3cualF1ZXJ5KTsK';

var removed = false;

var d = function(a) {
	if (a.src.indexOf('main_out.js') >= 0) {
		window.ok = true;
		a.parentNode.removeChild(a);
		removed = true;
		console.log('AGARBOT - removed their script');
		var b = document.createElement('script');
		b.innerHTML = window.atob(engine);
		document.head.appendChild(b)
		console.log('AGARBOTDEBUG - added ours');
	}
};
var observer = new window.WebKitMutationObserver(function(b) {
	b.forEach(function(a) {
		for (var i = 0; i < a.addedNodes.length; ++i) {
			try {
				d(a.addedNodes[i]);
			} catch (e) {
			}
		}
	});
});
observer.observe(window.document, {
	subtree : true,
	childList : true,
	attribute : false
});
var x = false;
window.onload = function() {
	$("span[data-itr=option_show_mass]").prev()[0].checked = true;
	// setShowMass(true);
	var a = document.getElementById('gamemode').getElementsByTagName('option');
	if (a.length > 0) {
		for (var i = 0; i < a.length; i++) {
			if (a[i].getAttribute('data-itr') != 'party') {
				a[i].innerHTML += ' (Bots not working)';
			}
		}
	}
	if (!document.contains(document.getElementById('minions'))) {
		var b = document.createElement('div');
		b.id = 'minions';
		b.style.cssText = "position: absolute;top: 10px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: red;  background-color: black;border-radius: 15px;z-index:9999; ";
		if (window.infos == undefined)
			window.infos = 'D-Bots.com : connecting... (try to refresh your page)';
		b.innerHTML = window.infos;
        var button = document.createElement('button');
        
        button.onclick = function () {
            var key_field = document.getElementById('key_field');   
            key_ = key_field.value.trim();
            key = key_.split(':');
            
            if (key.length == 4 && key[0].length == 4 && key[1].length == 4 && key[2].length == 4 && key[3].length == 4) {
                localStorage.setItem('key', key_field.value);
                key_field.innerHTML = '';
                var b = document.getElementById('key');
                b.innerHTML = 'NEW KEY !! Refresh Page !';
            } else {
                alert('Pls enter the key in format: xxxx:xxxx:xxxx:xxxx !');
            }
            
        };
        var txt = document.createTextNode('Set Key');
        button.appendChild(txt);
        document.body.appendChild(button);
        var key_field = document.createElement('input');
        key_field.id = 'key_field';
        key_field.style.cssText = "position: absolute;top: 100px;left: 87px;padding: 0 8px;font-family: 'Ubuntu'; color: red;  background-color: black;border-radius: 15px;z-index:9999; ";
        
        button.id = 'send_key';
        button.style.cssText = "position: absolute;top: 100px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: red;  background-color: black;border-radius: 15px;z-index:9999; ";
        document.body.appendChild(key_field);
        
		document.body.appendChild(b);
		/*
		 * setTimeout(function(){ b.innerHTML = ''; },15000);
		 */
	}
    
    var key = localStorage.getItem('key');
    if (!document.contains(document.getElementById('key'))) {
		var b = document.createElement('div');
		b.id = 'key';
		b.style.cssText = "position: absolute;top: 50px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: red;  background-color: black;border-radius: 15px;z-index:9999; ";
        if ( key == null ) {
            b.innerHTML = 'PLS enter your key !';
        } else {
            b.innerHTML = 'Current Key: ' + key;
        }
		document.body.appendChild(b);		
	}
    if (!document.contains(document.getElementById('hide'))) {
		var b = document.createElement('button');
		b.id = 'hide';
        b.onclick = function() {
            x = !x;
            var k = document.getElementById('key');
            if(x) {
                k.innerHTML = "Current Key: -Hide-";
            }
            else {
                k.innerHTML = "Current Key: " + key;
            }
        };
        var txt = document.createTextNode('Hide Key (for recording purpose)');
        b.style.cssText = "position: absolute;top: 75px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: red;  background-color: black;border-radius: 15px;z-index:9999; ";
        b.appendChild(txt);
		
        
		document.body.appendChild(b);		
	}
    
	$("span[data-itr=instructions_w]")
			.append(
					'<br /><span style="font-size=xx-large;color:red;font-weight:bold">BOT INFO:</span><br />No plan active ? Check that you have correctly updated your IP ?<br />Press <b>R</b> to eject mass from your bot<br />Press <b>E</b> to split your bot (<b>Shift+E</b> fastSplit bots)<br />Press <b>D</b> to stop moving<br />Press <b>Shift+space</b> to fast split<br />Features : Infinite zoom<br />')
			.append(
					'<span style="color:red">FFA WITH BOTS IS NOT WORKING</span><br />You need to enter the game for the bots to connect,if the bot isn\'t working try to refresh the page<br /><br /><a href="http://d-bots.com">D-Bots.com</a> Disclaimer : <br />Remember that we have no link of any sort with agar.io and the bots can suddenly stop working if agar.io update its game. We will try our best to have our bot solution working and we won\'t refund you if its not.');
	$('#openfl-overlay').remove()
};

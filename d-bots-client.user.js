// ==UserScript==
// @name         d-bots-client
// @namespace    http://github.com/d-bots-client/
// @version      0.01
// @description  to be writen
// @author       David
// @license      
// @match        http://agar.io/*
// @require      https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.4/socket.io.min.js
// @grant        none
// @run-at       document-start
// ==/UserScript==

//http://agar.io/img/background.png

var engine = '';

var removed = false;

var d = function(a) {
	if (a.src.indexOf('main_out.js') >= 0) {
		window.ok = true;
		a.parentNode.removeChild(a);
		removed = true;
		console.log('AGARBOT - removed their script');
		var b = document.createElement('script');
		b.innerHTML = window.atob(engine);
		document.head.appendChild(b)
		console.log('AGARBOTDEBUG - added ours');
	}
};
var observer = new window.WebKitMutationObserver(function(b) {
	b.forEach(function(a) {
		for (var i = 0; i < a.addedNodes.length; ++i) {
			try {
				d(a.addedNodes[i]);
			} catch (e) {
			}
		}
	});
});
observer.observe(window.document, {
	subtree : true,
	childList : true,
	attribute : false
});
window.onload = function() {
	$("span[data-itr=option_show_mass]").prev()[0].checked = true;
	// setShowMass(true);
	var a = document.getElementById('gamemode').getElementsByTagName('option');
	if (a.length > 0) {
		for (var i = 0; i < a.length; i++) {
			if (a[i].getAttribute('data-itr') != 'party') {
				a[i].innerHTML += ' (Bots not working)';
			}
		}
	}
	if (!document.contains(document.getElementById('minions'))) {
		var b = document.createElement('div');
		b.id = 'minions';
		b.style.cssText = "position: absolute;top: 10px;left: 10px;padding: 0 8px;font-family: 'Ubuntu';color: green;background-color: rgba(55, 143, 206, 0.3);border-radius: 15px;z-index:9999";
		if (window.infos == undefined)
			window.infos = 'D-Bots.com : connecting... (try to refresh your page)';
		b.innerHTML = window.infos;
		document.body.appendChild(b);
		/*
		 * setTimeout(function(){ b.innerHTML = ''; },15000);
		 */
	}
	$("span[data-itr=instructions_w]")
			.append(
					'<br /><span style="font-size=xx-large;color:red;font-weight:bold">BOT INFO:</span><br />No plan active ? Check that you have correctly updated your IP ?<br />Press <b>C</b> to eject mass from your bot<br />Press <b>X</b> to split your bot (<b>Shift+X</b> fastSplit bots)<br />Press <b>S</b> to auto feed<br />Press <b>D</b> to stop moving<br />Press <b>Shift+space</b> to fast split<br />Features : Infinite zoom<br />')
			.append(
					'<span style="color:red">FFA WITH BOTS IS NOT WORKING</span><br />You need to enter the game for the bots to connect,if the bot isn\'t working try to refresh the page<br /><br /><a href="http://agarbot.ovh">AgarBot.ovh</a> Disclaimer : <br />Remember that we have no link of any sort with agar.io and the bots can suddenly stop working if agar.io update its game. We will try our best to have our bot solution working and we won\'t refund you if its not. If you encounter any problem come to our <a href="http://chat.agarbot.ovh" target="_blank">chat.agarbot.ovh</a>');
	$('#openfl-overlay').remove()
};

// ==UserScript==
// @name         d-bots-client
// @namespace    http://github.com/d-bots-client/
// @version      0.01
// @description  to be writen
// @author       David
// @license      
// @match        http://agar.io/*
// @require      https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.4.4/socket.io.min.js
// @grant        none
// @run-at       document-start
// ==/UserScript==

//http://agar.io/img/background.png
var engine = 'CiAgICAoZnVuY3Rpb24gKGMsIGUpIHsKCiAgICAgICAgdmFyIGNvdW50ID0gMDsKICAgICAgICBmdW5jdGlvbiByZW1vdmVNeUJhbGwoaWQpIHsKICAgICAgICAgICAgaWYgKHh0KQogICAgICAgICAgICAgICAgYnQuc2VuZChKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAxMiwKICAgICAgICAgICAgICAgICAgICAnaWQnOiBpZCwKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgY29uc29sZS5sb2coJ1JFTU9WRSBCQUxMJywgaWQpOwogICAgICAgIH0KCgogICAgICAgIGZ1bmN0aW9uIHVhKGEsIGIpIHsKICAgICAgICAgICAgaWYgKGIpIHsKICAgICAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGU7CiAgICAgICAgICAgICAgICBkLnNldFRpbWUoZC5nZXRUaW1lKCkgKyA4NjRFNSAqIGIpOwogICAgICAgICAgICAgICAgZCA9ICI7IGV4cGlyZXM9IiArIGQudG9HTVRTdHJpbmcoKQogICAgICAgICAgICB9IGVsc2UgZCA9ICIiOwogICAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSAiYWdhcmlvX3JlZGlyZWN0PSIgKyBhICsgZCArICI7IHBhdGg9LyIKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHRjKCkgewogICAgICAgICAgICBmb3IgKHZhciBhID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCI7IiksIGIgPSAwOyBiIDwgYS5sZW5ndGg7IGIrKykgewogICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IGFbYl07CiAgICAgICAgICAgICAgICAgICAgIiAiID09IGQuY2hhckF0KDApIDspIGQgPSBkLnN1YnN0cmluZygxLCBkLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBpZiAoMCA9PSBkLmluZGV4T2YoImFnYXJpb19yZWRpcmVjdD0iKSkgcmV0dXJuIGQuc3Vic3RyaW5nKDE2LCBkLmxlbmd0aCkKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gbnVsbAogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gSWIoKSB7CiAgICAgICAgICAgIGMub25rZXlkb3duID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgIC8vQUdBUkJPVE9WSCBDRSBDT0RFIEEgUkFQQVRSSUVSIERBTlMgTk9UUkVLRVlET1dOCiAgICAgICAgICAgICAgICBpZiAoYS5rZXlDb2RlID09IDY5KSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VtaXQgc3BsaXQgISB3aXRoIGlwOiAnKTsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoYS5rZXlDb2RlID09IDgyKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VtaXQgZmVlZCAhd2l0aCBpcDogJyk7CgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgMzIgIT0gYS5rZXlDb2RlIHx8IHZhIHx8ICgibmljayIgIT0gYS50YXJnZXQuaWQgJiYgYS5wcmV2ZW50RGVmYXVsdCgpLCBlYigpLCB2YSA9ICEwKTsKICAgICAgICAgICAgICAgIDgxID09IGEua2V5Q29kZSAmJiAoWCgxOCksIHdhID0gITApOwogICAgICAgICAgICAgICAgODcgIT0gYS5rZXlDb2RlIHx8IHhhIHx8IChKYigpLCB4YSA9ICEwKTsKICAgICAgICAgICAgICAgIDI3ID09IGEua2V5Q29kZSAmJiAoYS5wcmV2ZW50RGVmYXVsdCgpLCB5YSgzMDApLCBlKCIjb2ZlcndhbGxDb250YWluZXIiKS5pcygiOnZpc2libGUiKSAmJiBjLmNsb3NlT2ZmZXJ3YWxsKCksIGUoIiN2aWRlb0NvbnRhaW5lciIpLmlzKCI6dmlzaWJsZSIpICYmIGMuY2xvc2VWaWRlb0NvbnRhaW5lcigpKQogICAgICAgICAgICB9OwogICAgICAgICAgICBjLm9ua2V5dXAgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgMzIgPT0gYS5rZXlDb2RlICYmICh2YSA9ICExKTsKICAgICAgICAgICAgICAgIDg3ID09IGEua2V5Q29kZSAmJiAoeGEgPSAhMSk7CiAgICAgICAgICAgICAgICA4MSA9PSBhLmtleUNvZGUgJiYgd2EgJiYgKFgoMTkpLCB3YSA9ICExKQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBLYihhKSB7CiAgICAgICAgICAgIGEucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgLy8gQUdBUkJPVE9WSAogICAgICAgICAgICBQICo9IE1hdGgucG93KC45LCBhLndoZWVsRGVsdGEgLyAtMTIwIHx8IGEuZGV0YWlsIHx8IDApOwogICAgICAgICAgICBpZiAoMSA8IFApCiAgICAgICAgICAgICAgICBQID0gMTsKICAgICAgICAgICAgLyoKICAgICAgICAgICAgUCAqPSBNYXRoLnBvdyguOSwgYS53aGVlbERlbHRhIC8gLTEyMCB8fCBhLmRldGFpbCB8fCAwKTsKICAgICAgICAgICAgMSA+IFAgJiYgKFAgPSAxKTsKICAgICAgICAgICAgUCA+IDQgLyBsICYmIChQID0gNCAvIGwpKi8KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHVjKCkgewogICAgICAgICAgICBpZiAoLjQgPiBsKSBpYSA9IG51bGw7CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgYiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgZCA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgYyA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSwgZyA9IDA7IGcgPCBBLmxlbmd0aDsgZysrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBBW2ddOwogICAgICAgICAgICAgICAgICAgICFlLlIoKSB8fCBlLlYgfHwgMjAgPj0gZS5zaXplICogbCB8fCAoYSA9IE1hdGgubWluKGUueCAtIGUuc2l6ZSwgYSksIGIgPSBNYXRoLm1pbihlLnkgLSBlLnNpemUsIGIpLCBkID0gTWF0aC5tYXgoZS54ICsgZS5zaXplLCBkKSwgYyA9IE1hdGgubWF4KGUueSArIGUuc2l6ZSwgYykpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpYSA9IHZjLmluaXQoewogICAgICAgICAgICAgICAgICAgIHphOiBhIC0gMTAsCiAgICAgICAgICAgICAgICAgICAgQWE6IGIgLSAxMCwKICAgICAgICAgICAgICAgICAgICB4YTogZCArIDEwLAogICAgICAgICAgICAgICAgICAgIHlhOiBjICsgMTAsCiAgICAgICAgICAgICAgICAgICAgSGE6IDIsCiAgICAgICAgICAgICAgICAgICAgSWE6IDQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8IEEubGVuZ3RoOyBnKyspCiAgICAgICAgICAgICAgICAgICAgaWYgKGUgPSBBW2ddLCBlLlIoKSAmJiAhKDIwID49IGUuc2l6ZSAqIGwpKQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGEgPSAwOyBhIDwgZS5hLmxlbmd0aDsgKythKSBiID0gZS5hW2FdLngsIGQgPSBlLmFbYV0ueSwgYiA8IHkgLSByIC8gMiAvIGwgfHwgZCA8IHogLSB0IC8gMiAvIGwgfHwgYiA+IHkgKyByIC8gMiAvIGwgfHwgZCA+IHogKyB0IC8gMiAvIGwgfHwgaWEudGEoZS5hW2FdKQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBmYigpIHsKICAgICAgICAgICAgemEgPSAoWSAtIHIgLyAyKSAvIGwgKyB5OwogICAgICAgICAgICBBYSA9IChaIC0gdCAvIDIpIC8gbCArIHoKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIExiKCkgewogICAgICAgICAgICBudWxsID09IEJhICYmIChCYSA9IHt9LCBlKCIjcmVnaW9uIikuY2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBhID0gZSh0aGlzKSwKICAgICAgICAgICAgICAgICAgICBiID0gYS52YWwoKTsKICAgICAgICAgICAgICAgIGIgJiYgKEJhW2JdID0gYS50ZXh0KCkpCiAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgZS5nZXQoQ2EgKyAiaW5mbyIsIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICB2YXIgYiA9IHt9LAogICAgICAgICAgICAgICAgICAgIGQ7CiAgICAgICAgICAgICAgICBmb3IgKGQgaW4gYS5yZWdpb25zKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBkLnNwbGl0KCI6IilbMF07CiAgICAgICAgICAgICAgICAgICAgYltjXSA9IGJbY10gfHwgMDsKICAgICAgICAgICAgICAgICAgICBiW2NdICs9IGEucmVnaW9uc1tkXS5udW1QbGF5ZXJzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmb3IgKGQgaW4gYikgZSgnI3JlZ2lvbiBvcHRpb25bdmFsdWU9IicgKyBkICsgJyJdJykudGV4dChCYVtkXSArICIgKCIgKyBiW2RdICsgIiBwbGF5ZXJzKSIpCiAgICAgICAgICAgIH0sICJqc29uIikKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIE1iKCkgewogICAgICAgICAgICBlKCIjYWRzQm90dG9tIikuaGlkZSgpOwogICAgICAgICAgICBlKCIjb3ZlcmxheXMiKS5oaWRlKCk7CiAgICAgICAgICAgIGUoIiNzdGF0cyIpLmhpZGUoKTsKICAgICAgICAgICAgZSgiI21haW5QYW5lbCIpLmhpZGUoKTsKICAgICAgICAgICAgYWEgPSBqYSA9ICExOwogICAgICAgICAgICBOYigpOwogICAgICAgICAgICBjLmRlc3Ryb3lBZChjLmFkU2xvdHMuYWEpOwogICAgICAgICAgICBjLmRlc3Ryb3lBZChjLmFkU2xvdHMuYWMpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBEYShhKSB7CiAgICAgICAgICAgIGEgJiYgKGEgPT0gRyA/IGUoIi5idG4tbmVlZHMtc2VydmVyIikucHJvcCgiZGlzYWJsZWQiLCAhMSkgOiAoZSgiI3JlZ2lvbiIpLnZhbCgpICE9IGEgJiYgZSgiI3JlZ2lvbiIpLnZhbChhKSwgRyA9IGMubG9jYWxTdG9yYWdlLmxvY2F0aW9uID0gYSwgZSgiLnJlZ2lvbi1tZXNzYWdlIikuaGlkZSgpLCBlKCIucmVnaW9uLW1lc3NhZ2UuIiArIGEpLnNob3coKSwgZSgiLmJ0bi1uZWVkcy1zZXJ2ZXIiKS5wcm9wKCJkaXNhYmxlZCIsICExKSwgZ2IgJiYgUSgpKSkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHlhKGEpIHsKICAgICAgICAgICAgamEgfHwgYWEgfHwgKEVhID8gZSgiLmJ0bi1zcGVjdGF0ZSIpLnByb3AoImRpc2FibGVkIiwgITApIDogZSgiLmJ0bi1zcGVjdGF0ZSIpLnByb3AoImRpc2FibGVkIiwgITEpLCBOID0gbnVsbCwgaGIgfHwgKGUoIiNhZHNCb3R0b20iKS5zaG93KCksIGUoIiNnMzAweDI1MCIpLmhpZGUoKSwgZSgiI2EzMDB4MjUwIikuc2hvdygpLCBlKCIjZzcyOHg5MCIpLmhpZGUoKSwgZSgiI2E3Mjh4OTAiKS5zaG93KCkpLCBjLnJlZnJlc2hBZChoYiA/IGMuYWRTbG90cy5hYyA6IGMuYWRTbG90cy5hYSksIGhiID0gITEsIDFFMyA+IGEgJiYgKEIgPSAxKSwgamEgPSAhMCwgZSgiI21haW5QYW5lbCIpLnNob3coKSwgMCA8IGEgPyBlKCIjb3ZlcmxheXMiKS5mYWRlSW4oYSkgOiBlKCIjb3ZlcmxheXMiKS5zaG93KCkpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBrYShhKSB7CiAgICAgICAgICAgIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtZ2FtZW1vZGUiLCBhKTsKICAgICAgICAgICAgbGEgPSBhOwogICAgICAgICAgICBlKCIjZ2FtZW1vZGUiKS52YWwoYSkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIE5iKCkgewogICAgICAgICAgICBlKCIjcmVnaW9uIikudmFsKCkgPyBjLmxvY2FsU3RvcmFnZS5sb2NhdGlvbiA9IGUoIiNyZWdpb24iKS52YWwoKSA6IGMubG9jYWxTdG9yYWdlLmxvY2F0aW9uICYmIGUoIiNyZWdpb24iKS52YWwoYy5sb2NhbFN0b3JhZ2UubG9jYXRpb24pOwogICAgICAgICAgICBlKCIjcmVnaW9uIikudmFsKCkgPyBlKCIjbG9jYXRpb25Lbm93biIpLmFwcGVuZChlKCIjcmVnaW9uIikpIDogZSgiI2xvY2F0aW9uVW5rbm93biIpLmFwcGVuZChlKCIjcmVnaW9uIikpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpYihhKSB7CiAgICAgICAgICAgICJlbnZfbG9jYWwiIGluIEVudkNvbmZpZyA/ICJ0cnVlIiA9PSBFbnZDb25maWcubG9hZF9sb2NhbF9jb25maWd1cmF0aW9uID8gYy5NQy51cGRhdGVDb25maWd1cmF0aW9uSUQoImJhc2UiKSA6IGMuTUMudXBkYXRlQ29uZmlndXJhdGlvbklEKEVudkNvbmZpZy5jb25maWdJRCkgOiBjLk1DLnVwZGF0ZUNvbmZpZ3VyYXRpb25JRChhKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gd2MoKSB7CiAgICAgICAgICAgICJjb25maWdJRCIgaW4gRCA/IGliKEQuY29uZmlnSUQpIDogZS5nZXQoQ2EgKyAiZ2V0TGF0ZXN0SUQiLCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgaWIoYSk7CiAgICAgICAgICAgICAgICBjLmxvY2FsU3RvcmFnZS5sYXN0X2NvbmZpZ19pZCA9IGEKICAgICAgICAgICAgfSkuZmFpbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgYTsKICAgICAgICAgICAgICAgIGlmIChhID0gImxhc3RfY29uZmlnX2lkIiBpbiBjLmxvY2FsU3RvcmFnZSkgYSA9IGMubG9jYWxTdG9yYWdlLmxhc3RfY29uZmlnX2lkLCBhID0gIShudWxsID09IGEgfHwgdm9pZCAwID09IGEgfHwgIiIgPT09IGEpOwogICAgICAgICAgICAgICAgYSAmJiAoYSA9IGMubG9jYWxTdG9yYWdlLmxhc3RfY29uZmlnX2lkLCBjb25zb2xlLmxvZygiRmFsbGJhY2sgdG8gc3RvcmVkIGNvbmZpZ0lEOiAiICsgYSksIGliKGEpKQogICAgICAgICAgICB9KQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24geGMoKSB7CiAgICAgICAgICAgIGUuZ2V0KGpiICsgIi8vZ2MuYWdhci5pbyIsIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICB2YXIgYiA9IGEuc3BsaXQoIiAiKTsKICAgICAgICAgICAgICAgIGEgPSBiWzBdOwogICAgICAgICAgICAgICAgYiA9IGJbMV0gfHwgIiI7IC0xID09IFsiVUEiXS5pbmRleE9mKGEpICYmIE9iLnB1c2goInVzc3IiKTsKICAgICAgICAgICAgICAgIG1hLmhhc093blByb3BlcnR5KGEpICYmICgic3RyaW5nIiA9PSB0eXBlb2YgbWFbYV0gPyBHIHx8IERhKG1hW2FdKSA6IG1hW2FdLmhhc093blByb3BlcnR5KGIpICYmIChHIHx8IERhKG1hW2FdW2JdKSkpCiAgICAgICAgICAgIH0sICJ0ZXh0IikKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFIoYSkgewogICAgICAgICAgICByZXR1cm4gYy5pMThuW2FdIHx8IGMuaTE4bl9kaWN0LmVuW2FdIHx8IGEKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFBiKCkgewogICAgICAgICAgICB2YXIgYSA9ICsra2I7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJGaW5kICIgKyBHICsgbGEpOwogICAgICAgICAgICBRYigpOwogICAgICAgICAgICBlLmFqYXgoQ2EgKyAiZmluZFNlcnZlciIsIHsKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkZhaWxlZCB0byBnZXQgc2VydmVyLiBXaWxsIHJldHJ5IGluIDMwIHNlY29uZHMiKTsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KFBiLCAzRTQpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoYSA9PSBrYikgewogICAgICAgICAgICAgICAgICAgICAgICBiLmFsZXJ0ICYmIGFsZXJ0KGIuYWxlcnQpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGIuaXA7CiAgICAgICAgICAgICAgICAgICAgICAgICJnYW1lX3NlcnZlcl9wb3J0IiBpbiBFbnZDb25maWcgJiYgKGQgPSBjLmxvY2F0aW9uLmhvc3RuYW1lICsgIjoiICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVudkNvbmZpZy5nYW1lX3NlcnZlcl9wb3J0KTsKICAgICAgICAgICAgICAgICAgICAgICAgbGIoIndzIiArIChtYiA/ICJzIiA6ICIiKSArICI6Ly8iICsgZCwgYi50b2tlbikKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIiwKICAgICAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICAgICAgY2FjaGU6ICExLAogICAgICAgICAgICAgICAgY3Jvc3NEb21haW46ICEwLAogICAgICAgICAgICAgICAgZGF0YTogKEcgKyBsYSB8fCAiPyIpICsgIlxuMTU0NjY5NjAzIgogICAgICAgICAgICB9KQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gUSgpIHsKICAgICAgICAgICAgZ2IgJiYgRyAmJiAoZSgiI2Nvbm5lY3RpbmciKS5zaG93KCksIFBiKCkpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBRYigpIHsKICAgICAgICAgICAgaWYgKHcpIHsKICAgICAgICAgICAgICAgIHcub25vcGVuID0gbnVsbDsKICAgICAgICAgICAgICAgIHcub25tZXNzYWdlID0gbnVsbDsKICAgICAgICAgICAgICAgIHcub25jbG9zZSA9IG51bGw7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHcuY2xvc2UoKQogICAgICAgICAgICAgICAgfSBjYXRjaCAoYSkgeyB9CiAgICAgICAgICAgICAgICB3ID0gbnVsbAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBsYihhLCBiKSB7CiAgICAgICAgICAgIFFiKCk7CiAgICAgICAgICAgIEQuaXAgJiYgKGEgPSAid3MiICsgKG1iID8gInMiIDogIiIpICsgIjovLyIgKyBELmlwKTsKICAgICAgICAgICAgaWYgKG51bGwgIT0gUykgewogICAgICAgICAgICAgICAgdmFyIGQgPSBTOwogICAgICAgICAgICAgICAgUyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBkKGIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG1iICYmICFFbnZDb25maWcuZW52X2RldmVsb3BtZW50ICYmICFFbnZDb25maWcuZW52X2xvY2FsKSB7CiAgICAgICAgICAgICAgICB2YXIgYyA9IGEuc3BsaXQoIjoiKTsKICAgICAgICAgICAgICAgIGEgPSAid3NzOi8vaXAtIiArIGNbMV0ucmVwbGFjZSgvXC4vZywgIi0iKS5yZXBsYWNlKC9cLy9nLCAiIikgKyAiLnRlY2guYWdhci5pbzoiICsgK2NbMl0KICAgICAgICAgICAgfQogICAgICAgICAgICBFID0gW107CiAgICAgICAgICAgIHEgPSBbXTsKICAgICAgICAgICAgSyA9IHt9OwogICAgICAgICAgICBBID0gW107CiAgICAgICAgICAgIGJhID0gW107CiAgICAgICAgICAgIEMgPSBbXTsKICAgICAgICAgICAgSCA9IEkgPSBudWxsOwogICAgICAgICAgICBUID0gMDsKICAgICAgICAgICAgbmEgPSAhMTsKICAgICAgICAgICAgY29uc29sZS5sb2coIkNvbm5lY3RpbmcgdG8gIiArIGEpOwogICAgICAgICAgICBtLmNhY2hlLnNlbnRHYW1lU2VydmVyTG9naW4gPSAhMTsKICAgICAgICAgICAgdyA9IG5ldyBXZWJTb2NrZXQoYSk7CiAgICAgICAgICAgIHcuYmluYXJ5VHlwZSA9ICJhcnJheWJ1ZmZlciI7CiAgICAgICAgICAgIC8vIEFHQVJCT1RPVkgKICAgICAgICAgICAgaXAgPSBhOwogICAgICAgICAgICBpZiAoYi5sZW5ndGggPCA2KSB7CiAgICAgICAgICAgICAgICBiZ3ouc2VuZChKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgImFjdGlvbiI6IDEsCiAgICAgICAgICAgICAgICAgICAgInNlcnZlciI6IGEKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIGNvdW50ID0gMDsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTRU5ERUQgUEFSVFkgIScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJvb20gPSBiOwogICAgICAgICAgICBjaGFuZ2VHYW1lTW9kZSgpOwogICAgICAgICAgICB3Lm9ub3BlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBhOwogICAgICAgICAgICAgICAgRmEgPSB4ID0gRGF0ZS5ub3coKTsKICAgICAgICAgICAgICAgIG9hID0gMTIwOwogICAgICAgICAgICAgICAgR2EgPSAwOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coInNvY2tldCBvcGVuIik7CiAgICAgICAgICAgICAgICBhID0gVSg1KTsKICAgICAgICAgICAgICAgIGEuc2V0VWludDgoMCwgMjU0KTsKICAgICAgICAgICAgICAgIGEuc2V0VWludDMyKDEsIDUsICEwKTsKICAgICAgICAgICAgICAgIFYoYSk7CiAgICAgICAgICAgICAgICBhID0gVSg1KTsKICAgICAgICAgICAgICAgIGEuc2V0VWludDgoMCwgMjU1KTsKICAgICAgICAgICAgICAgIGEuc2V0VWludDMyKDEsIDE1NDY2OTYwMywgITApOwogICAgICAgICAgICAgICAgVihhKTsKICAgICAgICAgICAgICAgIGEgPSBVKDEgKyBiLmxlbmd0aCk7CiAgICAgICAgICAgICAgICBhLnNldFVpbnQ4KDAsIDgwKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgYi5sZW5ndGg7ICsrZCkgYS5zZXRVaW50OChkICsgMSwgYi5jaGFyQ29kZUF0KGQpKTsKICAgICAgICAgICAgICAgIFYoYSk7CiAgICAgICAgICAgICAgICBtLmNvcmUucHJveHkub25Tb2NrZXRPcGVuKCkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdy5vbm1lc3NhZ2UgPSB5YzsKICAgICAgICAgICAgdy5vbmNsb3NlID0gemM7CiAgICAgICAgICAgIHcub25lcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKEhhLkwoKSArICIgc29ja2V0IGVycm9yIiwgYXJndW1lbnRzKQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBVKGEpIHsKICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoYSkpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBWKGEpIHsKICAgICAgICAgICAgdy5zZW5kKGEuYnVmZmVyKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gemMoKSB7CiAgICAgICAgICAgIG5hICYmIChJYSA9IDUwMCk7CiAgICAgICAgICAgIG0uY29yZS5wcm94eS5vblNvY2tldENsb3NlZCgpOwogICAgICAgICAgICBjb25zb2xlLmxvZyhIYS5MKCkgKyAiIHNvY2tldCBjbG9zZSIpOwogICAgICAgICAgICBzZXRUaW1lb3V0KFEsIElhKTsKICAgICAgICAgICAgSWEgKj0gMgogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24geWMoYSkgewogICAgICAgICAgICBBYyhuZXcgRGF0YVZpZXcoYS5kYXRhKSkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEFjKGEpIHsKICAgICAgICAgICAgZnVuY3Rpb24gYigpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGIgPSAiIjsgOykgewogICAgICAgICAgICAgICAgICAgIHZhciBjID0gYS5nZXRVaW50MTYoZCwgITApOwogICAgICAgICAgICAgICAgICAgIGQgKz0gMjsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSBjKSBicmVhazsKICAgICAgICAgICAgICAgICAgICBiICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBiCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGQgPSAwOwogICAgICAgICAgICBpZiAoMjQwID09IGEuZ2V0VWludDgoZCkpIEphKCk7CiAgICAgICAgICAgIGVsc2Ugc3dpdGNoIChhLmdldFVpbnQ4KGQrKykpIHsKICAgICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICAgICAgQmMoYSwgZCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgICAgICAgIHBhID0gYS5nZXRGbG9hdDMyKGQsICEwKTsKICAgICAgICAgICAgICAgICAgICBkICs9IDQ7CiAgICAgICAgICAgICAgICAgICAgcWEgPSBhLmdldEZsb2F0MzIoZCwgITApOwogICAgICAgICAgICAgICAgICAgIGQgKz0gNDsKICAgICAgICAgICAgICAgICAgICByYSA9IGEuZ2V0RmxvYXQzMihkLCAhMCk7CiAgICAgICAgICAgICAgICAgICAgZCArPSA0OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICAgICAgICBFID0gW107CiAgICAgICAgICAgICAgICAgICAgcSA9IFtdOwogICAgICAgICAgICAgICAgICAgIEsgPSB7fTsKICAgICAgICAgICAgICAgICAgICBBID0gW107CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgICAgICAgICAgIHEgPSBbXTsKICAgICAgICAgICAgICAgICAgICBFID0gW107CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDIxOgogICAgICAgICAgICAgICAgICAgIG5iID0gYS5nZXRJbnQxNihkLCAhMCk7CiAgICAgICAgICAgICAgICAgICAgZCArPSAyOwogICAgICAgICAgICAgICAgICAgIG9iID0gYS5nZXRJbnQxNihkLCAhMCk7CiAgICAgICAgICAgICAgICAgICAgZCArPSAyOwogICAgICAgICAgICAgICAgICAgIHBiIHx8IChwYiA9ICEwLCBLYSA9IG5iLCBMYSA9IG9iKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgMzI6CiAgICAgICAgICAgICAgICAgICAgRS5wdXNoKGEuZ2V0VWludDMyKGQsICEwKSk7CiAgICAgICAgICAgICAgICAgICAgZCArPSA0OwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA0OToKICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPSBJKSBicmVhazsKICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGEuZ2V0VWludDMyKGQsICEwKSwKICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGQgKyA0OwogICAgICAgICAgICAgICAgICAgIEMgPSBbXTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBnID0gMDsgZyA8IHU7ICsrZykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGEuZ2V0VWludDMyKGQsICEwKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBkICsgNDsKICAgICAgICAgICAgICAgICAgICAgICAgQy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYigpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBSYigpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA1MDoKICAgICAgICAgICAgICAgICAgICBJID0gW107CiAgICAgICAgICAgICAgICAgICAgdSA9IGEuZ2V0VWludDMyKGQsICEwKTsKICAgICAgICAgICAgICAgICAgICBkICs9IDQ7CiAgICAgICAgICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8IHU7ICsrZykgSS5wdXNoKGEuZ2V0RmxvYXQzMihkLCAhMCkpLCBkICs9IDQ7CiAgICAgICAgICAgICAgICAgICAgUmIoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2UgNjQ6CiAgICAgICAgICAgICAgICAgICAgTWEgPSBhLmdldEZsb2F0NjQoZCwgITApOwogICAgICAgICAgICAgICAgICAgIGQgKz0gODsKICAgICAgICAgICAgICAgICAgICBOYSA9IGEuZ2V0RmxvYXQ2NChkLCAhMCk7CiAgICAgICAgICAgICAgICAgICAgZCArPSA4OwogICAgICAgICAgICAgICAgICAgIE9hID0gYS5nZXRGbG9hdDY0KGQsICEwKTsKICAgICAgICAgICAgICAgICAgICBkICs9IDg7CiAgICAgICAgICAgICAgICAgICAgUGEgPSBhLmdldEZsb2F0NjQoZCwgITApOwogICAgICAgICAgICAgICAgICAgIG1hcENvb3JkcyhNYSwgTmEsIE9hLCBQYSk7CiAgICAgICAgICAgICAgICAgICAgZCArPSA4OwogICAgICAgICAgICAgICAgICAgIHBhID0gKE9hICsgTWEpIC8gMjsKICAgICAgICAgICAgICAgICAgICBxYSA9IChQYSArIE5hKSAvIDI7CiAgICAgICAgICAgICAgICAgICAgcmEgPSAxOwogICAgICAgICAgICAgICAgICAgIDAgPT0gcS5sZW5ndGggJiYgKHkgPSBwYSwgeiA9IHFhLCBsID0gcmEpOwogICAgICAgICAgICAgICAgICAgIGEuYnl0ZUxlbmd0aCA+IGQgJiYgKHUgPSBhLmdldFVpbnQzMihkLCAhMCksIGQgKz0gNCwgcWIgPSAhISh1ICYgMSksIHJiID0gYigpLCBjLk1DLnVwZGF0ZVNlcnZlclZlcnNpb24ocmIpLCBjb25zb2xlLmxvZygiU2VydmVyIHZlcnNpb24gIiArIHJiKSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDEwMjoKICAgICAgICAgICAgICAgICAgICB1ID0gYS5idWZmZXIuc2xpY2UoZCk7CiAgICAgICAgICAgICAgICAgICAgbS5jb3JlLnByb3h5LmZvcndhcmRQcm90b01lc3NhZ2UodSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDEwNDoKICAgICAgICAgICAgICAgICAgICBjLmxvZ291dCgpCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEJjKGEsIGIpIHsKICAgICAgICAgICAgZnVuY3Rpb24gZCgpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAiIjsgOykgewogICAgICAgICAgICAgICAgICAgIHZhciBjID0gYS5nZXRVaW50MTYoYiwgITApOwogICAgICAgICAgICAgICAgICAgIGIgKz0gMjsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PQogICAgICAgICAgICAgICAgICAgICAgICBjKSBicmVhazsKICAgICAgICAgICAgICAgICAgICBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBkCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIHUoKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gIiI7IDspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGEuZ2V0VWludDgoYisrKTsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PSBjKSBicmVhazsKICAgICAgICAgICAgICAgICAgICBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgeCA9IERhdGUubm93KCk7CiAgICAgICAgICAgIHZhciBnID0geCAtIEZhOwogICAgICAgICAgICBGYSA9IHg7CiAgICAgICAgICAgIG9hID0gQ2MgKiBvYSArIERjICogZzsKICAgICAgICAgICAgR2EgPSBFYyAqIEdhICsgRmMgKiBNYXRoLmFicyhnIC0gb2EpOwogICAgICAgICAgICBtLmNvcmUuZGVidWcgJiYgKG0uZGVidWcudXBkYXRlQ2hhcnQoIm5ldHdvcmtVcGRhdGUiLCB4LCBnKSwgbS5kZWJ1Zy51cGRhdGVDaGFydCgicnR0TWVhbiIsIHgsIG9hKSwgbS5kZWJ1Zy51cGRhdGVDaGFydCgicnR0U0RldiIsIHgsIEdhKSk7CiAgICAgICAgICAgIG5hIHx8IChuYSA9ICEwLCBlKCIjY29ubmVjdGluZyIpLmhpZGUoKSwgU2IoKSwgUyAmJiAoUygpLCBTID0gbnVsbCkpOwogICAgICAgICAgICBzYiA9ICExOwogICAgICAgICAgICBnID0gYS5nZXRVaW50MTYoYiwgITApOwogICAgICAgICAgICBiICs9IDI7CiAgICAgICAgICAgIGZvciAodmFyIHAgPSAwOyBwIDwgZzsgKytwKSB7CiAgICAgICAgICAgICAgICB2YXIgTCA9IEtbYS5nZXRVaW50MzIoYiwgITApXSwKICAgICAgICAgICAgICAgICAgICBrID0gS1thLmdldFVpbnQzMihiICsgNCwgITApXTsKICAgICAgICAgICAgICAgIGIgKz0gODsKICAgICAgICAgICAgICAgIEwgJiYgayAmJiAoay5jYSgpLCBrLnMgPSBrLngsIGsudSA9IGsueSwgay5vID0gay5zaXplLCBrLm5hKEwueCwgTC55KSwgay5nID0gay5zaXplLCBrLlUgPSB4LCBHYyhMLCBrKSkKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHAgPSAwOyA7KSB7CiAgICAgICAgICAgICAgICBnID0gYS5nZXRVaW50MzIoYiwgITApOwogICAgICAgICAgICAgICAgYiArPSA0OwogICAgICAgICAgICAgICAgaWYgKDAgPT0gZykgYnJlYWs7CiAgICAgICAgICAgICAgICArK3A7CiAgICAgICAgICAgICAgICB2YXIgdGIsIEwgPSBhLmdldEludDMyKGIsICEwKTsKICAgICAgICAgICAgICAgIGIgKz0gNDsKICAgICAgICAgICAgICAgIGsgPSBhLmdldEludDMyKGIsICEwKTsKICAgICAgICAgICAgICAgIGIgKz0gNDsKICAgICAgICAgICAgICAgIHRiID0gYS5nZXRJbnQxNihiLCAhMCk7CiAgICAgICAgICAgICAgICBiICs9IDI7CiAgICAgICAgICAgICAgICB2YXIgbiA9IGEuZ2V0VWludDgoYisrKSwKICAgICAgICAgICAgICAgICAgICBmID0gYS5nZXRVaW50OChiKyspLAogICAgICAgICAgICAgICAgICAgIGggPSBhLmdldFVpbnQ4KGIrKyksCiAgICAgICAgICAgICAgICAgICAgZiA9IEhjKG4gPDwgMTYgfCBmIDw8IDggfCBoKSwKICAgICAgICAgICAgICAgICAgICBoID0gYS5nZXRVaW50OChiKyspLAogICAgICAgICAgICAgICAgICAgIGwgPSAhIShoICYgMSksCiAgICAgICAgICAgICAgICAgICAgciA9ICEhKGggJiAxNiksCiAgICAgICAgICAgICAgICAgICAgdCA9IG51bGw7CiAgICAgICAgICAgICAgICBoICYgMiAmJiAoYiArPSA0ICsgYS5nZXRVaW50MzIoYiwgITApKTsKICAgICAgICAgICAgICAgIGggJiA0ICYmICh0ID0gdSgpKTsKICAgICAgICAgICAgICAgIHZhciB2ID0gZCgpLAogICAgICAgICAgICAgICAgICAgIG4gPSBudWxsOwogICAgICAgICAgICAgICAgSy5oYXNPd25Qcm9wZXJ0eShnKSA/IChuID0gS1tnXSwgbi5UKCksIG4ucyA9IG4ueCwgbi51ID0gbi55LCBuLm8gPSBuLnNpemUsIG4uY29sb3IgPSBmKSA6IChuID0gbmV3IGNhKGcsIEwsIGssIHRiLCBmLCB2KSwgQS5wdXNoKG4pLCBLW2ddID0gbik7CiAgICAgICAgICAgICAgICBuLmMgPSBsOwogICAgICAgICAgICAgICAgbi5oID0gcjsKICAgICAgICAgICAgICAgIG4ubmEoTCwgayk7CiAgICAgICAgICAgICAgICBuLmcgPSB0YjsKICAgICAgICAgICAgICAgIG4uVSA9IHg7CiAgICAgICAgICAgICAgICBuLmVhID0gaDsKICAgICAgICAgICAgICAgIHQgJiYgKG4uQyA9IHQpOwogICAgICAgICAgICAgICAgdiAmJiBuLkEodik7IC0xICE9IEUuaW5kZXhPZihnKSAmJiAtMSA9PSBxLmluZGV4T2YobikgJiYgKHEucHVzaChuKSwgbi5JID0gITAsIDEgPT0gcS5sZW5ndGggJiYgKG4udWEgPSAhMCwgeSA9IG4ueCwgeiA9IG4ueSwgVGIoKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm92ZXJsYXlzIikuc3R5bGUuZGlzcGxheSA9ICJub25lIiwgRiA9IFtdLCB1YiA9IDAsIHZiID0gcVswXS5jb2xvciwgRWEgPSAhMCwgUmEgPSBEYXRlLm5vdygpLCBXID0gd2IgPSB4YiA9IDApKQogICAgICAgICAgICB9CiAgICAgICAgICAgIEwgPSBhLmdldFVpbnQzMihiLCAhMCk7CiAgICAgICAgICAgIGIgKz0gNDsKICAgICAgICAgICAgZm9yIChwID0gMDsgcCA8IEw7IHArKykgZyA9IGEuZ2V0VWludDMyKGIsICEwKSwgYiArPSA0LCBuID0gS1tnXSwgbnVsbCAhPSBuICYmIG4uY2EoKTsKICAgICAgICAgICAgc2IgJiYgMCA9PSBxLmxlbmd0aCAmJiAoMCA9PSBjLk1DLmlzVXNlckxvZ2dlZEluKCkgPyBKYSgpIDogVWIgPSBzZXRUaW1lb3V0KEphLCAyRTMpKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gU2EoKSB7CiAgICAgICAgICAgIGlmIChkYSgpKSB7CiAgICAgICAgICAgICAgICB2YXIgYSA9IFkgLSByIC8gMiwKICAgICAgICAgICAgICAgICAgICBiID0gWiAtIHQgLyAyOwoKICAgICAgICAgICAgICAgIC8vIEFHQVJCT1RPVkgKICAgICAgICAgICAgICAgIGlmICg2NCA+IGEgKiBhICsgYiAqIGIgfHwgLjAxID4gTWF0aC5hYnMoVmIgLSB6YSkgJiYgLjAxID4gTWF0aC5hYnMoV2IgLSBBYSkgfHwgKFZiID0gemEsIFdiID0gQWEsIGEgPSBVKDEzKSwgYS5zZXRVaW50OCgwLCAxNiksIGhleShhLCB6YSwgQWEpLCB4dCkpIHsKCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBBR0FSQk9UT1ZICgogICAgICAgICAgICAgICAgLyogNjQgPiBhICogYSArIGIgKiBiIHx8IC4wMSA+IE1hdGguYWJzKFZiIC0KICAgICAgICAgICAgICAgICAgICAgemEpICYmIC4wMSA+IE1hdGguYWJzKFdiIC0gQWEpIHx8IChWYiA9IHphLCBXYiA9IEFhLCBhID0gVSgxMyksIGEuc2V0VWludDgoMCwgMTYpLCBhLnNldEludDMyKDEsIHphLCAhMCksIGEuc2V0SW50MzIoNSwgQWEsICEwKSwgYS5zZXRVaW50MzIoOSwgMCwgITApLCBWKGEpKQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gU2IoKSB7CiAgICAgICAgICAgIGlmIChkYSgpICYmIG5hICYmIG51bGwgIT0gTikgewogICAgICAgICAgICAgICAgdmFyIGEgPSBVKDEgKyAyICogTi5sZW5ndGgpOwogICAgICAgICAgICAgICAgLy8gQUdBUkJPVE9WSAogICAgICAgICAgICAgICAgc3RvcE1vdmUgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b0ZlZWRJbnRlcnZhbCk7CiAgICAgICAgICAgICAgICBhdXRvRmVlZEludGVydmFsID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgcmVmcmVzaCgpOwogICAgICAgICAgICAgICAgLy8gQUdBUkJPVE9WSAogICAgICAgICAgICAgICAgYS5zZXRVaW50OCgwLCAwKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGIgPSAwOyBiIDwgTi5sZW5ndGg7ICsrYikgYS5zZXRVaW50MTYoMSArIDIgKiBiLCBOLmNoYXJDb2RlQXQoYiksICEwKTsKICAgICAgICAgICAgICAgIFYoYSk7CiAgICAgICAgICAgICAgICBOID0gbnVsbAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBlYigpIHsKICAgICAgICAgICAgU2EoKTsKICAgICAgICAgICAgWCgxNykKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEpiKCkgewogICAgICAgICAgICBTYSgpOwogICAgICAgICAgICBYKDIxKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZGEoKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsICE9IHcgJiYgdy5yZWFkeVN0YXRlID09IHcuT1BFTgogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gWChhKSB7CiAgICAgICAgICAgIGlmIChkYSgpKSB7CiAgICAgICAgICAgICAgICB2YXIgYiA9IFUoMSk7CiAgICAgICAgICAgICAgICBiLnNldFVpbnQ4KDAsIGEpOwogICAgICAgICAgICAgICAgVihiKQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBYYigpIHsKICAgICAgICAgICAgciA9IDEgKiBjLmlubmVyV2lkdGg7CiAgICAgICAgICAgIHQgPSAxICogYy5pbm5lckhlaWdodDsKICAgICAgICAgICAgeWIud2lkdGggPSBPLndpZHRoID0gcjsKICAgICAgICAgICAgeWIuaGVpZ2h0ID0gTy5oZWlnaHQgPSB0OwogICAgICAgICAgICB2YXIgYSA9IGUoIiNoZWxsb0NvbnRhaW5lciIpOwogICAgICAgICAgICBhLmNzcygidHJhbnNmb3JtIiwgIm5vbmUiKTsKICAgICAgICAgICAgdmFyIGIgPSBhLmhlaWdodCgpLAogICAgICAgICAgICAgICAgZCA9IGMuaW5uZXJIZWlnaHQ7CiAgICAgICAgICAgIDAgIT0gYiAvIDIgJSAyICYmIChiKyssIGEuaGVpZ2h0KGIpKTsKICAgICAgICAgICAgYiA+IGQgLyAxLjEgPyBhLmNzcygidHJhbnNmb3JtIiwgInRyYW5zbGF0ZSgtNTAlLCAtNTAlKSBzY2FsZSgiICsgZCAvIGIgLyAxLjEgKyAiKSIpIDogYS5jc3MoInRyYW5zZm9ybSIsICJ0cmFuc2xhdGUoLTUwJSwgLTUwJSkiKTsKICAgICAgICAgICAgWWIoKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gWmIoKSB7CiAgICAgICAgICAgIHZhciBhOwogICAgICAgICAgICBhID0gMSAqIE1hdGgubWF4KHQgLyAxMDgwLCByIC8gMTkyMCk7CiAgICAgICAgICAgIHJldHVybiBhICo9IFAKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEljKCkgewogICAgICAgICAgICBpZiAoMCAhPSBxLmxlbmd0aCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDAsIGIgPSAwOyBiIDwgcS5sZW5ndGg7IGIrKykgYSArPSBxW2JdLnNpemU7CiAgICAgICAgICAgICAgICBsID0gKDkgKiBsICsgTWF0aC5wb3coTWF0aC5taW4oNjQgLyBhLCAxKSwgLjQpICogWmIoKSkgLyAxMAogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBZYigpIHsKICAgICAgICAgICAgdmFyIGEsIGIgPSBEYXRlLm5vdygpOwogICAgICAgICAgICArK0pjOwogICAgICAgICAgICAkYiAmJiAoKytUYSwgMTgwIDwgVGEgJiYgKFRhID0gMCkpOwogICAgICAgICAgICB4ID0KICAgICAgICAgICAgICAgIGI7CiAgICAgICAgICAgIGlmICgwIDwgcS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIEljKCk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gYSA9IDAsIGMgPSAwOyBjIDwgcS5sZW5ndGg7IGMrKykgcVtjXS5UKCksIGEgKz0gcVtjXS54IC8gcS5sZW5ndGgsIGQgKz0gcVtjXS55IC8gcS5sZW5ndGg7CiAgICAgICAgICAgICAgICBwYSA9IGE7CiAgICAgICAgICAgICAgICBxYSA9IGQ7CiAgICAgICAgICAgICAgICByYSA9IGw7CiAgICAgICAgICAgICAgICB5ID0gKHkgKyBhKSAvIDI7CiAgICAgICAgICAgICAgICB6ID0gKHogKyBkKSAvIDIKICAgICAgICAgICAgfSBlbHNlIHkgPSAoMjkgKiB5ICsgcGEpIC8gMzAsIHogPSAoMjkgKiB6ICsgcWEpIC8gMzAsIGwgPSAoOSAqIGwgKyByYSAqIFpiKCkpIC8gMTA7CiAgICAgICAgICAgIHVjKCk7CiAgICAgICAgICAgIGZiKCk7CiAgICAgICAgICAgIHpiIHx8IGYuY2xlYXJSZWN0KDAsIDAsIHIsIHQpOwogICAgICAgICAgICB6YiA/IChmLmZpbGxTdHlsZSA9IGVhID8gIiMxMTExMTEiIDogIiNGMkZCRkYiLCBmLmdsb2JhbEFscGhhID0gLjA1LCBmLmZpbGxSZWN0KDAsIDAsIHIsIHQpLCBmLmdsb2JhbEFscGhhID0gMSkgOiBLYygpOwogICAgICAgICAgICBBLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBhLnNpemUgPT0gYi5zaXplID8gYS5pZCAtIGIuaWQgOiBhLnNpemUgLSBiLnNpemUKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGYuc2F2ZSgpOwogICAgICAgICAgICBmLnRyYW5zbGF0ZShyIC8gMiwgdCAvIDIpOwogICAgICAgICAgICBmLnNjYWxlKGwsIGwpOwogICAgICAgICAgICBmLnRyYW5zbGF0ZSgteSwgLXopOwogICAgICAgICAgICBmb3IgKGMgPSAwOyBjIDwgYmEubGVuZ3RoOyBjKyspIGJhW2NdLncoZik7CiAgICAgICAgICAgIGZvciAoYyA9IDA7IGMgPAogICAgICAgICAgICAgICAgQS5sZW5ndGg7IGMrKykgQVtjXS53KGYpOwogICAgICAgICAgICBpZiAocGIpIHsKICAgICAgICAgICAgICAgIEthID0gKDMgKiBLYSArIG5iKSAvIDQ7CiAgICAgICAgICAgICAgICBMYSA9ICgzICogTGEgKyBvYikgLyA0OwogICAgICAgICAgICAgICAgZi5zYXZlKCk7CiAgICAgICAgICAgICAgICBmLnN0cm9rZVN0eWxlID0gIiNGRkFBQUEiOwogICAgICAgICAgICAgICAgZi5saW5lV2lkdGggPSAxMDsKICAgICAgICAgICAgICAgIGYubGluZUNhcCA9ICJyb3VuZCI7CiAgICAgICAgICAgICAgICBmLmxpbmVKb2luID0gInJvdW5kIjsKICAgICAgICAgICAgICAgIGYuZ2xvYmFsQWxwaGEgPSAuNTsKICAgICAgICAgICAgICAgIGYuYmVnaW5QYXRoKCk7CiAgICAgICAgICAgICAgICBmb3IgKGMgPSAwOyBjIDwgcS5sZW5ndGg7IGMrKykgZi5tb3ZlVG8ocVtjXS54LCBxW2NdLnkpLCBmLmxpbmVUbyhLYSwgTGEpOwogICAgICAgICAgICAgICAgZi5zdHJva2UoKTsKICAgICAgICAgICAgICAgIGYucmVzdG9yZSgpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZi5yZXN0b3JlKCk7CiAgICAgICAgICAgIEggJiYgSC53aWR0aCAmJiBmLmRyYXdJbWFnZShILCByIC0gSC53aWR0aCAtIDEwLCAxMCk7CiAgICAgICAgICAgIFQgPSBNYXRoLm1heChULCBhYygpKTsKICAgICAgICAgICAgMCAhPSBUICYmIChudWxsID09IFVhICYmIChVYSA9IG5ldyBWYSgyNCwgIiNGRkZGRkYiKSksIFVhLkIoUigic2NvcmUiKSArICI6ICIgKyB+fihUIC8gMTAwKSksIGQgPSBVYS5PKCksIGEgPSBkLndpZHRoLCBmLmdsb2JhbEFscGhhID0gLjIsIGYuZmlsbFN0eWxlID0gIiMwMDAwMDAiLCBmLmZpbGxSZWN0KDEwLCB0IC0gMTAgLSAyNCAtIDEwLCBhICsgMTAsIDM0KSwKICAgICAgICAgICAgICAgIGYuZ2xvYmFsQWxwaGEgPSAxLCBmLmRyYXdJbWFnZShkLCAxNSwgdCAtIDEwIC0gMjQgLSA1KSk7CiAgICAgICAgICAgIExjKCk7CiAgICAgICAgICAgIGIgPSBEYXRlLm5vdygpIC0gYjsKICAgICAgICAgICAgYiA+IDFFMyAvIDYwID8gTSAtPSAuMDEgOiBiIDwgMUUzIC8gNjUgJiYgKE0gKz0gLjAxKTsKICAgICAgICAgICAgLjQgPiBNICYmIChNID0gLjQpOwogICAgICAgICAgICAxIDwgTSAmJiAoTSA9IDEpOwogICAgICAgICAgICBiID0geCAtIGJjOwogICAgICAgICAgICAhZGEoKSB8fCBqYSB8fCBhYSA/IChCICs9IGIgLyAyRTMsIDEgPCBCICYmIChCID0gMSkpIDogKEIgLT0gYiAvIDMwMCwgMCA+IEIgJiYgKEIgPSAwKSk7CiAgICAgICAgICAgIDAgPCBCID8gKGYuZmlsbFN0eWxlID0gIiMwMDAwMDAiLCBjYyA/IChmLmdsb2JhbEFscGhhID0gQiwgZi5maWxsUmVjdCgwLCAwLCByLCB0KSwgSi5jb21wbGV0ZSAmJiBKLndpZHRoICYmIChKLndpZHRoIC8gSi5oZWlnaHQgPCByIC8gdCA/IChiID0gciwgYSA9IEouaGVpZ2h0ICogciAvIEoud2lkdGgpIDogKGIgPSBKLndpZHRoICogdCAvIEouaGVpZ2h0LCBhID0gdCksIGYuZHJhd0ltYWdlKEosIChyIC0gYikgLyAyLCAodCAtIGEpIC8gMiwgYiwgYSksIGYuZ2xvYmFsQWxwaGEgPSAuNSAqIEIsIGYuZmlsbFJlY3QoMCwgMCwgciwgdCkpKSA6IChmLmdsb2JhbEFscGhhID0gLjUgKiBCLCBmLmZpbGxSZWN0KDAsIDAsIHIsIHQpKSwgZi5nbG9iYWxBbHBoYSA9IDEpIDogY2MgPSAhMTsKICAgICAgICAgICAgYmMgPSB4CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBLYygpIHsKICAgICAgICAgICAgZi5maWxsU3R5bGUgPQogICAgICAgICAgICAgICAgZWEgPyAiIzExMTExMSIgOiAiI0YyRkJGRiI7CiAgICAgICAgICAgIGYuZmlsbFJlY3QoMCwgMCwgciwgdCk7CiAgICAgICAgICAgIGYuc2F2ZSgpOwogICAgICAgICAgICBmLnN0cm9rZVN0eWxlID0gZWEgPyAiI0FBQUFBQSIgOiAiIzAwMDAwMCI7CiAgICAgICAgICAgIGYuZ2xvYmFsQWxwaGEgPSAuMiAqIGw7CiAgICAgICAgICAgIGZvciAodmFyIGEgPSByIC8gbCwgYiA9IHQgLyBsLCBkID0gKC15ICsgYSAvIDIpICUgNTA7IGQgPCBhOyBkICs9IDUwKSBmLmJlZ2luUGF0aCgpLCBmLm1vdmVUbyhkICogbCAtIC41LCAwKSwgZi5saW5lVG8oZCAqIGwgLSAuNSwgYiAqIGwpLCBmLnN0cm9rZSgpOwogICAgICAgICAgICBmb3IgKGQgPSAoLXogKyBiIC8gMikgJSA1MDsgZCA8IGI7IGQgKz0gNTApIGYuYmVnaW5QYXRoKCksIGYubW92ZVRvKDAsIGQgKiBsIC0gLjUpLCBmLmxpbmVUbyhhICogbCwgZCAqIGwgLSAuNSksIGYuc3Ryb2tlKCk7CiAgICAgICAgICAgIGYucmVzdG9yZSgpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBMYygpIHsKICAgICAgICAgICAgaWYgKGRjICYmIEFiLndpZHRoKSB7CiAgICAgICAgICAgICAgICB2YXIgYSA9IHIgLyA1OwogICAgICAgICAgICAgICAgZi5kcmF3SW1hZ2UoQWIsIDUsIDUsIGEsIGEpCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGFjKCkgewogICAgICAgICAgICBmb3IgKHZhciBhID0gMCwgYiA9IDA7IGIgPCBxLmxlbmd0aDsgYisrKSBhICs9IHFbYl0uZyAqIHFbYl0uZzsKICAgICAgICAgICAgcmV0dXJuIGEKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFJiKCkgewogICAgICAgICAgICBIID0gbnVsbDsKICAgICAgICAgICAgaWYgKG51bGwgIT0gSSB8fCAwICE9IEMubGVuZ3RoKQogICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gSSB8fCBmYSkgewogICAgICAgICAgICAgICAgICAgIEggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IEguZ2V0Q29udGV4dCgiMmQiKSwKICAgICAgICAgICAgICAgICAgICAgICAgYiA9IDYwLAogICAgICAgICAgICAgICAgICAgICAgICBiID0gbnVsbCA9PSBJID8gYiArIDI0ICogQy5sZW5ndGggOiBiICsgMTgwLAogICAgICAgICAgICAgICAgICAgICAgICBkID0gTWF0aC5taW4oMjAwLCAuMyAqIHIpIC8gMjAwOwogICAgICAgICAgICAgICAgICAgIEgud2lkdGggPSAyMDAgKiBkOwogICAgICAgICAgICAgICAgICAgIEguaGVpZ2h0ID0gYiAqIGQ7CiAgICAgICAgICAgICAgICAgICAgYS5zY2FsZShkLCBkKTsKICAgICAgICAgICAgICAgICAgICBhLmdsb2JhbEFscGhhID0gLjQ7CiAgICAgICAgICAgICAgICAgICAgYS5maWxsU3R5bGUgPSAiIzAwMDAwMCI7CiAgICAgICAgICAgICAgICAgICAgYS5maWxsUmVjdCgwLCAwLCAyMDAsIGIpOwogICAgICAgICAgICAgICAgICAgIGEuZ2xvYmFsQWxwaGEgPSAxOwogICAgICAgICAgICAgICAgICAgIGEuZmlsbFN0eWxlID0gIiNGRkZGRkYiOwogICAgICAgICAgICAgICAgICAgIGQgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIGQgPSBSKCJsZWFkZXJib2FyZCIpOwogICAgICAgICAgICAgICAgICAgIGEuZm9udCA9ICIzMHB4IFVidW50dSI7CiAgICAgICAgICAgICAgICAgICAgYS5maWxsVGV4dChkLCAxMDAgLSBhLm1lYXN1cmVUZXh0KGQpLndpZHRoIC8gMiwgNDApOwogICAgICAgICAgICAgICAgICAgIHZhciBjLCBlOwogICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IEkpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYS5mb250ID0gIjIwcHggVWJ1bnR1IiwgYiA9IDA7IGIgPCBDLmxlbmd0aDsgKytiKSBkID0gQ1tiXS5uYW1lIHx8IFIoInVubmFtZWRfY2VsbCIpLCBmYSB8fCAoZCA9IFIoInVubmFtZWRfY2VsbCIpKSwgMSA9PSBDW2JdLmlkIHx8IC0xICE9IEUuaW5kZXhPZihDW2JdLmlkKSA/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAocVswXS5uYW1lICYmIChkID0gcVswXS5uYW1lKSwgYS5maWxsU3R5bGUgPSAiI0ZGQUFBQSIpIDogYS5maWxsU3R5bGUgPSAiI0ZGRkZGRiIsIGQgPSBiICsgMSArICIuICIgKyBkLCBlID0gYS5tZWFzdXJlVGV4dChkKS53aWR0aCwgYyA9IDcwICsgMjQgKiBiLCAyMDAgPCBlID8gYS5maWxsVGV4dChkLCAxMCwgYykgOiBhLmZpbGxUZXh0KGQsICgyMDAgLSBlKSAvIDIsIGMpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChiID0gZCA9IDA7IGIgPCBJLmxlbmd0aDsgKytiKSBjID0gZCArIElbYl0gKiBNYXRoLlBJICogMiwgYS5maWxsU3R5bGUgPSBNY1tiICsgMV0sIGEuYmVnaW5QYXRoKCksIGEubW92ZVRvKDEwMCwgMTQwKSwgYS5hcmMoMTAwLCAxNDAsIDgwLCBkLCBjLCAhMSksIGEuZmlsbCgpLCBkID0gYwogICAgICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gTmMoYSkgewogICAgICAgICAgICBpZiAobnVsbCA9PSBhIHx8IDAgPT0gYS5sZW5ndGgpIHJldHVybiBudWxsOwogICAgICAgICAgICBpZiAoIiUiID09IGFbMF0pIHsKICAgICAgICAgICAgICAgIGlmICghYy5NQyB8fCAhYy5NQy5nZXRTa2luSW5mbykgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICBhID0gYy5NQy5nZXRTa2luSW5mbygic2tpbl8iICsgYS5zbGljZSgxKSk7CiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBhKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgIGZvciAoYSA9ICgrYS5jb2xvcikudG9TdHJpbmcoMTYpIDsgNiA+CiAgICAgICAgICAgICAgICAgICAgYS5sZW5ndGg7KSBhID0gIjAiICsgYTsKICAgICAgICAgICAgICAgIHJldHVybiAiIyIgKyBhCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG51bGwKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGVjKGEpIHsKICAgICAgICAgICAgaWYgKG51bGwgPT0gYSB8fCAwID09IGEubGVuZ3RoKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgaWYgKCFzYS5oYXNPd25Qcm9wZXJ0eShhKSkgewogICAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgSW1hZ2U7CiAgICAgICAgICAgICAgICBpZiAoIjoiID09IGFbMF0pIGIuc3JjID0gYS5zbGljZSgxKTsKICAgICAgICAgICAgICAgIGVsc2UgaWYgKCIlIiA9PSBhWzBdKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFjLk1DIHx8ICFjLk1DLmdldFNraW5JbmZvKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGMuTUMuZ2V0U2tpbkluZm8oInNraW5fIiArIGEuc2xpY2UoMSkpOwogICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IGQpIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICAgIGIuc3JjID0gYy5BU1NFVFNfUk9PVCArIGQudXJsCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzYVthXSA9IGIKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gMCAhPSBzYVthXS53aWR0aCAmJiBzYVthXS5jb21wbGV0ZSA/IHNhW2FdIDogbnVsbAogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gQmIoYSwgYiwgZCwgYywgZSkgewogICAgICAgICAgICB0aGlzLiQgPSBhOwogICAgICAgICAgICB0aGlzLnggPSBiOwogICAgICAgICAgICB0aGlzLnkgPSBkOwogICAgICAgICAgICB0aGlzLmYgPSBjOwogICAgICAgICAgICB0aGlzLmIgPSBlCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjYShhLCBiLCBkLCBjLCBlLCBwKSB7CiAgICAgICAgICAgIHRoaXMuaWQgPSBhOwogICAgICAgICAgICB0aGlzLnMgPSB0aGlzLnggPSB0aGlzLk0gPSB0aGlzLkogPSBiOwogICAgICAgICAgICB0aGlzLnUgPSB0aGlzLnkgPSB0aGlzLk4gPSB0aGlzLksgPSBkOwogICAgICAgICAgICB0aGlzLm8gPSB0aGlzLnNpemUgPSBjOwogICAgICAgICAgICB0aGlzLmNvbG9yID0gZTsKICAgICAgICAgICAgdGhpcy5hID0gW107CiAgICAgICAgICAgIHRoaXMuYmEoKTsKICAgICAgICAgICAgdGhpcy5BKHApCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBIYyhhKSB7CiAgICAgICAgICAgIGZvciAoYSA9IGEudG9TdHJpbmcoMTYpIDsgNiA+IGEubGVuZ3RoOykgYSA9ICIwIiArIGE7CiAgICAgICAgICAgIHJldHVybiAiIyIgKyBhCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBWYShhLCBiLCBkLCBjKSB7CiAgICAgICAgICAgIGEgJiYgKHRoaXMudiA9IGEpOwogICAgICAgICAgICBiICYmICh0aGlzLlcgPSBiKTsKICAgICAgICAgICAgdGhpcy5ZID0gISFkOwogICAgICAgICAgICBjICYmICh0aGlzLlogPSBjKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gT2MoYSkgewogICAgICAgICAgICBmb3IgKHZhciBiID0gYS5sZW5ndGgsIGQsIGM7IDAgPCBiOykgYyA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGIpLCBiLS0sIGQgPSBhW2JdLCBhW2JdID0gYVtjXSwgYVtjXSA9IGQKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFBjKCkgewogICAgICAgICAgICBoID0gV2EKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGZjKGEpIHsKICAgICAgICAgICAgaC5jb250ZXh0ID0gImdvb2dsZSIgPT0gYSA/ICJnb29nbGUiIDogImZhY2Vib29rIjsKICAgICAgICAgICAgWGEoKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gWGEoKSB7CiAgICAgICAgICAgIGMubG9jYWxTdG9yYWdlLnN0b3JlT2JqZWN0SW5mbyA9IEpTT04uc3RyaW5naWZ5KGgpOwogICAgICAgICAgICBoID0gSlNPTi5wYXJzZShjLmxvY2FsU3RvcmFnZS5zdG9yZU9iamVjdEluZm8pOwogICAgICAgICAgICBjLnN0b3JhZ2VJbmZvID0gaDsKICAgICAgICAgICAgImdvb2dsZSIgPT0gaC5jb250ZXh0ID8gKGUoIiNnUGx1c1NoYXJlIikuc2hvdygpLCBlKCIjZmJTaGFyZSIpLmhpZGUoKSkgOiAoZSgiI2dQbHVzU2hhcmUiKS5oaWRlKCksIGUoIiNmYlNoYXJlIikuc2hvdygpKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2MoYSkgewogICAgICAgICAgICBlKCIjaGVsbG9Db250YWluZXIiKS5hdHRyKCJkYXRhLWhhcy1hY2NvdW50LWRhdGEiKTsKICAgICAgICAgICAgIiIgIT0gYS5kaXNwbGF5TmFtZSAmJiAoYS5uYW1lID0gYS5kaXNwbGF5TmFtZSk7CiAgICAgICAgICAgIGlmIChudWxsID09IGEubmFtZSB8fCB2b2lkIDAgPT0gYS5uYW1lKSBhLm5hbWUgPSAiIjsKICAgICAgICAgICAgdmFyIGIgPSBhLm5hbWUubGFzdEluZGV4T2YoIl8iKTsgLTEgIT0gYiAmJiAoYS5uYW1lID0gYS5uYW1lLnN1YnN0cmluZygwLCBiKSk7CiAgICAgICAgICAgIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtaGFzLWFjY291bnQtZGF0YSIsICIxIik7CiAgICAgICAgICAgIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtbG9nZ2VkLWluIiwgIjEiKTsKICAgICAgICAgICAgZSgiLmFnYXJpby1wcm9maWxlLXBhbmVsIC5wcm9ncmVzcy1iYXItc3RhciIpLnRleHQoYS5sZXZlbCk7CiAgICAgICAgICAgIGUoIi5hZ2FyaW8tZXhwLWJhciAucHJvZ3Jlc3MtYmFyLXRleHQiKS50ZXh0KGEueHAgKyAiLyIgKyBhLnhwTmVlZGVkICsgIiBYUCIpOwogICAgICAgICAgICBlKCIuYWdhcmlvLWV4cC1iYXIgLnByb2dyZXNzLWJhciIpLmNzcygid2lkdGgiLCAoODggKiBhLnhwIC8gYS54cE5lZWRlZCkudG9GaXhlZCgyKSArICIlIik7CiAgICAgICAgICAgIGUoIi5hZ2FyaW8tcHJvZmlsZS1uYW1lIikudGV4dChhLm5hbWUpOwogICAgICAgICAgICAiIiAhPSBhLnBpY3R1cmUgJiYgZSgiLmFnYXJpby1wcm9maWxlLXBpY3R1cmUiKS5hdHRyKCJzcmMiLCBhLnBpY3R1cmUpOwogICAgICAgICAgICBDYigpOwogICAgICAgICAgICBoLnVzZXJJbmZvLmxldmVsID0gYS5sZXZlbDsKICAgICAgICAgICAgaC51c2VySW5mby54cCA9IGEueHA7CiAgICAgICAgICAgIGgudXNlckluZm8ueHBOZWVkZWQgPSBhLnhwTmVlZGVkOwogICAgICAgICAgICBoLnVzZXJJbmZvLmRpc3BsYXlOYW1lID0gYS5uYW1lOwogICAgICAgICAgICBoLnVzZXJJbmZvLmxvZ2dlZEluID0gIjEiOwogICAgICAgICAgICBjLnVwZGF0ZVN0b3JhZ2UoKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2EoYSwgYikgewogICAgICAgICAgICB2YXIgZCA9IGE7CiAgICAgICAgICAgIGlmIChoLnVzZXJJbmZvLmxvZ2dlZEluKSB7CiAgICAgICAgICAgICAgICB2YXIgdSA9IGUoIiNoZWxsb0NvbnRhaW5lciIpLmlzKCI6dmlzaWJsZSIpICYmICIxIiA9PSBlKCIjaGVsbG9Db250YWluZXIiKS5hdHRyKCJkYXRhLWhhcy1hY2NvdW50LWRhdGEiKTsKICAgICAgICAgICAgICAgIGlmIChudWxsID09IGQgfHwgdm9pZCAwID09IGQpIGQgPSBoLnVzZXJJbmZvOwogICAgICAgICAgICAgICAgaWYgKHUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZyA9ICtlKCIuYWdhcmlvLWV4cC1iYXIgLnByb2dyZXNzLWJhci10ZXh0IikuZmlyc3QoKS50ZXh0KCkuc3BsaXQoIi8iKVswXSwKICAgICAgICAgICAgICAgICAgICAgICAgdSA9ICtlKCIuYWdhcmlvLWV4cC1iYXIgLnByb2dyZXNzLWJhci10ZXh0IikuZmlyc3QoKS50ZXh0KCkuc3BsaXQoIi8iKVsxXS5zcGxpdCgiICIpWzBdLAogICAgICAgICAgICAgICAgICAgICAgICBwID0gZSgiLmFnYXJpby1wcm9maWxlLXBhbmVsIC5wcm9ncmVzcy1iYXItc3RhciIpLmZpcnN0KCkudGV4dCgpOwogICAgICAgICAgICAgICAgICAgIGlmIChwICE9IGQubGV2ZWwpIGdhKHsKICAgICAgICAgICAgICAgICAgICAgICAgeHA6IHUsCiAgICAgICAgICAgICAgICAgICAgICAgIHhwTmVlZGVkOiB1LAogICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogcAogICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiLmFnYXJpby1wcm9maWxlLXBhbmVsIC5wcm9ncmVzcy1iYXItc3RhciIpLnRleHQoZC5sZXZlbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIi5hZ2FyaW8tZXhwLWJhciAucHJvZ3Jlc3MtYmFyIikuY3NzKCJ3aWR0aCIsICIxMDAlIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIi5wcm9ncmVzcy1iYXItc3RhciIpLmFkZENsYXNzKCJhbmltYXRlZCB0YWRhIikub25lKCJ3ZWJraXRBbmltYXRpb25FbmQgbW96QW5pbWF0aW9uRW5kIE1TQW5pbWF0aW9uRW5kIG9hbmltYXRpb25lbmQgYW5pbWF0aW9uZW5kIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSgiLnByb2dyZXNzLWJhci1zdGFyIikucmVtb3ZlQ2xhc3MoImFuaW1hdGVkIHRhZGEiKQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKCIuYWdhcmlvLWV4cC1iYXIgLnByb2dyZXNzLWJhci10ZXh0IikudGV4dChkLnhwTmVlZGVkICsgIi8iICsgZC54cE5lZWRlZCArICIgWFAiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4cDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4cE5lZWRlZDogZC54cE5lZWRlZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogZC5sZXZlbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhKGQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICB9LCAxRTMpCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gRGF0ZS5ub3coKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IChEYXRlLm5vdygpIC0gZikgLyAxRTM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IDAgPiBhID8gMCA6IDEgPCBhID8gMSA6IGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEgKiBhICogKDMgLSAyICogYSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSgiLmFnYXJpby1leHAtYmFyIC5wcm9ncmVzcy1iYXItdGV4dCIpLnRleHQofn4oZyArIChkLnhwIC0gZykgKiBhKSArICIvIiArIGQueHBOZWVkZWQgKyAiIFhQIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSgiLmFnYXJpby1leHAtYmFyIC5wcm9ncmVzcy1iYXIiKS5jc3MoIndpZHRoIiwgKDg4ICogKGcgKyAoZC54cCAtIGcpICogYSkgLyBkLnhwTmVlZGVkKS50b0ZpeGVkKDIpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiICYmIGIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxID4gYSAmJiBjLnJlcXVlc3RBbmltYXRpb25GcmFtZShrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgYy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIENiKCkgewogICAgICAgICAgICB2YXIgYTsKICAgICAgICAgICAgKCJ1bmRlZmluZWQiICE9PSB0eXBlb2YgYSAmJiBhIHx8ICJub25lIiA9PSBlKCIjc2V0dGluZ3MiKS5jc3MoImRpc3BsYXkiKSAmJiAibm9uZSIgPT0gZSgiI3NvY2lhbExvZ2luQ29udGFpbmVyIikuY3NzKCJkaXNwbGF5IikpICYmIGUoIiNpbnN0cnVjdGlvbnMiKS5zaG93KCkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGhjKGEpIHsKICAgICAgICAgICAgaWYgKCJjb25uZWN0ZWQiID09IGEuc3RhdHVzKSB7CiAgICAgICAgICAgICAgICB2YXIgYiA9IGEuYXV0aFJlc3BvbnNlLmFjY2Vzc1Rva2VuOwogICAgICAgICAgICAgICAgbnVsbCA9PSBiIHx8ICJ1bmRlZmluZWQiID09IGIgfHwgIiIgPT0gYiA/ICgzID4gaWMgJiYgKGljKyssIGMuZmFjZWJvb2tSZWxvZ2luKCkpLCBjLmxvZ291dCgpKSA6IChjLk1DLmRvTG9naW5XaXRoRkIoYiksIG0uY2FjaGUubG9naW5faW5mbyA9IFtiLCAiZmFjZWJvb2siXSwgYy5GQi5hcGkoIi9tZS9waWN0dXJlP3dpZHRoPTE4MCZoZWlnaHQ9MTgwIiwgZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgICAgICBoLnVzZXJJbmZvLnBpY3R1cmUgPSBiLmRhdGEudXJsOwogICAgICAgICAgICAgICAgICAgIGMudXBkYXRlU3RvcmFnZSgpOwogICAgICAgICAgICAgICAgICAgIGUoIi5hZ2FyaW8tcHJvZmlsZS1waWN0dXJlIikuYXR0cigic3JjIiwgYi5kYXRhLnVybCk7CiAgICAgICAgICAgICAgICAgICAgaC51c2VySW5mby5zb2NpYWxJZCA9IGEuYXV0aFJlc3BvbnNlLnVzZXJJRDsKICAgICAgICAgICAgICAgICAgICBZYSgpCiAgICAgICAgICAgICAgICB9KSwgZSgiI2hlbGxvQ29udGFpbmVyIikuYXR0cigiZGF0YS1sb2dnZWQtaW4iLCAiMSIpLCBoLmNvbnRleHQgPSAiZmFjZWJvb2siLCBoLmxvZ2luSW50ZW50ID0gIjEiLCBjLnVwZGF0ZVN0b3JhZ2UoKSkKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gamMoYSkgewogICAgICAgICAgICBrYSgiOnBhcnR5Iik7CiAgICAgICAgICAgIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtcGFydHktc3RhdGUiLCAiNCIpOwogICAgICAgICAgICBhID0gZGVjb2RlVVJJQ29tcG9uZW50KGEpLnJlcGxhY2UoLy4qIy9naW0sICIiKTsKICAgICAgICAgICAgRGIoIiMiICsgYy5lbmNvZGVVUklDb21wb25lbnQoYSkpOwogICAgICAgICAgICBlLmFqYXgoQ2EgKyAiZ2V0VG9rZW4iLCB7CiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtcGFydHktc3RhdGUiLCAiNiIpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgICAgICBiID0gYi5zcGxpdCgiXG4iKTsKICAgICAgICAgICAgICAgICAgICBlKCIucGFydHlUb2tlbiIpLnZhbCgiYWdhci5pby8jIiArIGMuZW5jb2RlVVJJQ29tcG9uZW50KGEpKTsKICAgICAgICAgICAgICAgICAgICBlKCIjaGVsbG9Db250YWluZXIiKS5hdHRyKCJkYXRhLXBhcnR5LXN0YXRlIiwgIjUiKTsKICAgICAgICAgICAgICAgICAgICBrYSgiOnBhcnR5Iik7CiAgICAgICAgICAgICAgICAgICAgbGIoIndzOi8vIiArIGJbMF0sIGEpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICAgICAgY2FjaGU6ICExLAogICAgICAgICAgICAgICAgY3Jvc3NEb21haW46ICEwLAogICAgICAgICAgICAgICAgZGF0YTogYQogICAgICAgICAgICB9KQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gRGIoYSkgewogICAgICAgICAgICBjLmhpc3RvcnkgJiYgYy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSAmJiBjLmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBjLmRvY3VtZW50LnRpdGxlLCBhKQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gSmEoKSB7CiAgICAgICAgICAgIGNsZWFyVGltZW91dChVYik7CiAgICAgICAgICAgIG51bGwgPT0gYy5zdG9yYWdlSW5mbyAmJiBjLmNyZWF0ZURlZmF1bHRTdG9yYWdlKCk7CiAgICAgICAgICAgIEViID0gRGF0ZS5ub3coKTsKICAgICAgICAgICAgMCA+PSBSYSAmJiAoUmEgPSBFYik7CiAgICAgICAgICAgIEVhID0gITE7CiAgICAgICAgICAgIFFjKCkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEdjKGEsIGIpIHsKICAgICAgICAgICAgdmFyIGQgPSAtMSAhPSBFLmluZGV4T2YoYS5pZCksCiAgICAgICAgICAgICAgICBjID0gLTEgIT0gRS5pbmRleE9mKGIuaWQpLAogICAgICAgICAgICAgICAgZSA9IDMwID4gYi5zaXplOwogICAgICAgICAgICBkICYmIGUgJiYgKyt1YjsKICAgICAgICAgICAgZSB8fCAhZCB8fCBjIHx8IGIuZWEgJiAzMiB8fCArK3diCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBrYyhhKSB7CiAgICAgICAgICAgIGEgPSB+fmE7CiAgICAgICAgICAgIHZhciBiID0gKGEgJSA2MCkudG9TdHJpbmcoKTsKICAgICAgICAgICAgYSA9ICh+fihhIC8gNjApKS50b1N0cmluZygpOwogICAgICAgICAgICAyID4gYi5sZW5ndGggJiYgKGIgPSAiMCIgKyBiKTsKICAgICAgICAgICAgcmV0dXJuIGEgKyAiOiIgKyBiCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBSYygpIHsKICAgICAgICAgICAgaWYgKG51bGwgPT0gQykgcmV0dXJuIDA7CiAgICAgICAgICAgIGZvciAodmFyIGEgPSAwOyBhIDwgQy5sZW5ndGg7ICsrYSkKICAgICAgICAgICAgICAgIGlmICgtMSAhPSBFLmluZGV4T2YoQ1thXS5pZCkpIHJldHVybiBhICsgMTsKICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFNjKCkgewogICAgICAgICAgICBlKCIuc3RhdHMtZm9vZC1lYXRlbiIpLnRleHQodWIpOwogICAgICAgICAgICBlKCIuc3RhdHMtdGltZS1hbGl2ZSIpLnRleHQoa2MoKEViIC0gUmEpIC8gMUUzKSk7CiAgICAgICAgICAgIGUoIi5zdGF0cy1sZWFkZXJib2FyZC10aW1lIikudGV4dChrYyh4YikpOwogICAgICAgICAgICBlKCIuc3RhdHMtaGlnaGVzdC1tYXNzIikudGV4dCh+fihUIC8gMTAwKSk7CiAgICAgICAgICAgIGUoIi5zdGF0cy1jZWxscy1lYXRlbiIpLnRleHQod2IpOwogICAgICAgICAgICBlKCIuc3RhdHMtdG9wLXBvc2l0aW9uIikudGV4dCgwID09IFcgPyAiOigiIDoKICAgICAgICAgICAgICAgIFcpOwogICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzdGF0c0dyYXBoIik7CiAgICAgICAgICAgIGlmIChhKSB7CiAgICAgICAgICAgICAgICB2YXIgYiA9IGEuZ2V0Q29udGV4dCgiMmQiKSwKICAgICAgICAgICAgICAgICAgICBkID0gYS53aWR0aCwKICAgICAgICAgICAgICAgICAgICBhID0gYS5oZWlnaHQ7CiAgICAgICAgICAgICAgICBiLmNsZWFyUmVjdCgwLCAwLCBkLCBhKTsKICAgICAgICAgICAgICAgIGlmICgyIDwgRi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gMjAwLCBnID0gMDsgZyA8IEYubGVuZ3RoOyBnKyspIGMgPSBNYXRoLm1heChGW2ddLCBjKTsKICAgICAgICAgICAgICAgICAgICBiLmxpbmVXaWR0aCA9IDM7CiAgICAgICAgICAgICAgICAgICAgYi5saW5lQ2FwID0gInJvdW5kIjsKICAgICAgICAgICAgICAgICAgICBiLmxpbmVKb2luID0gInJvdW5kIjsKICAgICAgICAgICAgICAgICAgICBiLnN0cm9rZVN0eWxlID0gdmI7CiAgICAgICAgICAgICAgICAgICAgYi5maWxsU3R5bGUgPSB2YjsKICAgICAgICAgICAgICAgICAgICBiLmJlZ2luUGF0aCgpOwogICAgICAgICAgICAgICAgICAgIGIubW92ZVRvKDAsIGEgLSBGWzBdIC8gYyAqIChhIC0gMTApICsgMTApOwogICAgICAgICAgICAgICAgICAgIGZvciAoZyA9IDE7IGcgPCBGLmxlbmd0aDsgZyArPSBNYXRoLm1heCh+fihGLmxlbmd0aCAvIGQpLCAxKSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwID0gZyAvIChGLmxlbmd0aCAtIDEpICogZCwgZiA9IFtdLCBrID0gLTIwOyAyMCA+PSBrOyArK2spIDAgPiBnICsgayB8fCBnICsgayA+PSBGLmxlbmd0aCB8fCBmLnB1c2goRltnICsga10pOwogICAgICAgICAgICAgICAgICAgICAgICBmID0gZi5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhICsgYgogICAgICAgICAgICAgICAgICAgICAgICB9KSAvIGYubGVuZ3RoIC8gYzsKICAgICAgICAgICAgICAgICAgICAgICAgYi5saW5lVG8ocCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgLSBmICogKGEgLSAxMCkgKyAxMCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgYi5zdHJva2UoKTsKICAgICAgICAgICAgICAgICAgICBiLmdsb2JhbEFscGhhID0gLjU7CiAgICAgICAgICAgICAgICAgICAgYi5saW5lVG8oZCwgYSk7CiAgICAgICAgICAgICAgICAgICAgYi5saW5lVG8oMCwgYSk7CiAgICAgICAgICAgICAgICAgICAgYi5maWxsKCk7CiAgICAgICAgICAgICAgICAgICAgYi5nbG9iYWxBbHBoYSA9IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gUWMoKSB7CiAgICAgICAgICAgIGphIHx8IGFhIHx8IChaYSA/IChjLnJlZnJlc2hBZChjLmFkU2xvdHMuYWIpLCBTYygpLCBhYSA9ICEwLCBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGUoIiNvdmVybGF5cyIpLmZhZGVJbig1MDAsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBnYSgpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGUoIiNzdGF0cyIpLnNob3coKTsKICAgICAgICAgICAgICAgIHZhciBhID0gbGMoImdfcGx1c19zaGFyZV9zdGF0cyIpOwogICAgICAgICAgICAgICAgYy5maWxsU29jaWFsVmFsdWVzKGEsICJnUGx1c1NoYXJlIikKICAgICAgICAgICAgfSwgMTUwMCkpIDogeWEoNTAwKSkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGxjKGEpIHsKICAgICAgICAgICAgdmFyIGIgPSBlKCIuc3RhdHMtdGltZS1hbGl2ZSIpLnRleHQoKTsKICAgICAgICAgICAgcmV0dXJuIGMucGFyc2VTdHJpbmcoYSwgIiVAIiwgW2Iuc3BsaXQoIjoiKVswXSwgYi5zcGxpdCgiOiIpWzFdLCBlKCIuc3RhdHMtaGlnaGVzdC1tYXNzIikudGV4dCgpXSkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFRjKCkgewogICAgICAgICAgICBjLm9wZW4oImh0dHBzOi8vcGx1cy5nb29nbGUuY29tL3NoYXJlP3VybD13d3cuYWdhci5pbyZobD1lbi1VUyIsICJBZ2FyLmlvIiwgIndpZHRoPTQ4NCxoZWlnaHQ9NTgwLG1lbnViYXI9bm8sdG9vbGJhcj1ubyxyZXNpemFibGU9eWVzLHNjcm9sbGJhcnM9bm8sbGVmdD0iICsgKGMuc2NyZWVuWCArIGMuaW5uZXJXaWR0aCAvIDIgLSAyNDIpICsgIix0b3A9IiArIChjLmlubmVySGVpZ2h0IC0gNTgwKSAvIDIpCiAgICAgICAgfQogICAgICAgIHZhciBtYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwogICAgICAgIGlmICgidW5kZWZpbmVkIiA9PSB0eXBlb2YgY29uc29sZSB8fCAidW5kZWZpbmVkIiA9PSB0eXBlb2YgRGF0YVZpZXcgfHwgInVuZGVmaW5lZCIgPT0gdHlwZW9mIFdlYlNvY2tldCB8fCBudWxsID09IG1jIHx8IG51bGwgPT0gbWMuZ2V0Q29udGV4dCB8fCBudWxsID09IGMubG9jYWxTdG9yYWdlKSBhbGVydCgiWW91IGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIGdhbWUsIHdlIHJlY29tbWVuZCB5b3UgdG8gdXNlIEZpcmVmb3ggdG8gcGxheSB0aGlzIik7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHZhciBEID0ge307CiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgYSA9IGMubG9jYXRpb24uc2VhcmNoOwogICAgICAgICAgICAgICAgIj8iID09IGEuY2hhckF0KDApICYmIChhID0KICAgICAgICAgICAgICAgICAgICBhLnNsaWNlKDEpKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSBhLnNwbGl0KCImIiksIGIgPSAwOyBiIDwgYS5sZW5ndGg7IGIrKykgewogICAgICAgICAgICAgICAgICAgIHZhciBkID0gYVtiXS5zcGxpdCgiPSIpOwogICAgICAgICAgICAgICAgICAgIERbZFswXV0gPSBkWzFdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgIGMucXVlcnlTdHJpbmcgPSBEOwogICAgICAgICAgICB2YXIgbmMgPSAiZmIiIGluIEQsCiAgICAgICAgICAgICAgICBVYyA9ICJtaW5pY2xpcCIgaW4gRCwKICAgICAgICAgICAgICAgIHYgPSB7CiAgICAgICAgICAgICAgICAgICAgc2tpbnNFbmFibGVkOiAiMCIsCiAgICAgICAgICAgICAgICAgICAgbmFtZXNFbmFibGVkOiAiMCIsCiAgICAgICAgICAgICAgICAgICAgbm9Db2xvcnM6ICIwIiwKICAgICAgICAgICAgICAgICAgICBibGFja1RoZW1lOiAiMCIsCiAgICAgICAgICAgICAgICAgICAgc2hvd01hc3M6ICIwIiwKICAgICAgICAgICAgICAgICAgICBzdGF0c0VuYWJsZWQ6ICIwIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFZjID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHVhKCIiLCAtMSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvYyA9ICJodHRwOiIgIT0gYy5sb2NhdGlvbi5wcm90b2NvbCwKICAgICAgICAgICAgICAgIFdjID0gIjEiID09IHRjKCksCiAgICAgICAgICAgICAgICBwYyA9ICExOwogICAgICAgICAgICBuYyB8fCBVYyB8fCAob2MgJiYgIVdjID8gKHVhKCIxIiwgMSksIGMubG9jYXRpb24uaHJlZiA9ICJodHRwOiIgKyBjLmxvY2F0aW9uLmhyZWYuc3Vic3RyaW5nKGMubG9jYXRpb24ucHJvdG9jb2wubGVuZ3RoKSwgcGMgPSAhMCkgOiB1YSgiIiwgLTEpKTsKICAgICAgICAgICAgb2MgfHwgdWEoIiIsIC0xKTsKICAgICAgICAgICAgcGMgfHwgc2V0VGltZW91dChWYywgM0UzKTsKICAgICAgICAgICAgaWYgKCFjLmFnYXJpb05vSW5pdCkgewogICAgICAgICAgICAgICAgdmFyIGpiID0gYy5sb2NhdGlvbi5wcm90b2NvbCwKICAgICAgICAgICAgICAgICAgICBtYiA9ICJodHRwczoiID09IGpiOwogICAgICAgICAgICAgICAgRC5tYXN0ZXIgJiYgKEVudkNvbmZpZy5tYXN0ZXJfdXJsID0gRC5tYXN0ZXIpOwogICAgICAgICAgICAgICAgdmFyIENhID0gamIgKyAiLy8iICsgRW52Q29uZmlnLm1hc3Rlcl91cmwgKyAiLyIsCiAgICAgICAgICAgICAgICAgICAgJGEgPSBjLm5hdmlnYXRvci51c2VyQWdlbnQ7CiAgICAgICAgICAgICAgICBpZiAoLTEgIT0gJGEuaW5kZXhPZigiQW5kcm9pZCIpKSBjLmdhICYmIGMuZ2EoInNlbmQiLCAiZXZlbnQiLCAiTW9iaWxlUmVkaXJlY3QiLCAiUGxheVN0b3JlIiksIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGMubG9jYXRpb24uaHJlZiA9ICJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9Y29tLm1pbmljbGlwLmFnYXIuaW8iCiAgICAgICAgICAgICAgICB9LCAxRTMpOwogICAgICAgICAgICAgICAgZWxzZSBpZiAoLTEgIT0gJGEuaW5kZXhPZigiaVBob25lIikgfHwgLTEgIT0gJGEuaW5kZXhPZigiaVBhZCIpIHx8IC0xICE9ICRhLmluZGV4T2YoImlQb2QiKSkgYy5nYSAmJiBjLmdhKCJzZW5kIiwgImV2ZW50IiwgIk1vYmlsZVJlZGlyZWN0IiwgIkFwcFN0b3JlIiksIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGMubG9jYXRpb24uaHJlZiA9ICJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vYXBwL2FnYXIuaW8vaWQ5OTU5OTk3MDM/bXQ9OCZhdD0xbDN2YWpwIgogICAgICAgICAgICAgICAgfSwgMUUzKTsKICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBtID0ge307CiAgICAgICAgICAgICAgICAgICAgYy5hZ2FyQXBwID0gbTsKICAgICAgICAgICAgICAgICAgICB2YXIgeWIsIGYsIE8sIHIsIHQsIGlhID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgdyA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgIHkgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICB6ID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgRSA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBxID0gW10sCiAgICAgICAgICAgICAgICAgICAgICAgIEsgPSB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgQSA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBiYSA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBDID0gW10sCiAgICAgICAgICAgICAgICAgICAgICAgIFkgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBaID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgemEgPSAtMSwKICAgICAgICAgICAgICAgICAgICAgICAgQWEgPSAtMSwKICAgICAgICAgICAgICAgICAgICAgICAgSmMgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICB4ID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgYmMgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBOID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgTWEgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBOYSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIE9hID0gMUU0LAogICAgICAgICAgICAgICAgICAgICAgICBQYSA9IDFFNCwKICAgICAgICAgICAgICAgICAgICAgICAgbCA9IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIEcgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBhYiA9ICEwLAogICAgICAgICAgICAgICAgICAgICAgICBmYSA9ICEwLAogICAgICAgICAgICAgICAgICAgICAgICB0YSA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICBzYiA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICBUID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgZWEgPSAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgYmIgPSAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgcGEgPSB5ID0gfn4oKE1hICsgT2EpIC8gMiksCiAgICAgICAgICAgICAgICAgICAgICAgIHFhID0geiA9IH5+KChOYSArIFBhKSAvIDIpLAogICAgICAgICAgICAgICAgICAgICAgICByYSA9IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGxhID0gIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEkgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBnYiA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICBwYiA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICBuYiA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIG9iID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgS2EgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBMYSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIE1jID0gWyIjMzMzMzMzIiwgIiNGRjMzMzMiLCAiIzMzRkYzMyIsICIjMzMzM0ZGIl0sCiAgICAgICAgICAgICAgICAgICAgICAgIHpiID0gITEsCiAgICAgICAgICAgICAgICAgICAgICAgIG5hID0gITEsCiAgICAgICAgICAgICAgICAgICAgICAgIEZhID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgUCA9IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIEIgPSAxLAogICAgICAgICAgICAgICAgICAgICAgICBqYSA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICBrYiA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGNjID0gITAsCiAgICAgICAgICAgICAgICAgICAgICAgIHJiID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgcWIgPSAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgSiA9IG5ldyBJbWFnZTsKICAgICAgICAgICAgICAgICAgICBKLnNyYyA9ICIvaW1nL2JhY2tncm91bmQucG5nIjsKICAgICAgICAgICAgICAgICAgICB2YXIgZGMgPSAib250b3VjaHN0YXJ0IiBpbiBjICYmIC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChjLm5hdmlnYXRvci51c2VyQWdlbnQpLAogICAgICAgICAgICAgICAgICAgICAgICBBYiA9IG5ldyBJbWFnZTsKICAgICAgICAgICAgICAgICAgICBBYi5zcmMgPSAiL2ltZy9zcGxpdC5wbmciOwogICAgICAgICAgICAgICAgICAgIHZhciB2YSA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICB3YSA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICB4YSA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICBjYiA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICBGYiwgR2I7CiAgICAgICAgICAgICAgICAgICAgImdhbWVwYWQiIGluIEQgJiYgc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBjYiAmJiAoWSA9IGRiLmhhKFksIEZiKSwgWiA9IGRiLmhhKFosIEdiKSkKICAgICAgICAgICAgICAgICAgICB9LCAyNSk7CiAgICAgICAgICAgICAgICAgICAgYy5nYW1lcGFkQXhpc1VwZGF0ZSA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gLjEgPiBiICogYjsKICAgICAgICAgICAgICAgICAgICAgICAgMCA9PSBhICYmIChkID8gRmIgPSByIC8gMiA6IChGYiA9IChiICsgMSkgLyAyICogciwgY2IgPSAhMCkpOwogICAgICAgICAgICAgICAgICAgICAgICAxID09IGEgJiYgKGQgPyBHYiA9IHQgLyAyIDogKEdiID0gKGIgKyAxKSAvIDIgKiB0LCBjYiA9ICEwKSkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGMuYWdhcmlvSW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2IgPSAhMDsKICAgICAgICAgICAgICAgICAgICAgICAgeGMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgd2MoKTsKICAgICAgICAgICAgICAgICAgICAgICAgbS5jb3JlLmluaXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSBjLmxvY2FsU3RvcmFnZS5zZXR0aW5ncyAmJiAodiA9IEpTT04ucGFyc2UoYy5sb2NhbFN0b3JhZ2Uuc2V0dGluZ3MpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmIgPSB2LnNob3dNYXNzLCBlYSA9IHYuYmxhY2tUaGVtZSwgZmEgPSB2Lm5hbWVzRW5hYmxlZCwgdGEgPSB2Lm5vQ29sb3JzLCBaYSA9IHYuc3RhdHNFbmFibGVkLCBhYiA9IHYuc2tpbnNFbmFibGVkKTsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiI3Nob3dNYXNzIikucHJvcCgiY2hlY2tlZCIsIHYuc2hvd01hc3MpOwogICAgICAgICAgICAgICAgICAgICAgICBlKCIjbm9Ta2lucyIpLnByb3AoImNoZWNrZWQiLCAhdi5za2luc0VuYWJsZWQpOwogICAgICAgICAgICAgICAgICAgICAgICBlKCIjc2tpcFN0YXRzIikucHJvcCgiY2hlY2tlZCIsICF2LnN0YXRzRW5hYmxlZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIiNub0NvbG9ycyIpLnByb3AoImNoZWNrZWQiLCB2Lm5vQ29sb3JzKTsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiI25vTmFtZXMiKS5wcm9wKCJjaGVja2VkIiwgIXYubmFtZXNFbmFibGVkKTsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiI2RhcmtUaGVtZSIpLnByb3AoImNoZWNrZWQiLCB2LmJsYWNrVGhlbWUpOwogICAgICAgICAgICAgICAgICAgICAgICBMYigpOwogICAgICAgICAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChMYiwgMThFNCk7CiAgICAgICAgICAgICAgICAgICAgICAgIE8gPSB5YiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjYW52YXMiKTsKICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSBPICYmIChmID0gTy5nZXRDb250ZXh0KCIyZCIpLCBPLm9ubW91c2Vkb3duID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gYS5jbGllbnRYIC0gKDUgKyByIC8gNSAvIDIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gYS5jbGllbnRZIC0gKDUgKyByIC8gNSAvIDIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLnNxcnQoYiAqIGIgKyBkICogZCkgPD0gciAvIDUgLyAyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGViKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFkgPSAxICogYS5jbGllbnRYOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgWiA9IDEgKiBhLmNsaWVudFk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgU2EoKQogICAgICAgICAgICAgICAgICAgICAgICB9LCBPLm9ubW91c2Vtb3ZlID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNiID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBZID0gMSAqIGEuY2xpZW50WDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFogPSAxICogYS5jbGllbnRZOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmIoKQogICAgICAgICAgICAgICAgICAgICAgICB9LCBPLm9ubW91c2V1cCA9IGZ1bmN0aW9uICgpIHsgfSwgL2ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpID8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigiRE9NTW91c2VTY3JvbGwiLCBLYiwgITEpIDogZG9jdW1lbnQuYm9keS5vbm1vdXNld2hlZWwgPSBLYiwgYy5vbmJsdXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBYKDE5KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhhID0gd2EgPSB2YSA9ICExCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGMub25yZXNpemUgPSBYYiwgYy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocWMpLCBzZXRJbnRlcnZhbChTYSwgNDApLCBHICYmIGUoIiNyZWdpb24iKS52YWwoRyksIE5iKCksIERhKGUoIiNyZWdpb24iKS52YWwoKSksIDAgPT0ga2IgJiYgRyAmJiBRKCksIHlhKDApLCBYYigpLCBjLmxvY2F0aW9uLmhhc2ggJiYgNiA8PSBjLmxvY2F0aW9uLmhhc2gubGVuZ3RoICYmIGpjKGMubG9jYXRpb24uaGFzaCkpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB2YXIgQmEgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIGMuc2V0TmljayA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGMuZ2EgJiYgYy5nYSgic2VuZCIsICJldmVudCIsICJOaWNrIiwgYS50b0xvd2VyQ2FzZSgpKTsKICAgICAgICAgICAgICAgICAgICAgICAgTWIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgTiA9IGE7CiAgICAgICAgICAgICAgICAgICAgICAgIFNiKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIFQgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICB2LnNraW5zRW5hYmxlZCA9IGFiOwogICAgICAgICAgICAgICAgICAgICAgICB2Lm5hbWVzRW5hYmxlZCA9IGZhOwogICAgICAgICAgICAgICAgICAgICAgICB2Lm5vQ29sb3JzID0gdGE7CiAgICAgICAgICAgICAgICAgICAgICAgIHYuYmxhY2tUaGVtZSA9IGVhOwogICAgICAgICAgICAgICAgICAgICAgICB2LnNob3dNYXNzID0gYmI7CiAgICAgICAgICAgICAgICAgICAgICAgIHYuc3RhdHNFbmFibGVkID0gWmE7CiAgICAgICAgICAgICAgICAgICAgICAgIGMubG9jYWxTdG9yYWdlLnNldHRpbmdzID0gSlNPTi5zdHJpbmdpZnkodik7CiAgICAgICAgICAgICAgICAgICAgICAgIEliKCkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGMuc2V0U2tpbnMgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICBhYiA9IGEKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGMuc2V0TmFtZXMgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICBmYSA9IGEKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGMuc2V0RGFya1RoZW1lID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZWEgPSBhCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBjLnNldENvbG9ycyA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhID0gYQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgYy5zZXRTaG93TWFzcyA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJiID0gYQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgYy5zcGVjdGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgTiA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIEliKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIFgoMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIE1iKCkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGMuc2V0UmVnaW9uID0gRGE7CiAgICAgICAgICAgICAgICAgICAgdmFyIGhiID0gITA7CiAgICAgICAgICAgICAgICAgICAgYy5zZXRHYW1lTW9kZSA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGEgIT0gbGEgJiYgKCI6cGFydHkiID09IGxhICYmIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtcGFydHktc3RhdGUiLCAiMCIpLCBrYShhKSwgIjpwYXJ0eSIgIT0gYSAmJiBRKCkpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBjLnNldEFjaWQgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICB6YiA9IGEKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHZhciBYYyA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0ge30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gITEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBEcmF3OiAhMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWN0aW9uTW9kaWZpZXI6IDEuMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgYS5pbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5hY2NvdW50LmluaXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uZ29vZ2xlLnZhKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmZhLmluaXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkID0gImRlYnVnIiBpbiBjLnF1ZXJ5U3RyaW5nKSAmJiBtLmRlYnVnLnNob3dEZWJ1ZygpCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGEuYmluZCA9IGZ1bmN0aW9uIChhLCBkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKGIpLmJpbmQoYSwgZCkKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgYS51bmJpbmQgPSBmdW5jdGlvbiAoYSwgZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZShiKS51bmJpbmQoYSwgZCkKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgYS50cmlnZ2VyID0gZnVuY3Rpb24gKGEsIGQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUoYikudHJpZ2dlcihhLCBkKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBhLl9fZGVmaW5lR2V0dGVyX18oImRlYnVnIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGEuX19kZWZpbmVTZXR0ZXJfXygiZGVidWciLCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQgPSBhCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBhLl9fZGVmaW5lR2V0dGVyX18oInByb3h5IiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuTUMKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGEuX19kZWZpbmVHZXR0ZXJfXygiY29uZmlnIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHUKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgICAgICAgICAgfSh7fSk7CiAgICAgICAgICAgICAgICAgICAgbS5jb3JlID0gWGM7CiAgICAgICAgICAgICAgICAgICAgbS5jYWNoZSA9IHt9OwogICAgICAgICAgICAgICAgICAgIHZhciBZYyA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGIoYSwgYiwgZCwgYykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGEgKyAiQ2FudmFzIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnID0gZSgiPGNhbnZhcz4iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmQoZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gbmV3IFNtb290aGllQ2hhcnQoZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGcgPSAwOyBnIDwgYi5sZW5ndGg7IGcrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gYltnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IF8uZXh0ZW5kKGgsIGNbZ10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuYWRkVGltZVNlcmllcyh1LCBmKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zdHJlYW1Ubyhkb2N1bWVudC5nZXRFbGVtZW50QnlJZChhKSwgMCkKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZChhLCBkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrW2FdID0gYygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYihhLCBba1thXV0sIGQsIFt7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6ICJyZ2JhKDAsIDI1NSwgMCwgMSkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogInJnYmEoMCwgMjU1LCAwLCAwLjIpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUaW1lU2VyaWVzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBLYTogITEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAsIGYgPSAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6ICJyZ2JhKDAsIDI1NSwgMCwgMSkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogInJnYmEoMCwgMjU1LCAwLCAwLjIpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGEuc2hvd0RlYnVnID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZyB8fCAocCA9IGUoIiNkZWJ1Zy1vdmVybGF5IiksIGQoIm5ldHdvcmtVcGRhdGUiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIm5ldHdvcmsgdXBkYXRlcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluVmFsdWU6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4VmFsdWU6IDEyMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGQoImZwcyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiZnBzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5WYWx1ZTogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhWYWx1ZTogMTIwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgay5ydHRTRGV2ID0gYygpLCBrLnJ0dE1lYW4gPSBjKCksIGIoInJ0dE1lYW4iLCBbay5ydHRTRGV2LCBrLnJ0dE1lYW5dLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInJ0dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluVmFsdWU6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4VmFsdWU6IDEyMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgW3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogInJnYmEoMjU1LCAwLCAwLCAxKSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiAicmdiYSgwLCAyNTUsIDAsIDAuMikiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiAicmdiYSgwLCAyNTUsIDAsIDEpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6ICJyZ2JhKDAsIDI1NSwgMCwgMCkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0pLCBnID0gITApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb3JlLmRlYnVnID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLnNob3coKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBhLmhpZGVEZWJ1ZyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb3JlLmRlYnVnID0gITEKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgYS51cGRhdGVDaGFydCA9IGZ1bmN0aW9uIChhLCBiLCBkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnICYmIGEgaW4gayAmJiBrW2FdLmFwcGVuZChiLCBkKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBhLl9fZGVmaW5lR2V0dGVyX18oInNob3dQcmVkaWN0aW9uIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGEuX19kZWZpbmVTZXR0ZXJfXygic2hvd1ByZWRpY3Rpb24iLCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYgPSBhCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgICAgIH0oe30pOwogICAgICAgICAgICAgICAgICAgIG0uZGVidWcgPSBZYzsKICAgICAgICAgICAgICAgICAgICB2YXIgbWEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEFGOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBBWDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEFMOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgRFo6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBBUzogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEFEOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgQU86ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBBSTogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBBRzogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBBUjogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIEFNOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBBVzogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBBVTogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEFUOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgQVo6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIEJTOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEJIOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBCRDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgQkI6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgQlk6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBCRTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEJaOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEJKOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgQk06ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgQlQ6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIEJPOiAiQlItQnJhemlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgQlE6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgQkE6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBCVzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEJSOiAiQlItQnJhemlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgSU86ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIFZHOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEJOOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBCRzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEJGOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgQkk6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBLSDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgQ006ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBDQTogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBDVjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEtZOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIENGOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgVEQ6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBDTDogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIENOOiAiQ04tQ2hpbmEiLAogICAgICAgICAgICAgICAgICAgICAgICBDWDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgQ0M6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIENPOiAiQlItQnJhemlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgS006ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBDRDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIENHOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgQ0s6ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgICAgICBDUjogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBDSTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEhSOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgQ1U6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgQ1c6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgQ1k6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIENaOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgREs6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBESjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIERNOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIERPOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEVDOiAiQlItQnJhemlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgRUc6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBTVjogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBHUTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEVSOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgRUU6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBFVDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEZPOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgRks6ICJCUi1CcmF6aWwiLAogICAgICAgICAgICAgICAgICAgICAgICBGSjogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEZJOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgRlI6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBHRjogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIFBGOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgR0E6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBHTTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEdFOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBERTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEdIOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgR0k6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBHUjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEdMOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEdEOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEdQOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEdVOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgR1Q6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgR0c6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBHTjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEdXOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgR1k6ICJCUi1CcmF6aWwiLAogICAgICAgICAgICAgICAgICAgICAgICBIVDogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBWQTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEhOOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEhLOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBIVTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIElTOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgSU46ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIElEOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBJUjogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgSVE6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIElFOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgSU06ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBJTDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgSVQ6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBKTTogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBKUDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgSkU6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBKTzogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgS1o6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIEtFOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgS0k6ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgICAgICBLUDogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgS1I6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIEtXOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBLRzogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgTEE6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIExWOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgTEI6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIExTOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgTFI6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBMWTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIExJOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgTFQ6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBMVTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1POiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBNSzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1HOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgTVc6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBNWTogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgTVY6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1MOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgTVQ6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBNSDogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1ROiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1SOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgTVU6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBZVDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1YOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEZNOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgTUQ6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBNQzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1OOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBNRTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1TOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1BOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgTVo6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBNTTogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgTkE6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBOUjogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIE5QOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBOTDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIE5DOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgTlo6ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgICAgICBOSTogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBORTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIE5HOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgTlU6ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgICAgICBORjogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1QOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgTk86ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBPTTogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgUEs6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIFBXOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgUFM6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIFBBOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIFBHOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgUFk6ICJCUi1CcmF6aWwiLAogICAgICAgICAgICAgICAgICAgICAgICBQRTogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIFBIOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBQTjogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIFBMOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgUFQ6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBQUjogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBRQTogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgUkU6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBSTzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIFJVOiAiUlUtUnVzc2lhIiwKICAgICAgICAgICAgICAgICAgICAgICAgUlc6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBCTDogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBTSDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEtOOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIExDOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIE1GOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIFBNOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIFZDOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIFdTOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgU006ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBTVDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIFNBOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgU046ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBSUzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIFNDOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgU0w6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBTRzogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgU1g6ICJVUy1BdGxhbnRhIiwKICAgICAgICAgICAgICAgICAgICAgICAgU0s6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBTSTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIFNCOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgU086ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBaQTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIFNTOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgRVM6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBMSzogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgU0Q6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBTUjogIkJSLUJyYXppbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIFNKOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgU1o6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBTRTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIENIOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgU1k6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBUVzogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgVEo6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIFRaOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgVEg6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIFRMOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBURzogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIFRLOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgVE86ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgICAgICBUVDogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBUTjogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIFRSOiAiVEstVHVya2V5IiwKICAgICAgICAgICAgICAgICAgICAgICAgVE06ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIFRDOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIFRWOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgVUc6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBVQTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIEFFOiAiRVUtTG9uZG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgR0I6ICJFVS1Mb25kb24iLAogICAgICAgICAgICAgICAgICAgICAgICBVUzogIlVTLUF0bGFudGEiLAogICAgICAgICAgICAgICAgICAgICAgICBVTTogIlNHLVNpbmdhcG9yZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIFZJOiAiVVMtQXRsYW50YSIsCiAgICAgICAgICAgICAgICAgICAgICAgIFVZOiAiQlItQnJhemlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgVVo6ICJKUC1Ub2t5byIsCiAgICAgICAgICAgICAgICAgICAgICAgIFZVOiAiU0ctU2luZ2Fwb3JlIiwKICAgICAgICAgICAgICAgICAgICAgICAgVkU6ICJCUi1CcmF6aWwiLAogICAgICAgICAgICAgICAgICAgICAgICBWTjogIkpQLVRva3lvIiwKICAgICAgICAgICAgICAgICAgICAgICAgV0Y6ICJTRy1TaW5nYXBvcmUiLAogICAgICAgICAgICAgICAgICAgICAgICBFSDogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIFlFOiAiSlAtVG9reW8iLAogICAgICAgICAgICAgICAgICAgICAgICBaTTogIkVVLUxvbmRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIFpXOiAiRVUtTG9uZG9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIG9hID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgR2EgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBTID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgVWI7CiAgICAgICAgICAgICAgICAgICAgYy5jb25uZWN0ID0gbGI7CiAgICAgICAgICAgICAgICAgICAgdmFyIElhID0gNTAwLAogICAgICAgICAgICAgICAgICAgICAgICBDYyA9IC44NzUsCiAgICAgICAgICAgICAgICAgICAgICAgIEVjID0gLjc1LAogICAgICAgICAgICAgICAgICAgICAgICBGYyA9IC4yNSwKICAgICAgICAgICAgICAgICAgICAgICAgRGMgPSAuMTI1LAogICAgICAgICAgICAgICAgICAgICAgICBWYiA9IC0xLAogICAgICAgICAgICAgICAgICAgICAgICBXYiA9IC0xOwogICAgICAgICAgICAgICAgICAgIGMuc2VuZE1pdG9zaXMgPSBlYjsKICAgICAgICAgICAgICAgICAgICBjLnNlbmRFamVjdCA9IEpiOwogICAgICAgICAgICAgICAgICAgIG0ubmV0d29ya2luZyA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGEubG9naW5SZWFsbSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdHOiAiZ29vZ2xlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZCOiAiZmFjZWJvb2siCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGEuc2VuZE1lc3NhZ2UgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGEuYnl0ZVZpZXc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gVSgxICsgYS5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnNldFVpbnQ4KDAsIDEwMik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgZC5sZW5ndGg7ICsrYykgYS5zZXRVaW50OCgxICsgYywgZFtjXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eHQgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBkLmxlbmd0aDsgKytjKSB0eHQgKz0gJ1snICsgYyArICctJyArIGRbY10gKyAnXScgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGRbY10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdQQUNLRVQgMTAyJyxkLmxlbmd0aCxkLmxlbmd0aC0zMCxkLHR4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2VuZFRva2VuKGQpOy8vQUdBUkJPVE9WSAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWKGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgICAgIH0oe30pOwogICAgICAgICAgICAgICAgICAgIHZhciBIID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgTSA9IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIFVhID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgcmMgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBxYyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gRGF0ZS5ub3coKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gMUUzIC8gNjA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHFjKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IERhdGUubm93KCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBkIC0gYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSA+IGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGQgLSBlICUgYjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBEYXRlLm5vdygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhZGEoKSB8fCAyNDAgPiBnIC0gRmEgfHwgIW0uY29yZS5jb25maWcuc2tpcERyYXcgPyBZYigpIDogY29uc29sZS53YXJuKCJTa2lwcGluZyBkcmF3Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFpjKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJjID0gMUUzIC8gZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5kZWJ1Zy51cGRhdGVDaGFydCgiZnBzIiwgZCwgcmMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KCksCiAgICAgICAgICAgICAgICAgICAgICAgIGhhID0ge30sCiAgICAgICAgICAgICAgICAgICAgICAgIE9iID0gInBvbGFuZDt1c2E7Y2hpbmE7cnVzc2lhO2NhbmFkYTthdXN0cmFsaWE7c3BhaW47YnJhemlsO2dlcm1hbnk7dWtyYWluZTtmcmFuY2U7c3dlZGVuO2NoYXBsaW47bm9ydGgga29yZWE7c291dGgga29yZWE7amFwYW47dW5pdGVkIGtpbmdkb207ZWFydGg7Z3JlZWNlO2xhdHZpYTtsaXRodWFuaWE7ZXN0b25pYTtmaW5sYW5kO25vcndheTtjaWE7bWFsZGl2YXM7YXVzdHJpYTtuaWdlcmlhO3JlZGRpdDt5YXJhbmFpa2E7Y29uZmVkZXJhdGU7OWdhZztpbmRpYW5hOzRjaGFuO2l0YWx5O2J1bGdhcmlhO3R1bWJscjsyY2guaGs7aG9uZyBrb25nO3BvcnR1Z2FsO2phbWFpY2E7Z2VybWFuIGVtcGlyZTttZXhpY287c2FuaWs7c3dpdHplcmxhbmQ7Y3JvYXRpYTtjaGlsZTtpbmRvbmVzaWE7YmFuZ2xhZGVzaDt0aGFpbGFuZDtpcmFuO2lyYXE7cGVydTttb29uO2JvdHN3YW5hO2Jvc25pYTtuZXRoZXJsYW5kcztldXJvcGVhbiB1bmlvbjt0YWl3YW47cGFraXN0YW47aHVuZ2FyeTtzYXRhbmlzdDtxaW5nIGR5bmFzdHk7bWF0cmlhcmNoeTtwYXRyaWFyY2h5O2ZlbWluaXNtO2lyZWxhbmQ7dGV4YXM7ZmFjZXB1bmNoO3Byb2RvdGE7Y2FtYm9kaWE7c3RlYW07cGljY29sbztlYTtpbmRpYTtrYztkZW5tYXJrO3F1ZWJlYztheXkgbG1hbztzZWFsYW5kO2JhaXQ7dHNhcmlzdCBydXNzaWE7b3JpZ2luO3ZpbmVzYXVjZTtzdGFsaW47YmVsZ2l1bTtsdXhlbWJvdXJnO3N0dXNzeTtwcnVzc2lhOzhjaDthcmdlbnRpbmE7c2NvdGxhbmQ7c2lyO3JvbWFuaWE7d29qYWs7ZG9nZTtuYXNhO2J5emFudGl1bTtpbXBlcmlhbCBqYXBhbjtmcmVuY2gga2luZ2RvbTtzb21hbGlhO3R1cmtleTttYXJzO3Bva2VyZmFjZTs4O2lycztyZWNlaXRhIGZlZGVyYWw7ZmFjZWJvb2s7cHV0aW47bWVya2VsO3RzaXByYXM7b2JhbWE7a2ltIGpvbmctdW47ZGlsbWE7aG9sbGFuZGU7YmVybHVzY29uaTtjYW1lcm9uO2NsaW50b247aGlsbGFyeTt2ZW5lenVlbGE7YmxhdHRlcjtjaGF2ZXo7Y3ViYTtmaWRlbDttZXJrZWw7cGFsaW47cXVlZW47Ym9yaXM7YnVzaDt0cnVtcCIuc3BsaXQoIjsiKSwKICAgICAgICAgICAgICAgICAgICAgICAgJGMgPSAiODtuYXNhO3B1dGluO21lcmtlbDt0c2lwcmFzO29iYW1hO2tpbSBqb25nLXVuO2RpbG1hO2hvbGxhbmRlO2Jlcmx1c2Nvbmk7Y2FtZXJvbjtjbGludG9uO2hpbGxhcnk7YmxhdHRlcjtjaGF2ZXo7ZmlkZWw7bWVya2VsO3BhbGluO3F1ZWVuO2JvcmlzO2J1c2g7dHJ1bXAiLnNwbGl0KCI7IiksCiAgICAgICAgICAgICAgICAgICAgICAgIHNhID0ge307CiAgICAgICAgICAgICAgICAgICAgQmIucHJvdG90eXBlID0gewogICAgICAgICAgICAgICAgICAgICAgICAkOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgICAgICAgICBmOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBiOiAwCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB2YXIgVGEgPSAtMSwKICAgICAgICAgICAgICAgICAgICAgICAgJGIgPSAhMTsKICAgICAgICAgICAgICAgICAgICBjYS5wcm90b3R5cGUgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBhOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBpOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBTOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgICAgICAgICB5OiAwLAogICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBzOiAwLAogICAgICAgICAgICAgICAgICAgICAgICB1OiAwLAogICAgICAgICAgICAgICAgICAgICAgICBvOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBqYTogMCwKICAgICAgICAgICAgICAgICAgICAgICAga2E6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGc6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIE06IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIE46IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIEo6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIEs6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGVhOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBVOiAwLAogICAgICAgICAgICAgICAgICAgICAgICByYTogMCwKICAgICAgICAgICAgICAgICAgICAgICAgRzogITEsCiAgICAgICAgICAgICAgICAgICAgICAgIGM6ICExLAogICAgICAgICAgICAgICAgICAgICAgICBoOiAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgVjogITAsCiAgICAgICAgICAgICAgICAgICAgICAgIGRhOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBDOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBpYTogMCwKICAgICAgICAgICAgICAgICAgICAgICAgdWE6ICExLAogICAgICAgICAgICAgICAgICAgICAgICBJOiAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgY2E6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChhID0gMDsgYSA8IEEubGVuZ3RoOyBhKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFbYV0gPT0gdGhpcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBLnNwbGljZShhLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgS1t0aGlzLmlkXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBxLmluZGV4T2YodGhpcyk7IC0xICE9IGEgJiYgKHNiID0gITAsIHEuc3BsaWNlKGEsIDEpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBFLmluZGV4T2YodGhpcy5pZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0FHQVJCT1RPVkgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtMSAhPSBhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5zcGxpY2UoYSwgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTXlCYWxsKHRoaXMuaWQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9BR0FSQk9UT1ZICiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkcgPSAhMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgPCB0aGlzLmRhICYmIGJhLnB1c2godGhpcykKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgbTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4KH5+KC4zICogdGhpcy5zaXplKSwgMjQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIEE6IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lID0gYSkgbnVsbCA9PSB0aGlzLmkgPyB0aGlzLmkgPSBuZXcgVmEodGhpcy5tKCksICIjRkZGRkZGIiwgITAsICIjMDAwMDAwIikgOiB0aGlzLmkuUCh0aGlzLm0oKSksIHRoaXMuaS5CKHRoaXMubmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYmE6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSB0aGlzLkgoKSA7IHRoaXMuYS5sZW5ndGggPiBhOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gfn4oTWF0aC5yYW5kb20oKSAqIHRoaXMuYS5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYS5zcGxpY2UoYiwgMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoMCA9PSB0aGlzLmEubGVuZ3RoICYmIDAgPCBhICYmIHRoaXMuYS5wdXNoKG5ldyBCYih0aGlzLCB0aGlzLngsIHRoaXMueSwgdGhpcy5zaXplLCBNYXRoLnJhbmRvbSgpIC0gLjUpKSA7IHRoaXMuYS5sZW5ndGggPCBhOykgYiA9IH5+KE1hdGgucmFuZG9tKCkgKiB0aGlzLmEubGVuZ3RoKSwgYiA9IHRoaXMuYVtiXSwgdGhpcy5hLnB1c2gobmV3IEJiKHRoaXMsIGIueCwgYi55LCBiLmYsIGIuYikpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIEg6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gMTA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMCA+IHRoaXMuc2l6ZSAmJiAoYSA9IDApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jICYmIChhID0gMzApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSB0aGlzLnNpemU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmMgfHwgKGIgKj0gbCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiICo9IE07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gfn5NYXRoLm1heChiLCBhKQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBCYTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5iYSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IHRoaXMuYSwgYiA9IGEubGVuZ3RoLCBkID0gdGhpcywgYyA9IHRoaXMuYyA/IDAgOiAodGhpcy5pZCAvIDFFMyArIHggLyAxRTQpICUgKDIgKiBNYXRoLlBJKSwgZSA9IDAsIHAgPSAwOyBwIDwgYjsgKytwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBhWyhwIC0gMSArIGIpICUgYl0uYiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IGFbKHAgKyAxKSAlIGJdLmIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBhW3BdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGguYiArPSAoTWF0aC5yYW5kb20oKSAtIC41KSAqICh0aGlzLmggPyAzIDogMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5iICo9IC43OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwIDwgaC5iICYmIChoLmIgPSAxMCk7IC0xMCA+IGguYiAmJiAoaC5iID0gLTEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmIgPSAoZiArIGsgKyA4ICogaC5iKSAvIDEwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gaC5mLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gYVsocCAtIDEgKyBiKSAlIGJdLmYsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGsgPSBhWyhwICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEpICUgYl0uZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMTUgPCB0aGlzLnNpemUgJiYgbnVsbCAhPSBpYSAmJiAyMCA8IHRoaXMuc2l6ZSAqIGwgJiYgMCA8IHRoaXMuaWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFFhID0gITEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gaC54LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcSA9IGgueTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWEuRWEobSAtIDUsIHEgLSA1LCAxMCwgMTAsIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLiQgIT0gZCAmJiAyNSA+IChtIC0gYS54KSAqIChtIC0gYS54KSArIChxIC0gYS55KSAqIChxIC0gYS55KSAmJiAoUWEgPSAhMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFRYSAmJiAoaC54IDwgTWEgfHwgaC55IDwgTmEgfHwgaC54ID4gT2EgfHwgaC55ID4gUGEpICYmIChRYSA9ICEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUWEgJiYgKDAgPCBoLmIgJiYgKGguYiA9IDApLCAtLWguYikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiArPSBoLmI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCA+IG4gJiYgKG4gPSAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gdGhpcy5oID8gKDE5ICogbiArIHRoaXMuc2l6ZSkgLyAyMCA6ICgxMiAqIG4gKyB0aGlzLnNpemUpIC8gMTM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5mID0gKGYgKyBrICsgOCAqIG4pIC8gMTA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IDIgKiBNYXRoLlBJIC8gYjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID0gaC5mOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYyAmJiAwID09IHAgJSAyICYmIChrICs9IDUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgueCA9IHRoaXMueCArIE1hdGguY29zKGYgKiBwICsgYykgKiBrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgueSA9IHRoaXMueSArIE1hdGguc2luKGYgKiBwICsgYykgKiBrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBNYXRoLm1heChlLCBrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pYSA9IGUKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgbmE6IGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLk0gPSBhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5OID0gYjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuSiA9IGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLksgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmphID0gYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMua2EgPSBiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwID49IHRoaXMuaWQpIHJldHVybiAxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBkYi5wYSgoeCAtIHRoaXMuVSkgLyAxMjAsIDAsIDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuRyAmJiAxIDw9IGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IGJhLmluZGV4T2YodGhpcyk7IC0xICE9IGIgJiYgYmEuc3BsaWNlKGIsIDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSBhICogKHRoaXMuamEgLSB0aGlzLnMpICsgdGhpcy5zOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0gYSAqICh0aGlzLmthIC0gdGhpcy51KSArIHRoaXMudTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2l6ZSA9IGEgKiAodGhpcy5nIC0gdGhpcy5vKSArIHRoaXMubzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4wMSA+IE1hdGguYWJzKHRoaXMuc2l6ZSAtIHRoaXMuZykgJiYgKHRoaXMuc2l6ZSA9IHRoaXMuZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBSOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMCA+PSB0aGlzLmlkID8gITAgOiB0aGlzLnggKyB0aGlzLnNpemUgKyA0MCA8IHkgLSByIC8gMiAvIGwgfHwgdGhpcy55ICsgdGhpcy5zaXplICsgNDAgPCB6IC0gdCAvIDIgLyBsIHx8IHRoaXMueCAtIHRoaXMuc2l6ZSAtIDQwID4geSArIHIgLyAyIC8gbCB8fCB0aGlzLnkgLSB0aGlzLnNpemUgLSA0MCA+IHogKyB0IC8gMiAvIGwgPyAhMSA6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHFhOiBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5iZWdpblBhdGgoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkgoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEubW92ZVRvKHRoaXMuYVswXS54LCB0aGlzLmFbMF0ueSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMTsgZCA8PSBiOyArK2QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGQgJSBiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEubGluZVRvKHRoaXMuYVtjXS54LCB0aGlzLmFbY10ueSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuY2xvc2VQYXRoKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnN0cm9rZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHc6IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5SKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3RoaXMuZGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSAwIDwgdGhpcy5pZCAmJiAhdGhpcy5jICYmICF0aGlzLmggJiYgLjQgPiBsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUgPiB0aGlzLkgoKSAmJiAwIDwgdGhpcy5pZCAmJiAoYiA9ICEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5WICYmICFiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IHRoaXMuYS5sZW5ndGg7IGQrKykgdGhpcy5hW2RdLmYgPSB0aGlzLnNpemU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5WID0gYjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnNhdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJhID0geDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gdGhpcy5UKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5HICYmIChhLmdsb2JhbEFscGhhICo9IDEgLSBkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmxpbmVXaWR0aCA9IDEwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEubGluZUNhcCA9ICJyb3VuZCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5saW5lSm9pbiA9IHRoaXMuYyA/ICJtaXRlciIgOiAicm91bmQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5uYW1lLnRvTG93ZXJDYXNlKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gdGhpcy5jb2xvciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaCB8fCAhYWIgfHwgcWIgfHwgKC0xICE9IE9iLmluZGV4T2YoZSkgPyAoaGEuaGFzT3duUHJvcGVydHkoZSkgfHwgKGhhW2VdID0gbmV3IEltYWdlLCBoYVtlXS5zcmMgPSBjLkFTU0VUU19ST09UICsgInNraW5zLyIgKyBlICsgIi5wbmciKSwgZyA9IDAgIT0gaGFbZV0ud2lkdGggJiYgaGFbZV0uY29tcGxldGUgPyBoYVtlXSA6IG51bGwpIDogZyA9IG51bGwsIG51bGwgIT0gZyA/IC0xICE9ICRjLmluZGV4T2YoZSkgJiYgKGQgPSAhMCkgOiAodGhpcy5JICYmICIlc3RhcmJhbGwiID09IHRoaXMuQyAmJiAic2hlbnJvbiIgPT0gZSAmJiA3IDw9IHEubGVuZ3RoICYmICgkYiA9IGQgPSAhMCwgcCA9IGVjKCIlc3RhcmJhbGwxIikpLCBnID0gZWModGhpcy5DKSwgbnVsbCAhPSBnICYmIChoID0gITAsIGYgPSBOYyh0aGlzLkMpIHx8IGYpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5jb3JlLmRlYnVnICYmIG0uZGVidWcuc2hvd1ByZWRpY3Rpb24gJiYgdGhpcy5JICYmIChhLnN0cm9rZVN0eWxlID0gIiMwMDAwRkYiLCBhLmJlZ2luUGF0aCgpLCBhLmFyYyh0aGlzLk0sIHRoaXMuTiwgdGhpcy5zaXplICsgNSwgMCwgMiAqIE1hdGguUEksICExKSwgYS5jbG9zZVBhdGgoKSwgYS5zdHJva2UoKSwgYS5zdHJva2VTdHlsZSA9ICIjMDBGRjAwIiwgYS5iZWdpblBhdGgoKSwgYS5hcmModGhpcy5KLCB0aGlzLkssIHRoaXMuc2l6ZSArIDUsIDAsIDIgKiBNYXRoLlBJLCAhMSksIGEuY2xvc2VQYXRoKCksIGEuc3Ryb2tlKCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhICYmICFxYiA/IChhLmZpbGxTdHlsZSA9ICIjRkZGRkZGIiwgYS5zdHJva2VTdHlsZSA9ICIjQUFBQUFBIikgOiAoYS5maWxsU3R5bGUgPSBmLCBhLnN0cm9rZVN0eWxlID0gZik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA/IChhLmJlZ2luUGF0aCgpLCBhLmFyYyh0aGlzLngsIHRoaXMueSwgdGhpcy5zaXplICsgNSwgMCwgMiAqIE1hdGguUEksICExKSwgYS5jbG9zZVBhdGgoKSkgOiAodGhpcy5CYSgpLCB0aGlzLnFhKGEpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoIHx8IGEuZmlsbCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT0gZyAmJiAodGhpcy5sYShhLCBnKSwgbnVsbCAhPSBwICYmIHRoaXMubGEoYSwgcCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHBoYTogTWF0aC5zaW4oLjAxNzQgKiBUYSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRhIHx8IDE1IDwgdGhpcy5zaXplKSAmJiAhYiAmJiAoYS5zdHJva2VTdHlsZSA9ICIjMDAwMDAwIiwgYS5nbG9iYWxBbHBoYSAqPSAuMSwgYS5zdHJva2UoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5nbG9iYWxBbHBoYSA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IC0xICE9IHEuaW5kZXhPZih0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gfn50aGlzLnk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCAhPSB0aGlzLmlkICYmIChmYSB8fCBlKSAmJiB0aGlzLm5hbWUgJiYgdGhpcy5pICYmICFkICYmIChnID0gdGhpcy5pLCBnLkIodGhpcy5uYW1lKSwgZy5QKHRoaXMubSgpKSwgZCA9IDAgPj0gdGhpcy5pZCA/IDEgOiBNYXRoLmNlaWwoMTAgKiBsKSAvIDEwLCBnLm1hKGQpLCBnID0gZy5PKCksIHAgPSBNYXRoLmNlaWwoZy53aWR0aCAvIGQpLCBmID0gTWF0aC5jZWlsKGcuaGVpZ2h0IC8gZCksIGEuZHJhd0ltYWdlKGcsIH5+dGhpcy54IC0gfn4ocCAvIDIpLCBiIC0gfn4oZiAvIDIpLCBwLCBmKSwgYiArPSBnLmhlaWdodCAvIDIgLyBkICsgNCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCA8IHRoaXMuaWQgJiYgYmIgJiYgKGUgfHwgMCA9PSBxLmxlbmd0aCAmJiAoIXRoaXMuYyB8fCB0aGlzLmgpICYmIDIwIDwgdGhpcy5zaXplKSAmJiAobnVsbCA9PSB0aGlzLlMgJiYgKHRoaXMuUyA9IG5ldyBWYSh0aGlzLm0oKSAvIDIsICIjRkZGRkZGIiwgITAsICIjMDAwMDAwIikpLCBlID0gdGhpcy5TLCBlLlAodGhpcy5tKCkgLyAyKSwgZS5CKH5+KHRoaXMuc2l6ZSAqIHRoaXMuc2l6ZSAvIDEwMCkpLCBkID0gTWF0aC5jZWlsKDEwICogbCkgLyAxMCwgZS5tYShkKSwgZyA9IGUuTygpLCBwID0gTWF0aC5jZWlsKGcud2lkdGggLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkKSwgZiA9IE1hdGguY2VpbChnLmhlaWdodCAvIGQpLCBhLmRyYXdJbWFnZShnLCB+fnRoaXMueCAtIH5+KHAgLyAyKSwgYiAtIH5+KGYgLyAyKSwgcCwgZikpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEucmVzdG9yZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGxhOiBmdW5jdGlvbiAoYSwgYiwgZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zYXZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmNsaXAoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gTWF0aC5tYXgodGhpcy5zaXplLCB0aGlzLmlhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT0gZCAmJiBudWxsICE9IGQuYWxwaGEgJiYgKGEuZ2xvYmFsQWxwaGEgPSBkLmFscGhhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuZHJhd0ltYWdlKGIsIHRoaXMueCAtIGMgLSA1LCB0aGlzLnkgLSBjIC0gNSwgMiAqIGMgKyAxMCwgMiAqIGMgKyAxMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnJlc3RvcmUoKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB2YXIgZGIgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBiKGEsIGIsIGMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhIDwgYiA/IGIgOiBhID4gYyA/IGMgOiBhCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgYS5oYSA9IGZ1bmN0aW9uIChhLCBjKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBiKC41LCAwLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhICsgZSAqIChjIC0gYSkKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgYS5wYSA9IGI7CiAgICAgICAgICAgICAgICAgICAgICAgIGEuZml4ZWQgPSBmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBNYXRoLnBvdygxMCwgYik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gfn4oYSAqIGMpIC8gYwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgICAgIH0oe30pOwogICAgICAgICAgICAgICAgICAgIGMuTWF0aHMgPSBkYjsKICAgICAgICAgICAgICAgICAgICB2YXIgSGEgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICBhLkwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IERhdGUsIGMgPSBbYS5nZXRNb250aCgpICsgMSwgYS5nZXREYXRlKCksIGEuZ2V0RnVsbFllYXIoKV0sIGEgPSBbYS5nZXRIb3VycygpLCBhLmdldE1pbnV0ZXMoKSwgYS5nZXRTZWNvbmRzKCldLCBlID0gMTsgMyA+IGU7IGUrKykgMTAgPiBhW2VdICYmIChhW2VdID0gIjAiICsgYVtlXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIlsiICsgYy5qb2luKCIvIikgKyAiICIgKyBhLmpvaW4oIjoiKSArICJdIgogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgICAgIH0oe30pOwogICAgICAgICAgICAgICAgICAgIGMuVXRpbHMgPSBIYTsKICAgICAgICAgICAgICAgICAgICBWYS5wcm90b3R5cGUgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEY6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICBXOiAiIzAwMDAwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgIFk6ICExLAogICAgICAgICAgICAgICAgICAgICAgICBaOiAiIzAwMDAwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHY6IDE2LAogICAgICAgICAgICAgICAgICAgICAgICBqOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBYOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBsOiAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgRDogMSwKICAgICAgICAgICAgICAgICAgICAgICAgUDogZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudiAhPSBhICYmICh0aGlzLnYgPSBhLCB0aGlzLmwgPSAhMCkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgbWE6IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkQgIT0gYSAmJiAodGhpcy5EID0gYSwgdGhpcy5sID0gITApCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIEI6IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhICE9IHRoaXMuRiAmJiAodGhpcy5GID0gYSwgdGhpcy5sID0gITApCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIE86IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT0gdGhpcy5qICYmICh0aGlzLmogPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKSwgdGhpcy5YID0gdGhpcy5qLmdldENvbnRleHQoIjJkIikpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubCA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcy5qLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gdGhpcy5YLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gdGhpcy5GLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5ELAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gdGhpcy52LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gZyArICJweCBVYnVudHUiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIuZm9udCA9IGY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSB+figuMiAqIGcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEud2lkdGggPSAoYi5tZWFzdXJlVGV4dChjKS53aWR0aCArIDYpICogZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmhlaWdodCA9IChnICsgaCkgKiBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIuZm9udCA9IGY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5zY2FsZShlLCBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmdsb2JhbEFscGhhID0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmxpbmVXaWR0aCA9IDM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5zdHJva2VTdHlsZSA9IHRoaXMuWjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmZpbGxTdHlsZSA9IHRoaXMuVzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLlkgJiYgYi5zdHJva2VUZXh0KGMsIDMsIGcgLSBoIC8gMik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5maWxsVGV4dChjLCAzLCBnIC0gaCAvIDIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5qCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIERhdGUubm93IHx8IChEYXRlLm5vdyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuZXcgRGF0ZSkuZ2V0VGltZSgpCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IFsibXMiLCAibW96IiwgIndlYmtpdCIsICJvIl0sIGIgPSAwOyBiIDwgYS5sZW5ndGggJiYgIWMucmVxdWVzdEFuaW1hdGlvbkZyYW1lOyArK2IpIGMucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gY1thW2JdICsgIlJlcXVlc3RBbmltYXRpb25GcmFtZSJdLCBjLmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gY1thW2JdICsgIkNhbmNlbEFuaW1hdGlvbkZyYW1lIl0gfHwgY1thW2JdICsgIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSJdOwogICAgICAgICAgICAgICAgICAgICAgICBjLnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAoYy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoYSwgMUUzIC8gNjApCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGMuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGEpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgdmMgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBiKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIDwgZSAmJiAoYSA9IGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPiBmICYmIChhID0gZik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIH5+KChhIC0gZSkgLyAzMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIDwgZyAmJiAoYSA9IGcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPiBoICYmIChhID0gaCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIH5+KChhIC0gZykgLyAzMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gYS56YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gYS5BYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gYS54YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gYS55YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID0gfn4oKGYgLSBlKSAvIDMyKSArIDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IH5+KChoIC0gZykgLyAzMikgKyAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBBcnJheShrICogbSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhOiBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiKGEueCkgKyBjKGEueSkgKiBrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsID09IG5bZV0gPyBuW2VdID0gYSA6IEFycmF5LmlzQXJyYXkobltlXSkgPyBuW2VdLnB1c2goYSkgOiBuW2VdID0gW25bZV0sIGFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFYTogZnVuY3Rpb24gKGEsIGUsIGcsIGYsIGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBiKGEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGMoZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBiKGEgKyBnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGMoZSArIGYpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA+IHAgfHwgcCA+PSBrIHx8IDAgPiB1IHx8IHUgPj0gbSkgZGVidWdnZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyB1IDw9IGU7ICsrdSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZiA9IHA7IGYgPD0gYTsgKytmKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnID0gbltmICsgdSAqIGtdLCBudWxsICE9IGcpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGcpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbCA9IDA7IGwgPCBnLmxlbmd0aDsgbCsrKSBoKGdbbF0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGgoZykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBUYiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gbmV3IGNhKDAsIDAsIDAsIDMyLCAiI0VEMUMyNCIsICIiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLndpZHRoID0gMzI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLmhlaWdodCA9IDMyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBiLmdldENvbnRleHQoIjJkIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAgPCBxLmxlbmd0aCAmJiAoYS5jb2xvciA9IHFbMF0uY29sb3IsIGEuQShxWzBdLm5hbWUpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmNsZWFyUmVjdCgwLCAwLCAzMiwgMzIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuc2F2ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMudHJhbnNsYXRlKDE2LCAxNik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5zY2FsZSguNCwgLjQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEudyhjKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnJlc3RvcmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJmYXZpY29uIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBlLmNsb25lTm9kZSghMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZy5zZXRBdHRyaWJ1dGUoImhyZWYiLCBiLnRvRGF0YVVSTCgiaW1hZ2UvcG5nIikpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZywgZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSgpOwogICAgICAgICAgICAgICAgICAgIGUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBUYigpCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIFdhID0gewogICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UHJvdmlkZXI6ICJmYWNlYm9vayIsCiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2luSW50ZW50OiAiMCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJbmZvOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2NpYWxUb2tlbjogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuRXhwaXJlczogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4cDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4cE5lZWRlZDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpY3R1cmU6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VkSW46ICIwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvY2lhbElkOiAiIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGMuZGVmYXVsdFN0ID0gV2E7CiAgICAgICAgICAgICAgICAgICAgYy5zdG9yYWdlSW5mbyA9IGg7CiAgICAgICAgICAgICAgICAgICAgYy5jcmVhdGVEZWZhdWx0U3RvcmFnZSA9IFBjOwogICAgICAgICAgICAgICAgICAgIGMudXBkYXRlU3RvcmFnZSA9IFhhOwogICAgICAgICAgICAgICAgICAgIGUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9IGMubG9jYWxTdG9yYWdlLnN0b3JlT2JqZWN0SW5mbyAmJiAoaCA9IEpTT04ucGFyc2UoYy5sb2NhbFN0b3JhZ2Uuc3RvcmVPYmplY3RJbmZvKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICIxIiA9PSBoLmxvZ2luSW50ZW50ICYmIGZjKGguY29udGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICIiID09IGgudXNlckluZm8ubmFtZSAmJiAiIiA9PSBoLnVzZXJJbmZvLmRpc3BsYXlOYW1lIHx8IGdjKGgudXNlckluZm8pCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgYy5jaGVja0xvZ2luU3RhdHVzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAiMSIgPT0gaC5sb2dpbkludGVudCAmJiAoWWEoKSwgZmMoaC5jb250ZXh0KSkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHZhciBZYSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYy5NQy5zZXRQcm9maWxlUGljdHVyZShoLnVzZXJJbmZvLnBpY3R1cmUpOwogICAgICAgICAgICAgICAgICAgICAgICBjLk1DLnNldFNvY2lhbElkKGgudXNlckluZm8uc29jaWFsSWQpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBjLmxvZ291dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaCA9IFdhOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgYy5sb2NhbFN0b3JhZ2Uuc3RvcmVPYmplY3RJbmZvOwogICAgICAgICAgICAgICAgICAgICAgICBjLmxvY2FsU3RvcmFnZS5zdG9yZU9iamVjdEluZm8gPSBKU09OLnN0cmluZ2lmeShXYSk7CiAgICAgICAgICAgICAgICAgICAgICAgIFhhKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIG0uY2FjaGUuc2VudEdhbWVTZXJ2ZXJMb2dpbiA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbS5jYWNoZS5sb2dpbl9pbmZvOwogICAgICAgICAgICAgICAgICAgICAgICBlKCIjaGVsbG9Db250YWluZXIiKS5hdHRyKCJkYXRhLWxvZ2dlZC1pbiIsICIwIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtaGFzLWFjY291bnQtZGF0YSIsICIwIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIi50aW1lciIpLnRleHQoIiIpOwogICAgICAgICAgICAgICAgICAgICAgICBlKCIjZ1BsdXNTaGFyZSIpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiI2ZiU2hhcmUiKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIiN1c2VyLWlkLXRhZyIpLnRleHQoIiIpOwogICAgICAgICAgICAgICAgICAgICAgICBRKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGMuTUMuZG9Mb2dvdXQoKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgYy50b2dnbGVTb2NpYWxMb2dpbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiI3NvY2lhbExvZ2luQ29udGFpbmVyIikudG9nZ2xlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIiNzZXR0aW5ncyIpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiI2luc3RydWN0aW9ucyIpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgQ2IoKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgYy50b2dnbGVTZXR0aW5ncyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiI3NldHRpbmdzIikudG9nZ2xlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIiNzb2NpYWxMb2dpbkNvbnRhaW5lciIpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZSgiI2luc3RydWN0aW9ucyIpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgQ2IoKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgbS5hY2NvdW50ID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYigpIHsgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZChhLCBiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhIYS5MKCkgKyAiIGdvdCB1c2VyIGxvZ2luIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBmIHx8IGYuaWQgIT0gYi5pZCkgZiA9IGIsIG51bGwgIT0gYy5zc2FfanNvbiAmJiAoYy5zc2FfanNvbi5hcHBsaWNhdGlvblVzZXJJZCA9ICIiICsgYi5pZCwgYy5zc2FfanNvbi5jdXN0b21fdXNlcl9pZCA9ICIiICsgYi5pZCksICJ1bmRlZmluZWQiICE9IHR5cGVvZiBTU0FfQ09SRSAmJiBTU0FfQ09SRS5zdGFydCgpLCBlKCIjb2ZmZXJ3YWxsSWZyYW1lIikuYXR0cigic3JjIiwgImh0dHA6Ly93d3cuc3VwZXJzb25pY2Fkcy5jb20vZGVsaXZlcnkvcGFuZWwucGhwP2FwcGxpY2F0aW9uS2V5PSIgKyBFbnZDb25maWcuc3VwZXJzb25pY19hcHBfa2V5ICsgIiZhcHBsaWNhdGlvblVzZXJJZD0iICsgYi5pZCArICImY3VzdG9tX3VzZXJfaWQ9IiArIGIuaWQgKyAiJmFwcGxpY2F0aW9uVXNlcklkU2lnbmF0dXJlPW9wdGlvbmFsIikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIGEuaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY29yZS5iaW5kKCJ1c2VyX2xvZ2luIiwgZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNvcmUuYmluZCgidXNlcl9sb2dvdXQiLCBiKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBhLnNldFVzZXJEYXRhID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdjKGEpCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGEuc2V0QWNjb3VudERhdGEgPSBmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBlKCIjaGVsbG9Db250YWluZXIiKS5hdHRyKCJkYXRhLWhhcy1hY2NvdW50LWRhdGEiLCAiMSIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaC51c2VySW5mby54cCA9IGEueHA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLnVzZXJJbmZvLnhwTmVlZGVkID0gYS54cE5lZWRlZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgudXNlckluZm8ubGV2ZWwgPSBhLmxldmVsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgWGEoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgJiYgYiA/IGdhKGEpIDogKGUoIi5hZ2FyaW8tcHJvZmlsZS1wYW5lbCAucHJvZ3Jlc3MtYmFyLXN0YXIiKS50ZXh0KGEubGV2ZWwpLCBlKCIuYWdhcmlvLWV4cC1iYXIgLnByb2dyZXNzLWJhci10ZXh0IikudGV4dChhLnhwICsgIi8iICsgYS54cE5lZWRlZCArICIgWFAiKSwgZSgiLmFnYXJpby1leHAtYmFyIC5wcm9ncmVzcy1iYXIiKS5jc3MoIndpZHRoIiwgKDg4ICogYS54cCAvIGEueHBOZWVkZWQpLnRvRml4ZWQoMikgKyAiJSIpKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBhLkdhID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhKGEpCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgICAgICAgICAgfSh7fSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGljID0gMDsKICAgICAgICAgICAgICAgICAgICBjLmZiQXN5bmNJbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA9PSBjLkZCID8gYWxlcnQoIllvdSBzZWVtIHRvIGhhdmUgc29tZXRoaW5nIGJsb2NraW5nIEZhY2Vib29rIG9uIHlvdXIgYnJvd3NlciwgcGxlYXNlIGNoZWNrIGZvciBhbnkgZXh0ZW5zaW9ucyIpIDogKGgubG9naW5JbnRlbnQgPSAiMSIsIGMudXBkYXRlU3RvcmFnZSgpLCBjLkZCLmxvZ2luKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGMoYSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZTogInB1YmxpY19wcm9maWxlLCBlbWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGMuRkIuaW5pdCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBJZDogRW52Q29uZmlnLmZiX2FwcF9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZTogITAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ZmJtbDogITAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogInYyLjIiCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAoIjEiID09IGMuc3RvcmFnZUluZm8ubG9naW5JbnRlbnQgJiYgImZhY2Vib29rIiA9PSBjLnN0b3JhZ2VJbmZvLmNvbnRleHQgfHwgbmMpICYmIGMuRkIuZ2V0TG9naW5TdGF0dXMoZnVuY3Rpb24gKGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb25uZWN0ZWQiID09PSBiLnN0YXR1cyA/IGhjKGIpIDogIm5vdF9hdXRob3JpemVkIiA9PT0gYi5zdGF0dXMgPyAoYy5sb2dvdXQoKSwgYSgpKSA6IGMubG9nb3V0KCkKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGMuZmFjZWJvb2tSZWxvZ2luID0gYTsKICAgICAgICAgICAgICAgICAgICAgICAgYy5mYWNlYm9va0xvZ2luID0gYQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgdmFyIEhiID0gITE7CiAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGIoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS50eXBlID0gInRleHQvamF2YXNjcmlwdCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmFzeW5jID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnNyYyA9ICIvL2FwaXMuZ29vZ2xlLmNvbS9qcy9jbGllbnQ6cGxhdGZvcm0uanM/b25sb2FkPWdhcGlBc3luY0luaXQiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgic2NyaXB0IilbMF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsIGIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgYy5nYXBpQXN5bmNJbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZShkKS50cmlnZ2VyKCJpbml0aWFsaXplZCIpCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGEuZ29vZ2xlID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmE6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYTogZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmdhcGkuY2xpZW50LmxvYWQoInBsdXMiLCAidjEiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmZXRjaGluZyBtZSBwcm9maWxlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhcGkuY2xpZW50LnBsdXMucGVvcGxlLmdldCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VySWQ6ICJtZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuZXhlY3V0ZShmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYihhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGEuRGEgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiB8fCBiKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidW5kZWZpbmVkIiAhPT0gdHlwZW9mIGdhcGkgPyBhKCkgOiBlKGQpLmJpbmQoImluaXRpYWxpemVkIiwgYSkKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEKICAgICAgICAgICAgICAgICAgICB9KShtKTsKICAgICAgICAgICAgICAgICAgICB2YXIgYWQgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBiKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuTUMuZG9Mb2dpbldpdGhHUGx1cyhhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY2FjaGUubG9naW5faW5mbyA9IFthLCAiZ29vZ2xlIl0KICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLnVzZXJJbmZvLnBpY3R1cmUgPSBhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSgiLmFnYXJpby1wcm9maWxlLXBpY3R1cmUiKS5hdHRyKCJzcmMiLCBhKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2lkOiBFbnZDb25maWcuZ3BsdXNfY2xpZW50X2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZV9wb2xpY3k6ICJzaW5nbGVfaG9zdF9vcmlnaW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlOiAicHJvZmlsZSBlbWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGEuZmEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYTogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IGggJiYgIjEiID09IGgubG9naW5JbnRlbnQgJiYgImdvb2dsZSIgPT0gaC5jb250ZXh0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uRGEoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmdhcGkueXRzdWJzY3JpYmUuZ28oImFnYXJZb3V0dWJlIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuZ2FwaS5sb2FkKCJhdXRoMiIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBjLmdhcGkuYXV0aDIuaW5pdChnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYuYXR0YWNoQ2xpY2tIYW5kbGVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJncGx1c0xvZ2luIiksIHt9LCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJnb29nbGVVc2VyIDogIiArIGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmYWlsZWQgdG8gbG9naW4gaW4gZ29vZ2xlIHBsdXM6ICIsIEpTT04uc3RyaW5naWZ5KGEsIHZvaWQgMCwgMikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYuY3VycmVudFVzZXIubGlzdGVuKF8uYmluZChhLkNhLCBhKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiICYmIDEgPT0gZi5pc1NpZ25lZEluLmdldCgpICYmIGYuc2lnbkluKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhOiBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmICYmIGEgJiYgZi5pc1NpZ25lZEluLmdldCgpICYmICFIYikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIYiA9ICEwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmxvZ2luSW50ZW50ID0gIjEiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGEuZ2V0QXV0aFJlc3BvbnNlKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gZS5hY2Nlc3NfdG9rZW47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMub2EgPSBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygibG9nZ2VkSW4gd2l0aCBHKyEiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBhLmdldEJhc2ljUHJvZmlsZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gbC5nZXRJbWFnZVVybCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT0gYSA/IG0uZ29vZ2xlLnNhKGUsIGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnJlc3VsdC5pc1BsdXNVc2VyID8gKGEgJiYgZChhLmltYWdlLnVybCksIGIoZyksIGEgJiYgKGgudXNlckluZm8ucGljdHVyZSA9IGEuaW1hZ2UudXJsKSwgaC51c2VySW5mby5zb2NpYWxJZCA9IGwuZ2V0SWQoKSwgWWEoKSkgOiAoYWxlcnQoIlBsZWFzZSBhZGQgR29vZ2xlKyB0byB5b3VyIEdvb2dsZSBhY2NvdW50IGFuZCB0cnkgYWdhaW4uXG5PciB5b3UgY2FuIGxvZ2luIHdpdGggYW5vdGhlciBhY2NvdW50LiIpLCBjLmxvZ291dCgpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6IChkKGEpLCBoLnVzZXJJbmZvLnBpY3R1cmUgPSBhLCBoLnVzZXJJbmZvLnNvY2lhbElkID0gbC5nZXRJZCgpLCBZYSgpLCBiKGcpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5jb250ZXh0ID0gImdvb2dsZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMudXBkYXRlU3RvcmFnZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiAmJiAoZi5zaWduT3V0KCksIEhiID0gITEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgICAgICAgICAgfShtKTsKICAgICAgICAgICAgICAgICAgICBjLmdwbHVzTW9kdWxlID0gYWQ7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNjID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBtLmZhLndhKCkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGMubG9nb3V0R29vZ2xlUGx1cyA9IHNjOwogICAgICAgICAgICAgICAgICAgIHZhciBaYyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYShhLCBiLCBjLCBkLCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IGIuZ2V0Q29udGV4dCgiMmQiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gYi53aWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBiLmhlaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuY29sb3IgPSBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5BKGMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zaXplID0gZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYuc2F2ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZi50cmFuc2xhdGUoZyAvIDIsIGIgLyAyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEudyhmKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYucmVzdG9yZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYiA9IG5ldyBjYSgtMSwgMCwgMCwgMzIsICIjNWJjMGRlIiwgIiIpLCBjID0gbmV3IGNhKC0xLCAwLCAwLCAzMiwgIiM1YmMwZGUiLCAiIiksIGYgPSAiIzA3OTFmZiAjNWEwN2ZmICNmZjA3ZmUgI2ZmYTUwNyAjZmYwNzc0ICMwNzdmZmYgIzNhZmYwNyAjZmYwN2VkICMwN2E4ZmYgI2ZmMDc2ZSAjM2ZmZjA3ICNmZjA3MzQgIzA3ZmYyMCAjZmYwN2EyICNmZjgyMDcgIzA3ZmYwZSIuc3BsaXQoIiAiKSwgZyA9IFtdLCBoID0gMDsgaCA8IGYubGVuZ3RoOyArK2gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gaCAvIGYubGVuZ3RoICogMTIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IDMwICogTWF0aC5zcXJ0KGggLyBmLmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnLnB1c2gobmV3IGNhKC0xLCBNYXRoLmNvcyhsKSAqIGssIE1hdGguc2luKGwpICogaywgMTAsIGZbaF0sICIiKSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBPYyhnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgICAgICAgICAgICAgICAgICAgICAgbS5nZXRDb250ZXh0KCIyZCIpOwogICAgICAgICAgICAgICAgICAgICAgICBtLndpZHRoID0gbS5oZWlnaHQgPSA3MDsKICAgICAgICAgICAgICAgICAgICAgICAgYShjLCBtLCAiIiwgMjYsICIjZWJjMGRlIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKCIuY2VsbC1zcGlubmVyIikuZmlsdGVyKCI6dmlzaWJsZSIpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gZSh0aGlzKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IERhdGUubm93KCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSB0aGlzLndpZHRoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gdGhpcy5oZWlnaHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSB0aGlzLmdldENvbnRleHQoIjJkIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5jbGVhclJlY3QoMCwgMCwgZiwgZyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5zYXZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC50cmFuc2xhdGUoZiAvIDIsIGcgLyAyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgMTAgPiBrOyArK2spIGguZHJhd0ltYWdlKG0sICguMSAqIGQgKyA4MCAqIGspICUgKGYgKyAxNDApIC0gZiAvIDIgLSA3MCAtIDM1LCBnIC8gMiAqIE1hdGguc2luKCguMDAxICogZCArIGspICUgTWF0aC5QSSAqIDIpIC0gMzUsIDcwLCA3MCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5yZXN0b3JlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMgPSBjLmF0dHIoImRhdGEtaXRyIikpICYmIChjID0gUihjKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYShiLCB0aGlzLCBjIHx8ICIiLCArZSh0aGlzKS5hdHRyKCJkYXRhLXNpemUiKSwgIiM1YmMwZGUiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKCIjc3RhdHNQZWxsZXRzIikuZmlsdGVyKCI6dmlzaWJsZSIpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSB0aGlzLndpZHRoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gdGhpcy5oZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRDb250ZXh0KCIyZCIpLmNsZWFyUmVjdCgwLCAwLCBiLCBjKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGIgPSAwOyBiIDwgZy5sZW5ndGg7IGIrKykgYShnW2JdLCB0aGlzLCAiIiwgZ1tiXS5zaXplLCBnW2JdLmNvbG9yKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0oKTsKICAgICAgICAgICAgICAgICAgICBjLmNyZWF0ZVBhcnR5ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBrYSgiOnBhcnR5Iik7CiAgICAgICAgICAgICAgICAgICAgICAgIFMgPSBmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGIoIi8jIiArIGMuZW5jb2RlVVJJQ29tcG9uZW50KGEpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUoIi5wYXJ0eVRva2VuIikudmFsKCJhZ2FyLmlvLyMiICsgYy5lbmNvZGVVUklDb21wb25lbnQoYSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSgiI2hlbGxvQ29udGFpbmVyIikuYXR0cigiZGF0YS1wYXJ0eS1zdGF0ZSIsICIxIikKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgUSgpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBjLmpvaW5QYXJ0eSA9IGpjOwogICAgICAgICAgICAgICAgICAgIGMuY2FuY2VsUGFydHkgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIERiKCIvIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGUoIiNoZWxsb0NvbnRhaW5lciIpLmF0dHIoImRhdGEtcGFydHktc3RhdGUiLCAiMCIpOwogICAgICAgICAgICAgICAgICAgICAgICBrYSgiIik7CiAgICAgICAgICAgICAgICAgICAgICAgIFEoKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgdmFyIEYgPSBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgdWIgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICB2YiA9ICIjMDAwMDAwIiwKICAgICAgICAgICAgICAgICAgICAgICAgYWEgPSAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgRWEgPSAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgUmEgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBFYiA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIHhiID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgd2IgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBXID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgWmEgPSAhMDsKICAgICAgICAgICAgICAgICAgICBjLm9uUGxheWVyRGVhdGggPSBKYTsKICAgICAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIEVhICYmIEYucHVzaChhYygpIC8gMTAwKQogICAgICAgICAgICAgICAgICAgIH0sIDFFMyAvIDYwKTsKICAgICAgICAgICAgICAgICAgICBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gUmMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgMCAhPSBhICYmICgrK3hiLCAwID09IFcgJiYgKFcgPSBhKSwgVyA9IE1hdGgubWluKFcsIGEpKQogICAgICAgICAgICAgICAgICAgIH0sIDFFMyk7CiAgICAgICAgICAgICAgICAgICAgYy5jbG9zZVN0YXRzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBhYSA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICBlKCIjc3RhdHMiKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGMuZGVzdHJveUFkKGMuYWRTbG90cy5hYik7CiAgICAgICAgICAgICAgICAgICAgICAgIHlhKDApCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBjLnNldFNraXBTdGF0cyA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFphID0gIWEKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGMuZ2V0U3RhdHNTdHJpbmcgPSBsYzsKICAgICAgICAgICAgICAgICAgICBjLmdQbHVzU2hhcmUgPSBUYzsKICAgICAgICAgICAgICAgICAgICBjLnR3aXR0ZXJTaGFyZVN0YXRzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGMuZ2V0U3RhdHNTdHJpbmcoInR0X3NoYXJlX3N0YXRzIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGMub3BlbigiaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/dGV4dD0iICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEsICJBZ2FyLmlvIiwgIndpZHRoPTY2MCxoZWlnaHQ9MzEwLG1lbnViYXI9bm8sdG9vbGJhcj1ubyxyZXNpemFibGU9eWVzLHNjcm9sbGJhcnM9bm8sbGVmdD0iICsgKGMuc2NyZWVuWCArIGMuaW5uZXJXaWR0aCAvIDIgLSAzMzApICsgIix0b3A9IiArIChjLmlubmVySGVpZ2h0IC0gMzEwKSAvIDIpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBjLmZiU2hhcmVTdGF0cyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBjLmdldFN0YXRzU3RyaW5nKCJmYl9tYXRjaHJlc3VsdHNfc3VidGl0bGUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgYy5GQi51aSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJmZWVkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICJpZnJhbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogUigiZmJfbWF0Y2hyZXN1bHRzX3RpdGxlIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uOiBSKCJmYl9tYXRjaHJlc3VsdHNfZGVzY3JpcHRpb24iKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluazogImh0dHA6Ly9hZ2FyLmlvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEphOiAiaHR0cDovL3N0YXRpYzIubWluaWNsaXBjZG4uY29tL21vYmlsZS9hZ2FyL0FnYXIuaW9fbWF0Y2hyZXN1bHRzX2ZiXzEyMDB4NjMwLnBuZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGYTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJwbGF5IG5vdyEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbms6ICJodHRwOi8vYWdhci5pbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGMuZmlsbFNvY2lhbFZhbHVlcyA9IGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIDEgPT0gYy5pc0Nocm9tZSAmJiAiZ29vZ2xlIiA9PSBjLnN0b3JhZ2VJbmZvLmNvbnRleHQgJiYgYy5nYXBpLmludGVyYWN0aXZlcG9zdC5yZW5kZXIoYiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudHVybDogRW52Q29uZmlnLmdhbWVfdXJsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50aWQ6IEVudkNvbmZpZy5ncGx1c19jbGllbnRfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb29raWVwb2xpY3k6ICJodHRwOi8vYWdhci5pbyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmaWxsdGV4dDogYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGx0b2FjdGlvbmxhYmVsOiAiQkVBVCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsdG9hY3Rpb251cmw6IEVudkNvbmZpZy5nYW1lX3VybAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgZShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJNQXN5bmNJbml0IiBpbiBjICYmIGMuTUFzeW5jSW5pdCgpCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gT1JJR0lOQUwgU0NSSVBUCiAgICAgICAgICAgIHZhciB3aW5kbyA9IGM7CiAgICAgICAgICAgIHZhciBtZmdoID0gZmFsc2U7CiAgICAgICAgICAgIHZhciBzdG9wTW92ZSA9IGZhbHNlOwogICAgICAgICAgICB2YXIgYXV0b0ZlZWRJbnRlcnZhbCA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgdmFyIGF1dG9TcGxpdEludGVydmFsID0gdW5kZWZpbmVkOwogICAgICAgICAgICB2YXIgc2VuZEJ1ZmZlciA9IFY7CiAgICAgICAgICAgIHZhciBzZW5kVmFsID0gWDsKICAgICAgICAgICAgLy9BR0FSQk9UT1ZIIG1vZGlmIEliIHBvdXIgbGEgbel0aG9kZSBxdWkgZmFpdCBsZXMgb25rZXl1cCBvbmtleWRvd24KICAgICAgICAgICAgSWIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB3aW5kby5vbmtleXVwID0gZnVuY3Rpb24gKGEpIHsKICAgICAgICAgICAgICAgICAgICAzMiA9PSBhLmtleUNvZGUgJiYgKHZhID0gITEpOwogICAgICAgICAgICAgICAgICAgIDg3ID09IGEua2V5Q29kZSAmJiAoeGEgPSAhMSk7CiAgICAgICAgICAgICAgICAgICAgODEgPT0gYS5rZXlDb2RlICYmIHdhICYmIChYKDE5KSwgd2EgPSAhMSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHdpbmRvLm9ua2V5ZG93biA9IGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2tleURvd24nLCBhKTsKICAgICAgICAgICAgICAgICAgICBpZiAoYS5rZXlDb2RlID09IDY5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlbWl0IHNwbGl0ICEnKTsKICAgICAgICAgICAgICAgICAgICAgICAgYmd6LnNlbmQoSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFjdGlvbiI6IDIKICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoYS5rZXlDb2RlID09IDgyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlbWl0IGZlZWQgIScpOwogICAgICAgICAgICAgICAgICAgICAgICBiZ3ouc2VuZChKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYWN0aW9uIjogMwogICAgICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoYS5rZXlDb2RlID09IDg0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1mZ2ggPSAhbWZnaDsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdXNlX29mZicpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobWZnaCkgeyBiLmlubmVySFRNTCA9ICdPTic7IGIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ2dyZWVuJzsgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1mZ2gpIHsgYi5pbm5lckhUTUwgPSAnT0ZGJzsgYi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmVkJzsgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAzMiAhPSBhLmtleUNvZGUgfHwgdmEgfHwgKCJuaWNrIiAhPSBhLnRhcmdldC5pZCAmJiBhLnByZXZlbnREZWZhdWx0KCksIGViKCksIHZhID0gITApOwogICAgICAgICAgICAgICAgICAgIDgxID09IGEua2V5Q29kZSAmJiAoWCgxOCksIHdhID0gITApOwogICAgICAgICAgICAgICAgICAgIDg3ICE9IGEua2V5Q29kZSB8fCB4YSB8fCAoSmIoKSwgeGEgPSAhMCk7CiAgICAgICAgICAgICAgICAgICAgMjcgPT0gYS5rZXlDb2RlICYmIChhLnByZXZlbnREZWZhdWx0KCksIHlhKDMwMCksIGUoIiNvZmVyd2FsbENvbnRhaW5lciIpLmlzKCI6dmlzaWJsZSIpICYmIGMuY2xvc2VPZmZlcndhbGwoKSwgZSgiI3ZpZGVvQ29udGFpbmVyIikuaXMoIjp2aXNpYmxlIikgJiYgYy5jbG9zZVZpZGVvQ29udGFpbmVyKCkpCiAgICAgICAgICAgICAgICAgICAgaWYgKGEua2V5Q29kZSA9PSA4MyAmJiAibmljayIgIT0gYS50YXJnZXQuaWQpIHsvLyBzCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdXRvRmVlZEludGVydmFsID09IHVuZGVmaW5lZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9GZWVkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFZhbCgyMSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b0ZlZWRJbnRlcnZhbCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvRmVlZEludGVydmFsID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2goKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGEua2V5Q29kZSA9PSAzMiAmJiBhLnNoaWZ0S2V5ICYmICJuaWNrIiAhPSBhLnRhcmdldC5pZCkgey8vIHMKICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3NwYWNlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBudW1iZXIgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXV0b1NwbGl0SW50ZXJ2YWwgPT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b1NwbGl0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFZhbCgxNyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyKys7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PSA3KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b1NwbGl0SW50ZXJ2YWwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvU3BsaXRJbnRlcnZhbCA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxMDApOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b1NwbGl0SW50ZXJ2YWwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b1NwbGl0SW50ZXJ2YWwgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaCgpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5rZXlDb2RlID09IDY4ICYmICJuaWNrIiAhPSBhLnRhcmdldC5pZCkgey8vIEQKICAgICAgICAgICAgICAgICAgICAgICAgc3RvcE1vdmUgPSAhc3RvcE1vdmU7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdmVfb2ZmJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdG9wTW92ZSkgeyBpLmlubmVySFRNTCA9ICdPTic7IGkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ2dyZWVuJzsgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0b3BNb3ZlKSB7IGkuaW5uZXJIVE1MID0gJ09GRic7IGkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3JlZCc7IH0KICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnU1RPUE1PVkUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgLyoKICAgICAgICAgICAgICAgICAgICAgICAgICogY29uc29sZS5sb2coJ0x0JyxMdCk7IGNvbnNvbGUubG9nKCdFdCcsRXQpOyBjb25zb2xlLmxvZygnVHQnLFR0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICogY29uc29sZS5sb2coJ3d0Jyx3dCk7IGNvbnNvbGUubG9nKCdQdCcsUHQpOyBjb25zb2xlLmxvZygnQ3QnLEN0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICovCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2goKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgY29ubmVjdGVkID0gZmFsc2U7CgogICAgICAgICAgICB2YXIgYnQgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIHZhciBpcCA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgdmFyIHJvb20gPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIHZhciBiZ3ogPSBuZXcgV2ViU29ja2V0KCd3czovLzE3OC4yNTQuMjIuNzI6ODA4MScsICdkLWJvdHMtcHJvdG9jb2wnKTsKICAgICAgICAgICAgdmFyIG1pbiA9IDAsCiAgICAgICAgICAgICAgICBob3VyID0gMCwKICAgICAgICAgICAgICAgIGRheXMgPSAwOwogICAgICAgICAgICBmdW5jdGlvbiBzdGFydFRpbWVyX3RpbWVfbGVmdCgpIHsKCiAgICAgICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lX2xlZnQnKTsKICAgICAgICAgICAgICAgIHhtaCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbiA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWluLS07CiAgICAgICAgICAgICAgICAgICAgICAgIGEuaW5uZXJIVE1MID0gZGF5cyArICdkICcgKyBob3VyICsgJ2ggJyArIG1pbiArICdtaW4nOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3VyID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluID0gNjA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VyLS07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmlubmVySFRNTCA9IGRheXMgKyAnZCAnICsgaG91ciArICdoICcgKyBtaW4gKyAnbWluJzsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXlzID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvdXIgPSAyMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSA2MDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXlzLS07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5pbm5lckhUTUwgPSBkYXlzICsgJ2QgJyArIGhvdXIgKyAnaCAnICsgbWluICsgJ21pbic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEuaW5uZXJIVE1MID0gJ05vIFRpbWUgbGVmdCAhJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9LCA2MDAwMCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJnei5vbmNsb3NlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JvdF9jb3VudCcpLmlubmVySFRNTCA9ICdEaXNjb25uZWN0ZWQnOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWVfbGVmdCcpLmlubmVySFRNTCA9ICdEaXNjb25uZWN0ZWQnOwogICAgICAgICAgICAgICAgY29ubmVjdGVkID0gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYmd6Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Nvbm5lY3Rpb24gZXJyb3IgIScgKyBlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBiZ3oub25tZXNzYWdlID0gZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXNnKTsKICAgICAgICAgICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShtc2cuZGF0YSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTsKICAgICAgICAgICAgICAgIGlmIChkYXRhLmFjdGlvbiA9PSAxKSB7IC8vIHRpbWUgbGVmdCAgIAogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUaW1lIGFjdGlvbiAhIScpOwogICAgICAgICAgICAgICAgICAgIG1pbiA9IGRhdGEubWludXRlczsKICAgICAgICAgICAgICAgICAgICBob3VyID0gZGF0YS5ob3VyczsKICAgICAgICAgICAgICAgICAgICBkYXlzID0gZGF0YS5kYXlzOwogICAgICAgICAgICAgICAgICAgIHZmZyA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmNvbnRhaW5zKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lX2xlZnQnKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lX2xlZnQnKS5pbm5lckhUTUwgPSBkYXlzICsgJ2QgJyArIGhvdXIgKyAnaCAnICsgbWluICsgJ21pbic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWVyX3RpbWVfbGVmdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh2ZmcpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgMjAwKTsKCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEuYWN0aW9uID09IDIpIHsgLy8gYm90IGNvdW50KysKICAgICAgICAgICAgICAgICAgICBjb3VudCsrOwogICAgICAgICAgICAgICAgICAgIHZhciBjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JvdF9jb3VudCcpLmlubmVySFRNTCA9IGNvdW50OwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLmFjdGlvbiA9PSAzKSB7IC8vIGJvdCBjb3VudC0tCiAgICAgICAgICAgICAgICAgICAgY291bnQtLTsKICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdib3RfY291bnQnKS5pbm5lckhUTUwgPSBjb3VudDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEuYWN0aW9uID09IDEyKSB7CiAgICAgICAgICAgICAgICAgICAgdmZsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuY29udGFpbnMoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lwX3RleHQnKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpcF90ZXh0JykuaW5uZXJIVE1MID0gZGF0YS5pcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodmZsKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIDIwMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgYmd6Lm9ub3BlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGNvbm5lY3RlZCA9IHRydWU7CiAgICAgICAgICAgICAgICB2ZHIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmNvbnRhaW5zKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1lX2xlZnQnKSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZV9sZWZ0JykuaW5uZXJIVE1MID0gJ05vIFRpbWUgbGVmdCAhJzsKICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh2ZHIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIDIwMCk7CgogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY2hhbmdlR2FtZU1vZGUgPSBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgcmVmcmVzaCgpOwogICAgICAgICAgICB9OwogICAgICAgICAgICB4dCA9IGZhbHNlOwoKICAgICAgICAgICAgdmFyIHNldFR4dCA9IGZ1bmN0aW9uIChpbmZvcywgYWcpIHsKICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWluaW9ucyIpID09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3RpbWVvdXQnLGluZm9zKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0VHh0KGluZm9zLCBhZyk7CiAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibWluaW9ucyIpOwogICAgICAgICAgICAgICAgICAgIGlmIChhZykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYi5zdHlsZS5jc3NUZXh0LmluY2x1ZGVzKCdmb250LXNpemUnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYi5pbm5lckhUTUwgPSBpbmZvcy50eHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnN0eWxlLmNzc1RleHQucmVwbGFjZSgnY29sb3IgOiByZWQnLCAnY29sb3I6IGdyZWVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnN0eWxlLmNzc1RleHQgKz0gImZvbnQtc2l6ZSA6IDE1MCU7IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGIuaW5uZXJIVE1MID0gaW5mb3MudHh0OwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgYi5pbm5lckhUTUwgPSBpbmZvcy50eHQ7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCgogICAgICAgICAgICB2YXIgc2V0SW5mb3MgPSBmdW5jdGlvbiAodHh0LCBjbG9zZU1lc3MpIHsKICAgICAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0eHQiKTsKICAgICAgICAgICAgICAgIGlmIChlbCA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgICAgICBlbC5pZCA9ICd0eHQnOwogICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSAiZGlzcGxheTpub25lOyI7CiAgICAgICAgICAgICAgICAgICAgZWwuaW5uZXJUZXh0ID0gSlNPTi5zdHJpbmdpZnkoeyB0eHQ6ICcnLCBjbG9zZU1lc3M6IHRydWUgfSk7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgb2JqID0gSlNPTi5wYXJzZShlbC5pbm5lclRleHQpOwogICAgICAgICAgICAgICAgaWYgKHR4dCAhPSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgICAgICAgb2JqLnR4dCA9IHR4dDsKICAgICAgICAgICAgICAgIGlmIChjbG9zZU1lc3MgIT0gdW5kZWZpbmVkKQogICAgICAgICAgICAgICAgICAgIG9iai5jbG9zZU1lc3MgPSBjbG9zZU1lc3M7CiAgICAgICAgICAgICAgICBlbC5pbm5lclRleHQgPSBKU09OLnN0cmluZ2lmeShvYmopOwogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgZ2V0SW5mb3MgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidHh0Iik7CiAgICAgICAgICAgICAgICBpZiAoZWwgPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgICAgZWwuaWQgPSAndHh0JzsKICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gImRpc3BsYXk6bm9uZTsiOwogICAgICAgICAgICAgICAgICAgIGVsLmlubmVyVGV4dCA9IEpTT04uc3RyaW5naWZ5KHsgdHh0OiAnJywgY2xvc2VNZXNzOiB0cnVlIH0pOwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZWwuaW5uZXJUZXh0KTsKICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGVsLmlubmVyVGV4dCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciByZWZyZXNoID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIHQgPSB3aW5kb3cubGFzdE1lc3NhZ2U7CiAgICAgICAgICAgICAgICBpZiAodCA9PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgaWYgKHJvb20gIT0gdW5kZWZpbmVkICYmIHJvb20ubGVuZ3RoID4gMTApIHsKICAgICAgICAgICAgICAgICAgICAkKCcjbXNndHh0JykuaHRtbCgnQk9UUyBPTkxZIFdPUksgSU4gUEFSVFkgTU9ERScpOwogICAgICAgICAgICAgICAgICAgIHNob3dSZW1haW5pbmcoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodC5ub3BlKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnI21zZ3R4dCcpLmh0bWwoJzxhIGhyZWY9Imh0dHA6Ly9hZ2FyYm90Lm92aCIgdGFyZ2V0PSJfYmxhbmMiPk5vIHBsYW4gYWN0aXZlICZndDsgYWdhcmJvdC5vdmggKGRpZCB5b3UgcmVmcmVzaCBJUCA/KTwvYT4nKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5hbHJlYWR5Q29ubmVjdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgJCgnI21zZ3R4dCcpLmh0bWwoJ0FscmVhZHkgb24gYW5vdGhlciBnYW1lIChyZWZyZXNoIHBhZ2UpJyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQuc3BlY2lhbCAhPSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnc2V0dGluZyBzcGVjaWFsJyk7CiAgICAgICAgICAgICAgICAgICAgJCgnI21zZ3R4dCcpLmh0bWwodC5zcGVjaWFsKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5sb2FkaW5nc2V0ID09IHVuZGVmaW5lZCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWdhcmJvdF9sZWZ0Ym94JykgIT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNhZ2FyYm90X2xlZnRib3gnKS5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNob3RrZXlzJykuc2hvdygpOwogICAgICAgICAgICAgICAgICAgICAgICAvLyQoIi5hZ2FyYm90b3ZoX3Byb2dyZXNzLWJhciIpLmxvYWRpbmcoKTsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvYWRpbmdzZXQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkKCcjbXNndHh0JykuaHRtbCgnJyk7CiAgICAgICAgICAgICAgICAgICAgd2luZG93LmV4cGlyZSA9IHQuZXhwaXJlOwogICAgICAgICAgICAgICAgICAgIHZhciBleHBpcmUgPSBuZXcgRGF0ZSh0LmV4cGlyZSk7CiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2V4cGlyZSAnLHQuZXhwaXJlKTsKICAgICAgICAgICAgICAgICAgICB2YXIgYm90c0F2YWlsYWJsZSA9IHQuYm90c0F2YWlsYWJsZTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWJvdHNBdmFpbGFibGUpCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNtc2d0eHQnKS5odG1sKCdObyBib3RzIGF2YWlsYWJsZS4uLiByZXRyeWluZycpOwogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAvLyByZWQgRkYzMzMzCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdyZWVuIDMzRkYzMwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuam9pbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHh0ID0gJ0JvdHMgJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmN1cnJlbnRCb3RzID09IHQubWF4Qm90cykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eHQgKz0gJzxzcGFuIHN0eWxlPSJjb2xvcjojMzNGRjMzIj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4dCArPSAnPHNwYW4+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4dCArPSB0LmN1cnJlbnRCb3RzICsgIiAvICIgKyB0Lm1heEJvdHMgKyAnPC9zcGFuPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjYm90cycpLmh0bWwodHh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjbXNndHh0JykuaHRtbCgnV2FpdGluZyBmb3IgeW91IHRvIGNsaWNrIHBsYXknKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNwaW5nJykuaHRtbCh3aW5kb3cucGluZyB8fCAnPycpOwoKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdXRvRmVlZEludGVydmFsID09IHVuZGVmaW5lZCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNhdXRvZmVlZCcpLnJlbW92ZUNsYXNzKCdhZ2FyYm90b3ZoX2dyZWVuJykuYWRkQ2xhc3MoJ2FnYXJib3RvdmhfcmVkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNhdXRvZmVlZCcpLmFkZENsYXNzKCdhZ2FyYm90b3ZoX2dyZWVuJykucmVtb3ZlQ2xhc3MoJ2FnYXJib3RvdmhfcmVkJyk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RvcE1vdmUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjc3RvcG1vdmUnKS5hZGRDbGFzcygnYWdhcmJvdG92aF9ncmVlbicpLnJlbW92ZUNsYXNzKCdhZ2FyYm90b3ZoX3JlZCcpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjc3RvcG1vdmUnKS5yZW1vdmVDbGFzcygnYWdhcmJvdG92aF9ncmVlbicpLmFkZENsYXNzKCdhZ2FyYm90b3ZoX3JlZCcpOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuYWxnbyA9PSAxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2FsZ28nKS5odG1sKCc8c3BhbiBzdHlsZT0iY29sb3I6IzJFOUJCRiI+RUFUIFBFTExFVFM8L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHQuYWxnbyA9PSAyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2FsZ28nKS5odG1sKCc8c3BhbiBzdHlsZT0iY29sb3I6I0U4NjZFOCI+UlVOPC9zcGFuPicpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0LmFsZ28gPT0gMykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNhbGdvJykuaHRtbCgnPHNwYW4gc3R5bGU9ImNvbG9yOiM0M0RFMkYiPkNPTUUgVE8gTUVIPC9zcGFuPicpOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBlcmNlbnQgPSAodC5lYXRzIC8gdC5zcGF3bnMgKiAxMDApOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ocGVyY2VudCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gMDsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNlZmZpY2llbmN5JykuaHRtbCgnRWZmaWNpZW5jeSA6IDxzcGFuIHRpdGxlPSJlYXRlbi9zcGF3bmVkPWVmZmljaWVuY3klIj4nICsgdC5lYXRzICsgJy8nICsgdC5zcGF3bnMgKyAnICA9ICcgKyBwZXJjZW50LnRvRml4ZWQoMikgKyAnJTwvc3Bhbj4nKTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnBhcnR5RnVsbCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNtc2d0eHQnKS5odG1sKCdQYXJ0eSBwcm9iYWJseSBmdWxsJyk7CgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXQuam9pbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHh0ID0gJ0pvaW4gdGhlIGdhbWUgYW5kIHRoZSBib3RzIHdpbGwgY29ubmVjdCAoJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm9vbSA9PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHh0ICs9ICc/Pz8nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4dCArPSAocm9vbS5sZW5ndGggPCAxMCA/ICdQQVJUWScgOiAnRkZBIE5PVCBXT1JLSU5HJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHh0ICs9ICcpJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNtc2d0eHQnKS5odG1sKHR4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzaG93UmVtYWluaW5nKCk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBfc2Vjb25kID0gMTAwMDsKICAgICAgICAgICAgdmFyIF9taW51dGUgPSBfc2Vjb25kICogNjA7CiAgICAgICAgICAgIHZhciBfaG91ciA9IF9taW51dGUgKiA2MDsKICAgICAgICAgICAgdmFyIF9kYXkgPSBfaG91ciAqIDI0OwogICAgICAgICAgICBmdW5jdGlvbiBzaG93UmVtYWluaW5nKCkgewogICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudGRvd24nKSA9PSB1bmRlZmluZWQpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5leHBpcmUgPT0gdW5kZWZpbmVkIHx8IHdpbmRvdy5leHBpcmUgPT0gMCkKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKTsKICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IG5ldyBEYXRlKHdpbmRvdy5leHBpcmUpIC0gbm93OwogICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDwgMCkgewogICAgICAgICAgICAgICAgICAgIC8vY2xlYXJJbnRlcnZhbCh0aW1lcik7CiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnU0VORCBUSElTIFRPIE5FRUwnLG5ldyBEYXRlKCksbm93LG5ldyBEYXRlKHdpbmRvdy5leHBpcmUpLGRpc3RhbmNlKTsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY291bnRkb3duJykuaW5uZXJIVE1MID0gJ0VYUElSRUQhJzsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgZGF5cyA9IE1hdGguZmxvb3IoZGlzdGFuY2UgLyBfZGF5KTsKICAgICAgICAgICAgICAgIHZhciBob3VycyA9IE1hdGguZmxvb3IoKGRpc3RhbmNlICUgX2RheSkgLyBfaG91cik7CiAgICAgICAgICAgICAgICB2YXIgbWludXRlcyA9IE1hdGguZmxvb3IoKGRpc3RhbmNlICUgX2hvdXIpIC8gX21pbnV0ZSk7CiAgICAgICAgICAgICAgICB2YXIgc2Vjb25kcyA9IE1hdGguZmxvb3IoKGRpc3RhbmNlICUgX21pbnV0ZSkgLyBfc2Vjb25kKTsKCiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY291bnRkb3duJykuaW5uZXJIVE1MID0gZGF5cyArICdkYXlzICc7CiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY291bnRkb3duJykuaW5uZXJIVE1MICs9IGhvdXJzICsgJ2hycyAnOwogICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvdW50ZG93bicpLmlubmVySFRNTCArPSBtaW51dGVzICsgJ21pbnMgJzsKICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudGRvd24nKS5pbm5lckhUTUwgKz0gc2Vjb25kcyArICdzZWNzJzsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgdGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7Ly8gQUdBUkJPVE9WSAogICAgICAgICAgICAgICAgc2hvd1JlbWFpbmluZygpOwogICAgICAgICAgICB9LCAxMDAwKTsKICAgICAgICAgICAgZnVuY3Rpb24gZ290TmV3QmFsbChpZCkgewogICAgICAgICAgICAgICAgdmFyIGJhbGwgPSBudWxsOwogICAgICAgICAgICAgICAgZm9yIChpbmRleCBpbiBxKSB7Ly9BR0FSQk9UT1ZIIHBhcyBvdWJsaWVyIG1vZGlmIHEKICAgICAgICAgICAgICAgICAgICB2YXIgYiA9IHFbaW5kZXhdOwogICAgICAgICAgICAgICAgICAgIGlmIChiLmlkID09IGlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJhbGwgPSBiOwogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHh0KQogICAgICAgICAgICAgICAgICAgIGJ0LnNlbmQoSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IDEwLAogICAgICAgICAgICAgICAgICAgICAgICAnaWQnOiBpZCwKICAgICAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ05FV0JBTEwnLCBpZCwgYmFsbCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGhleFRvUmdiKGhleCkgewogICAgICAgICAgICAgICAgLy8gRXhwYW5kIHNob3J0aGFuZCBmb3JtIChlLmcuICIwM0YiKSB0byBmdWxsIGZvcm0gKGUuZy4gIjAwMzNGRiIpCiAgICAgICAgICAgICAgICB2YXIgc2hvcnRoYW5kUmVnZXggPSAvXiM/KFthLWZcZF0pKFthLWZcZF0pKFthLWZcZF0pJC9pOwogICAgICAgICAgICAgICAgaGV4ID0gaGV4LnJlcGxhY2Uoc2hvcnRoYW5kUmVnZXgsIGZ1bmN0aW9uIChtLCByLCBnLCBiKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgKyByICsgZyArIGcgKyBiICsgYjsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSAvXiM/KFthLWZcZF17Mn0pKFthLWZcZF17Mn0pKFthLWZcZF17Mn0pJC9pLmV4ZWMoaGV4KTsKICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgPyB7CiAgICAgICAgICAgICAgICAgICAgcjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksCiAgICAgICAgICAgICAgICAgICAgZzogcGFyc2VJbnQocmVzdWx0WzJdLCAxNiksCiAgICAgICAgICAgICAgICAgICAgYjogcGFyc2VJbnQocmVzdWx0WzNdLCAxNikKICAgICAgICAgICAgICAgIH0gOiBudWxsOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgb2Zmc2V0WCA9IDA7CiAgICAgICAgICAgIHZhciBvZmZzZXRZID0gMDsKICAgICAgICAgICAgZnVuY3Rpb24gbWFwQ29vcmRzKG1pbl94LCBtaW5feSwgbWF4X3gsIG1heF95KSB7CiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdtYXAnLG1heF94LW1pbl94KTsKICAgICAgICAgICAgICAgIGlmIChtYXhfeCAtIG1pbl94ID4gMTQwMDApIHsKICAgICAgICAgICAgICAgICAgICBvZmZzZXRYID0gbWluX3g7CiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0WSA9IG1pbl95OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGZ1bmN0aW9uIGhleShidWYsIHgsIHkpIHsKICAgICAgICAgICAgICAgIGlmIChzdG9wTW92ZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBtaWRYID0gMDsKICAgICAgICAgICAgICAgICAgICB2YXIgbWlkWSA9IDA7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1pblggPSAwOwogICAgICAgICAgICAgICAgICAgIHZhciBtaW5ZID0gMDsKICAgICAgICAgICAgICAgICAgICB2YXIgbWF4WCA9IDA7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1heFkgPSAwOwogICAgICAgICAgICAgICAgICAgIGZvciAoaW5kZXggaW4gcSkgey8vQUdBUkJPVE9WSCBwYXMgb3VibGllciBtb2RpZiBxCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiYWxsID0gcVtpbmRleF07Ly9BR0FSQk9UT1ZIIHBhcyBvdWJsaWVyIG1vZGlmIHEKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFggPSBiYWxsLng7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5YID0gYmFsbC54OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4WSA9IGJhbGwueTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblkgPSBiYWxsLnk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgYmFsbC54KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBiYWxsLngpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4WSA9IE1hdGgubWF4KG1heFksIGJhbGwueSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgYmFsbC55KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBtaWRYID0gKG1pblggKyBtYXhYKSAvIDI7CiAgICAgICAgICAgICAgICAgICAgbWlkWSA9IChtaW5ZICsgbWF4WSkgLyAyOwogICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdyZXBsYWNlJyx4LHksICdwYXIgJyxtaWRYLG1pZFkpOwoKICAgICAgICAgICAgICAgICAgICBidWYuc2V0SW50MzIoMSwgbWlkWCwgITApOwogICAgICAgICAgICAgICAgICAgIGJ1Zi5zZXRJbnQzMig1LCBtaWRZLCAhMCk7CiAgICAgICAgICAgICAgICAgICAgYnVmLnNldFVpbnQzMig5LCAwLCAhMCk7CiAgICAgICAgICAgICAgICAgICAgc2VuZEJ1ZmZlcihidWYpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgYnVmLnNldEludDMyKDEsIHgsICEwKTsKICAgICAgICAgICAgICAgICAgICBidWYuc2V0SW50MzIoNSwgeSwgITApOwogICAgICAgICAgICAgICAgICAgIGJ1Zi5zZXRVaW50MzIoOSwgMCwgITApOwogICAgICAgICAgICAgICAgICAgIHNlbmRCdWZmZXIoYnVmKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vQUdBUkJPVE9WSCBjaGFuZ2VyIGF1c3NpIOdhIHNpIG1lcCBkZSBzY3JpcHQKICAgICAgICAgICAgICAgIC8veCAvIHZhID0gKFggLSB0IC8gMikgLyBsICsgeTsKICAgICAgICAgICAgICAgIC8veSAvIHdhID0gKFkgLSB1IC8gMikgLyBsICsgegogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnQ0FMQ1VMIFggPSAnLFgsdCxsLHksJ3Rlc3QnLChYIC0gdCAvIDIpIC8gbCk7CgoKICAgICAgICAgICAgICAgIGlmIChtZmdoKSB7CiAgICAgICAgICAgICAgICAgICAgYmd6LnNlbmQoSlNPTi5zdHJpbmdpZnkoewogICAgICAgICAgICAgICAgICAgICAgICAiYWN0aW9uIjogNywKICAgICAgICAgICAgICAgICAgICAgICAgIngiOiB4IC0gb2Zmc2V0WCwKICAgICAgICAgICAgICAgICAgICAgICAgInkiOiB5IC0gb2Zmc2V0WQogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW1mZ2gpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYmFsbCA9IHFbMF07CiAgICAgICAgICAgICAgICAgICAgaWYgKGJhbGwgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICBiZ3ouc2VuZChKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYWN0aW9uIjogNywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ4IjogYmFsbC54IC0gb2Zmc2V0WCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ5IjogYmFsbC55IC0gb2Zmc2V0WQogICAgICAgICAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ21vdXNlIGluICcseCx5LCd0ZXN0Jyx4LXdpbmRvdy5tYXAubWluWCx5LXdpbmRvdy5tYXAubWluWSwnbWFwJyx3aW5kb3cubWFwKTsKCiAgICAgICAgICAgIH07CgogICAgICAgICAgICB2YXIgYmFzZVNldE5pY2sgPSB3aW5kby5zZXROaWNrOwogICAgICAgICAgICB3aW5kby5zZXROaWNrID0gZnVuY3Rpb24gKG4pIHsKICAgICAgICAgICAgICAgIGJhc2VTZXROaWNrKG4pOwogICAgICAgICAgICAgICAgaWYgKHh0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB7fTsKICAgICAgICAgICAgICAgICAgICBlLmFjdGlvbiA9IDM7CiAgICAgICAgICAgICAgICAgICAgZS5wbGF5ZXJOYW1lID0gbjsKICAgICAgICAgICAgICAgICAgICBidC5zZW5kKEpTT04uc3RyaW5naWZ5KGUpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBFTkQgQ1VTVE9NCiAgICAgICAgfQogICAgfSkod2luZG93LCB3aW5kb3cualF1ZXJ5KTsK';
var removed = false;

var d = function(a) {
	if (a.src.indexOf('main_out.js') >= 0) {
		window.ok = true;
		a.parentNode.removeChild(a);
		removed = true;
		console.log('AGARBOT - removed their script');
		var b = document.createElement('script');
		b.innerHTML = window.atob(engine);
		document.head.appendChild(b)
		console.log('AGARBOTDEBUG - added ours');
	}
};
var observer = new window.WebKitMutationObserver(function(b) {
	b.forEach(function(a) {
		for (var i = 0; i < a.addedNodes.length; ++i) {
			try {
				d(a.addedNodes[i]);
			} catch (e) {
			}
		}
	});
});
observer.observe(window.document, {
	subtree : true,
	childList : true,
	attribute : false
});
var x = false;
window.onload = function() {
	$("span[data-itr=option_show_mass]").prev()[0].checked = true;
	// setShowMass(true);
	var a = document.getElementById('gamemode').getElementsByTagName('option');
	if (a.length > 0) {
		for (var i = 0; i < a.length; i++) {
			if (a[i].getAttribute('data-itr') != 'party') {
				a[i].innerHTML += ' (Bots not working)';
			}
		}
	}
	if (!document.contains(document.getElementById('minions'))) {
		var b = document.createElement('div');
		b.id = 'minions';
		b.style.cssText = "position: absolute;top: 10px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  background-color: rgba(0, 0, 0, 0.65);width: 220px; height: 185px; ";
		if (window.infos == undefined)
			window.infos = 'D-Bots.com : connecting... (try to refresh your page)';
		//b.innerHTML = window.infos;
        var a = document.createElement('div');
        var c = document.createElement('div');
        var d = document.createElement('div');
        var e = document.createElement('div');
        var f = document.createElement('div');
        var g = document.createElement('div');
        var h = document.createElement('div');
        var i = document.createElement('div');
        var j = document.createElement('div');
        var k = document.createElement('div');
        var l = document.createElement('div');
        
        
        var w = window.innerWidth - 220;
       
        
        a.style.cssText = "position: absolute;top: 100px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  ";
        c.style.cssText = "position: absolute;top: 75px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  ";
        d.style.cssText = "position: absolute;top: 75px;right: " + w + "px;padding: 0 8px;background-color: blue; font-family: 'Ubuntu'; color: white; ";
        e.style.cssText = "position: absolute;top: 100px;right: " + w + "px;padding: 0 8px;font-family: 'Ubuntu';background-color: yellow;  ";
        f.style.cssText = "position: absolute;top: 125px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  ";
        g.style.cssText = "position: absolute;top: 150px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  ";
        h.style.cssText = "position: absolute;top: 125px;right: " + w + "px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  background-color: red";
        i.style.cssText = "position: absolute;top: 150px;right: " + w + "px;padding: 0 8px;font-family: 'Ubuntu'; color: white; background-color:red ";
        j.style.cssText = "position: absolute;top: 30px;left: 65px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  text-decoration: underline; font-size: 120% ";
        k.style.cssText = "position: absolute;top: 175px;right: " + w + "px;padding: 0 8px;font-family: 'Ubuntu'; color: white;";
        l.style.cssText = "position: absolute;top: 175px;left: 10px;padding: 0 8px;font-family: 'Ubuntu'; color: white;  ";
       
        
        a.id = 'bots';
        f.id = 'mouse';
        g.id = 'move';
        c.id = 'time';
        d.id = 'time_left';
        e.id = 'bot_count';
        h.id = 'mouse_off';
        i.id = 'move_off';
        j.id = 'd-bots-header';
        k.id = 'ip_text';
        l.id = 'ip';
        
        a.innerHTML = 'Bots:';
        c.innerHTML = 'Time left:';
        d.innerHTML = 'Not Connected';
        e.innerHTML = '0';
        f.innerHTML = 'Mouse Control:';
        g.innerHTML = 'Stop Move:';
        h.innerHTML = 'OFF';
        i.innerHTML = 'OFF';
        j.innerHTML = 'D-Bots.com';
        k.innerHTML = 'none';
        l.innerHTML = 'IP:';
        
        document.body.appendChild(b);
        document.body.appendChild(a);
        document.body.appendChild(d);
        document.body.appendChild(e);
        document.body.appendChild(c);
        document.body.appendChild(f);
        document.body.appendChild(g);
        document.body.appendChild(i);
        document.body.appendChild(h);
        document.body.appendChild(j);
        document.body.appendChild(k);
        document.body.appendChild(l);
        
		/*
		 * setTimeout(function(){ b.innerHTML = ''; },15000);
		 */
	}
    
    var key = localStorage.getItem('key');
    
   
    
	$("span[data-itr=instructions_w]")
			.append(
					'<br /><span style="font-size=xx-large;color:red;font-weight:bold">BOT INFO:</span><br />No plan active ? Check that you have correctly updated your IP ?<br />Press <b>T</b> to togle mouse movement<br />Press <b>R</b> to eject mass from your bot<br />Press <b>E</b> to split your bot (<b>Shift+E</b> fastSplit bots)<br />Press <b>D</b> to stop moving<br />Press <b>Shift+space</b> to fast split<br />Features : Infinite zoom<br />')
			.append(
					'<span style="color:red">FFA WITH BOTS IS NOT WORKING</span><br />You need to enter the game for the bots to connect,if the bot isn\'t working try to refresh the page<br /><br /><a href="http://d-bots.com">D-Bots.com</a> Disclaimer : <br />Remember that we have no link of any sort with agar.io and the bots can suddenly stop working if agar.io update its game. We will try our best to have our bot solution working and we won\'t refund you if its not.');
	$('#openfl-overlay').remove()
};
